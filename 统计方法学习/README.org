* [[https://blog.csdn.net/wds2006sdo/article/details/51923546][李航《统计学习方法》第二章——用Python实现感知器模型（MNIST数据集） - CSDN博客]]

** 问题描述

给出手写数字图片，预测它是不是 0

** 解决

*** 整理数据

修改从 Kaggle 获得的 train.csv，label 大于 0 的改为 1

#+begin_src sh
sed 's/^[1-9]/1/' ~/.kaggle/competitions/digit-recognizer/train.csv > train_binary.csv
#+end_src

*** 求解

hog.xml

#+begin_src xml :tangle hog.xml
<?xml version="1.0"?>
<opencv_storage>
<hog type_id="opencv-object-detector-hog">
  <winSize>
    28 28</winSize>
  <blockSize>
    14 14</blockSize>
  <blockStride>
    7 7</blockStride>
  <cellSize>
    7 7</cellSize>
  <nbins>9</nbins>
  <derivAperture>1</derivAperture>
  <winSigma>4.</winSigma>
  <histogramNormType>0</histogramNormType>
  <L2HysThreshold>2.0000000000000001e-001</L2HysThreshold>
  <gammaCorrection>1</gammaCorrection>
  <nlevels>64</nlevels></hog>
</opencv_storage>
#+end_src

digit.py

#+BEGIN_SRC python :tangle digit.py
  from random import randint

  import pandas as pd
  import numpy as np
  import cv2
  # from sklearn.cross_validation import train_test_split
  from sklearn.model_selection import train_test_split
  from sklearn.metrics import accuracy_score


  study_step = 0.0001                                 # 学习步长
  study_total = 10000                                 # 学习次数
  feature_length = 324                                # hog特征维度
  object_num = 0                                      # 分类的数字

  def get_hog_features(imgs):
      features = []

      hog = cv2.HOGDescriptor('hog.xml')

      for img in imgs:
          img = img.reshape((28, 28))
          cv_img = img.astype(np.uint8)

          feature = hog.compute(cv_img)
          features.append(feature)

      features = np.array(features)
      features = features.reshape((-1, 324))

      return features

  def train(imgs, labels):
      size = len(labels)

      w = np.zeros((feature_length, 1))
      b = 0

      study_count = 0
      nochange_count = 0
      nochange_count_limit = 100000

      while True:
          nochange_count += 1
          if nochange_count > nochange_count_limit:
              break

          # 随机选的数据
          index = randint(0, size-1)
          img = imgs[index]
          label = labels[index]

          # 计算yi(w*xi+b)
          yi = int(label != object_num) * 2 - 1
          result = yi * (np.dot(img, w) + b)

          # 如果yi(w*xi+b) <= 0 则更新 w 与 b 的值
          if result <= 0:
              img = img.reshape((feature_length, 1))

              w += img*yi*study_step
              b += yi*study_step

              study_count += 1
              if study_count > study_total:
                  break
              nochange_count = 0

      return w, b

  def predict(imgs, w, b):
      predicts = []
      for img in imgs:
          result = np.dot(img, w) + b

          predicts.append(int(result > 0))

      return np.array(predicts)


  print("Reading data...")
  raw_data = pd.read_csv('train_binary.csv', header=0)
  print("Reading data...Done")

  data = raw_data.values
  imgs = data[:, 1:]
  labels = data[:, 0]

  features = get_hog_features(imgs)

  # 选取 2/3 数据作为训练集， 1/3 数据作为测试集
  train_features, test_features, train_labels, test_labels = \
      train_test_split(features, labels, test_size=0.33, random_state=23323)

  print("Training...")
  w, b = train(train_features, train_labels)
  print("Training...Done")

  print("Predicting...")
  test_predicts = predict(test_features, w, b)
  print("Predicting...Done")

  score = accuracy_score(test_labels, test_predicts)
  print("The accuracy score is", score)
#+END_SRC

保存获得的 w, b 的值

#+BEGIN_SRC python :results output
  import json
  import cv2
  import numpy as np
  import pandas as pd


  def get_hog_features(imgs):
      features = []

      hog = cv2.HOGDescriptor('hog.xml')

      for img in imgs:
          img = img.reshape((28, 28))
          cv_img = img.astype(np.uint8)

          feature = hog.compute(cv_img)
          features.append(feature)

      features = np.array(features)
      features = features.reshape((-1, 324))

      return features

  def predict(imgs, w, b):
      predicts = []
      for img in imgs:
          result = np.dot(img, w) + b

          predicts.append(int(result > 0))

      return np.array(predicts)

  def main():
      with open('wb.json') as f:
          d = json.load(f)
          w = d['w']
          b = d['b']
      z = pd.read_csv('~/.kaggle/competitions/digit-recognizer/train.csv',
                      header=0,
                      nrows=10)
      labels = z.values[:, 0]
      print("Numbers:", labels)
      print("        ", np.array([1 if x > 0 else 0 for x in labels]))
      imgs = z.values[:, 1:]
      cv_imgs = get_hog_features(imgs)
      print("Predict:", predict(cv_imgs, w, b))

  main()
#+END_SRC

#+RESULTS:
: Numbers: [1 0 1 4 0 0 7 3 5 3]
:          [1 0 1 1 0 0 1 1 1 1]
: Predict: [1 0 1 1 0 0 1 1 1 1]
