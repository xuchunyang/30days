#+DATE: <2018-04-04 Wed>
#+PROPERTY: header-args:python :results value pp

* Chapter 1

~__future__~

#+begin_example
  ~/src/30days/Beginning-Python $ python2.7
  Python 2.7.14 (default, Mar  9 2018, 23:57:12)
  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin
  Type "help", "copyright", "credits" or "license" for more information.
  >>> 1 / 2
  0
  >>> from __future__ import division
  >>> 1 / 2
  0.5
  >>>
#+end_example

decimal, hex, octal[fn:1], binary

#+begin_src python :session
12 == 0xc == 0o14 == 0b1100
#+end_src

#+RESULTS:
: True

one-line if

#+begin_src python :session
if True: 42
#+end_src

#+RESULTS:
: 42

* Chapter 2

~None~

#+begin_src python :session
sequence = [None] * 10
sequence
#+end_src

#+RESULTS:
: [None, None, None, None, None, None, None, None, None, None]

~in~

#+begin_src python :session 
  (
      1 in [1,2,3],
      4 in [1,2,3],
      'a' in 'abc',
      'ab' in 'abc'               # substring
  )
#+end_src

#+RESULTS:
: (True, False, True, True)

Tuple

#+begin_src python :session
  [
      (),                         # len = 0
      (1,),                       # len = 1
      (1,2)                       # len = 2
  ]
#+end_src

#+RESULTS:
: [(), (1,), (1, 2)]

切片的切片是拷贝

#+begin_src python :session
lst = [1,2,3]
lst[:][:] = []
lst
#+end_src

#+RESULTS:
: [1, 2, 3]

* Chapter 3

[[https://www.python.org/dev/peps/pep-0498/][PEP 498 -- Literal String Interpolation | Python.org]]

#+begin_src python :session
name = 'Python'
f'Hello, {name}'
#+end_src

#+RESULTS:
: 'Hello, Python'

#+begin_src python :session :results output
    left = 20
    right = 10
    fmt = '{{:{}}}{{:>{}}}'.format(left, right)
    print(fmt.format('Name 1', 'Tomo'))
    print(fmt.format('Name 2', 'Jerry'))
#+end_src

#+RESULTS:
: Name 1                    Tomo
: Name 2                   Jerry

~join~ & ~split~

#+begin_src python :session
chars = list("abc")
', '.join(chars)
#+end_src

#+RESULTS:
: 'a, b, c'

#+begin_src python :session
  (
      'hello world'.split(),
      '2018-04-05'.split(sep='-')
  )
#+end_src

#+RESULTS:
: (['hello', 'world'], ['2018', '04', '05'])


~replace~

#+begin_src python :session
'foo bar foobar'.replace('foo', 'FOO')
#+end_src

#+RESULTS:
: 'FOO bar FOObar'

~strip~

#+begin_src python :session
'      hello world          \n '.strip()
#+end_src

#+RESULTS:
: 'hello world'

~translate~

#+begin_src python :session
table = str.maketrans('ab', 'AB')
'abba'.translate(table)
#+end_src

#+RESULTS:
: 'ABBA'

* Chapter 4

dict view

#+BEGIN_SRC python :session :results value pp
d = {"one": 1, "two": 2}; d
#+END_SRC

#+RESULTS:
: {'one': 1, 'two': 2}

#+BEGIN_SRC python :session :results value pp
it = d.items(); it
#+END_SRC

#+RESULTS:
: dict_items([('one', 1), ('two', 2)])

#+BEGIN_SRC python :session :results value pp
('one', 1) in it
#+END_SRC

#+RESULTS:
: True

format_map

#+BEGIN_SRC python :session :results value pp
"one is {one}, two is {two}".format_map(d)
#+END_SRC

#+RESULTS:
: 'one is 1, two is 2'

* Chapter 5

假

#+BEGIN_SRC python :session :results value pp
[bool(x) for x in [False, None, 0, '', (), {}, []]]
#+END_SRC

#+RESULTS:
: [False, False, False, False, False, False, False]

== V.S. is

#+BEGIN_SRC python :session :results value pp
a, b = 100, 100
a == b, a is b
#+END_SRC

#+RESULTS:
: (True, True)

#+BEGIN_SRC python :session :results value pp
id(a), id(b)
#+END_SRC

#+RESULTS:
: (4484073184, 4484073184)

#+BEGIN_SRC python :session :results value pp
x, y = [1, 2, 3], [1, 2, 3]
x == y, x is y
#+END_SRC

#+RESULTS:
: (True, False)

assert

#+BEGIN_SRC python :session :results value pp
assert int(input('> ')) == 42
#+END_SRC

loop dict

#+BEGIN_SRC python :session :results output
  table = {"one": 1, "two": 2}
  for i in table:
    print("The value of '{}' in table is {}".format(i, table[i]))
#+END_SRC

#+RESULTS:
: The value of 'one' in table is 1
: The value of 'two' in table is 2

同时 loop 两个列表

#+BEGIN_SRC python :session :results value pp
keys = ['one', 'two', 'three']
values = [1, 2, 3]
list(zip(keys, values))
#+END_SRC

#+RESULTS:
: [('one', 1), ('two', 2), ('three', 3)]

#+BEGIN_SRC python :session :results value pp
  d = {}
  for k, v in zip(keys, values):
    d[k] = v
  d
#+END_SRC

#+RESULTS:
: {'one': 1, 'three': 3, 'two': 2}

loop 时带索引

#+BEGIN_SRC python :session :results output
  numbers = list(range(10))
  index = 0
  while index < len(numbers):
    print(f"numbers[{index}] = {numbers[index]}")
    index += 1
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
numbers[0] = 0
numbers[1] = 1
numbers[2] = 2
numbers[3] = 3
numbers[4] = 4
numbers[5] = 5
numbers[6] = 6
numbers[7] = 7
numbers[8] = 8
numbers[9] = 9
#+END_EXAMPLE

enumerate

#+BEGIN_SRC python :session :results output
  for index, char in enumerate('hello'):
    print(index, char)
#+END_SRC

#+RESULTS:
: 0 h
: 1 e
: 2 l
: 3 l
: 4 o

* Chapter 6

长度可变的参数

#+BEGIN_SRC python :session :results value pp
  def foo(*args): 
      return sum(list(args))

  foo(1, 2, 3)
#+END_SRC

#+RESULTS:
: 6

#+BEGIN_SRC python :session :results value pp
args = (1,2,3)foo(*args)
#+END_SRC

#+RESULTS:
: 6

#+BEGIN_SRC python :session :results output
  def bar(**args):
      for k, v in args.items():
          print(f'args[{k}] = {v}')

  bar(x=1, y=2, z=3)
  print()
  d = {'x': 1, 'y': 2, 'z': 3}
  bar(**d)
#+END_SRC

#+RESULTS:
: args[x] = 1
: args[y] = 2
: args[z] = 3
: 
: args[x] = 1
: args[y] = 2
: args[z] = 3

* Footnotes

[fn:1] https://www.python.org/dev/peps/pep-3127/
