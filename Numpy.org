* Create Arrary

- np.array
- np.ones
- np.zeros
- np.empty

#+BEGIN_SRC ipython :session :results value pp
  import numpy as np
  numbers = np.array(range(1, 11))
  numbers
#+END_SRC

#+RESULTS:
: # Out[7]:
: : array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])

#+BEGIN_SRC ipython :session :results raw drawer
  ones = np.ones((2,4)); ones
#+END_SRC

#+RESULTS:
:results:
# Out[30]:
#+BEGIN_EXAMPLE
  array([[1., 1., 1., 1.],
  [1., 1., 1., 1.]])
#+END_EXAMPLE
:end:

#+BEGIN_SRC ipython :session :results raw drawer
  zeros = np.zeros((2,4)); zeros
#+END_SRC

#+RESULTS:
:results:
# Out[31]:
#+BEGIN_EXAMPLE
  array([[0., 0., 0., 0.],
  [0., 0., 0., 0.]])
#+END_EXAMPLE
:end:

#+BEGIN_SRC ipython :session :results raw drawer
  empty = np.empty((2,4)); empty
#+END_SRC

#+RESULTS:
:results:
# Out[32]:
#+BEGIN_EXAMPLE
  array([[0., 0., 0., 0.],
  [0., 0., 0., 0.]])
#+END_EXAMPLE
:end:

- eyes

#+BEGIN_SRC ipython :session :results raw drawer
np.eye(3)
#+END_SRC

#+RESULTS:
:results:
# Out[55]:
#+BEGIN_EXAMPLE
  array([[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]])
#+END_EXAMPLE
:end:

- arange

#+BEGIN_SRC ipython :session :results raw drawer
np_numbers = np.arange(2, 4, 0.5); np_numbers
#+END_SRC

#+RESULTS:
:results:
# Out[59]:
: array([2. , 2.5, 3. , 3.5])
:end:

- astype

#+BEGIN_SRC ipython :session :results raw drawer
x = np.array([1,2,2.5])
x.astype(int)
#+END_SRC

#+RESULTS:
:results:
# Out[61]:
: array([1, 2, 2])
:end:

** metadata

- ndim :: The number of dimensions of an array
- shape
- dtype

#+BEGIN_SRC ipython :session :results raw drawer
  def inspect(arr): 
      return {"ndim": arr.ndim, "shape": arr.shape, "dtype": arr.dtype}

  inspect(numbers)
#+END_SRC

#+RESULTS:
:results:
# Out[50]:
: {'dtype': dtype('int64'), 'ndim': 1, 'shape': (10,)}
:end:

#+BEGIN_SRC ipython :session :results raw drawer
inspect(ones)
#+END_SRC

#+RESULTS:
:results:
# Out[51]:
: {'dtype': dtype('float64'), 'ndim': 2, 'shape': (2, 4)}
:end:

** reshape

#+BEGIN_SRC ipython :session :results raw drawer
a = np.array([[1,2,3], [4,5,6]])
np.reshape(a, 6)
#+END_SRC

#+RESULTS:
:results:
# Out[85]:
: array([1, 2, 3, 4, 5, 6])
:end:

#+BEGIN_SRC ipython :session :results raw drawer
b = np.arange(1,9,1)
np.reshape(b, (2,4))
#+END_SRC

#+RESULTS:
:results:
# Out[82]:
#+BEGIN_EXAMPLE
  array([[1, 2, 3, 4],
  [5, 6, 7, 8]])
#+END_EXAMPLE
:end:

#+BEGIN_SRC ipython :session :results raw drawer
b3d = b.reshape(2,2,2)
b3d
#+END_SRC

#+RESULTS:
:results:
# Out[84]:
#+BEGIN_EXAMPLE
  array([[[1, 2],
  [3, 4]],
  
  [[5, 6],
  [7, 8]]])
#+END_EXAMPLE
:end:

#+BEGIN_SRC ipython :session :results raw drawer
b3d.swapaxes(1,2)
#+END_SRC

#+RESULTS:
:results:
# Out[87]:
#+BEGIN_EXAMPLE
  array([[[1, 3],
  [2, 4]],
  
  [[5, 7],
  [6, 8]]])
#+END_EXAMPLE
:end:

* Index

** by number


#+BEGIN_SRC ipython :session :results raw drawer
a = np.array([[1,2,3], [4,5,6]]); a
#+END_SRC

#+RESULTS:
:results:
# Out[94]:
#+BEGIN_EXAMPLE
  array([[1, 2, 3],
  [4, 5, 6]])
#+END_EXAMPLE
:end:

- [i,j] or [i][j] :: single element (i,j)
- [i] or [i,:] :: i-th row (1 dim)
- [:,j] :: j-th column (1 dim)
- [[i], [j]] (number of j dim)

#+BEGIN_SRC ipython :session :results raw drawer
  a[1][2]
#+END_SRC

#+RESULTS:
:results:
# Out[101]:
: 6
:end:

#+BEGIN_SRC ipython :session :results raw drawer
a[0]
#+END_SRC

#+RESULTS:
:results:
# Out[108]:
: array([1, 2, 3])
:end:

#+BEGIN_SRC ipython :session :results raw drawer
a[:,2]
#+END_SRC

#+RESULTS:
:results:
# Out[114]:
: array([3, 6])
:end:

#+BEGIN_SRC ipython :session :results raw drawer
a[[0,1], 2]
#+END_SRC

#+RESULTS:
:results:
# Out[106]:
: array([3, 6])
:end:

** by boolean array

#+BEGIN_SRC ipython :session :results raw drawer
dirty = np.array([9, 4, 1, -3, -5]); dirty
#+END_SRC

#+RESULTS:
:results:
# Out[121]:
: array([ 9,  4,  1, -3, -5])
:end:

#+BEGIN_SRC ipython :session :results raw drawer
whos_dirty = dirty < 0; whos_dirty
#+END_SRC

#+RESULTS:
:results:
# Out[122]:
: array([False, False, False,  True,  True])
:end:

#+BEGIN_SRC ipython :session :results raw drawer
  dirty[whos_dirty] = 0; dirty
#+END_SRC

#+RESULTS:
:results:
# Out[124]:
: array([9, 4, 1, 0, 0])
:end:

#+BEGIN_SRC ipython :session :results raw drawer
a = np.arange(1,11)
even_a = (a % 2 == 0) | (a == 5)
a[even_a] = -a[even_a]
a
#+END_SRC

#+RESULTS:
:results:
# Out[139]:
: array([  1,  -2,   3,  -4,  -5,  -6,   7,  -8,   9, -10])
:end:

* Broadcasting

#+BEGIN_SRC ipython :session :results raw drawer
a = np.arange(4)
b = np.arange(1, 5)
a + b
#+END_SRC

#+RESULTS:
:results:
# Out[143]:
: array([1, 3, 5, 7])
:end:

行数和列数一般必须相同：

#+BEGIN_SRC ipython :session :results raw drawer
a = np.array([[1, 2], [3, 4]])
b = np.array([[100, 200], [300, 400]])
a + b
#+END_SRC

#+RESULTS:
:results:
# Out[163]:
#+BEGIN_EXAMPLE
  array([[101, 202],
  [303, 404]])
#+END_EXAMPLE
:end:

如果有一个列数为 1，且行数相同也行：

#+BEGIN_SRC ipython :session :results raw drawer
a = np.array([[1], [3]])
b = np.array([[1, 2, 3], [4, 5, 6]])
a + b
#+END_SRC

#+RESULTS:
:results:
# Out[162]:
#+BEGIN_EXAMPLE
  array([[2, 3, 4],
  [7, 8, 9]])
#+END_EXAMPLE
:end:

行数相同，而列数均不是 1 的不行（这样的操作也没有意义）：

#+BEGIN_SRC ipython :session :results raw drawer
a = np.array([[1, 2], [3, 4]])
b = np.array([[1, 2, 3], [4, 5, 6]])
a + b
#+END_SRC

#+BEGIN_SRC ipython :session :results raw drawer
noise = np.eye(4) + 0.01 * np.ones(4)
noise
#+END_SRC

#+RESULTS:
:results:
# Out[170]:
#+BEGIN_EXAMPLE
  array([[1.01, 0.01, 0.01, 0.01],
         [0.01, 1.01, 0.01, 0.01],
         [0.01, 0.01, 1.01, 0.01],
         [0.01, 0.01, 0.01, 1.01]])
#+END_EXAMPLE
:end:

#+begin_src ipython :session :results raw drawer
np.random.random([4,4])
#+END_SRC

#+RESULTS:
:results:
# Out[172]:
#+BEGIN_EXAMPLE
  array([[0.53512467, 0.81234863, 0.87119686, 0.1709906 ],
  [0.25541895, 0.6779305 , 0.28972543, 0.87654079],
  [0.44751913, 0.31879857, 0.03564778, 0.46899243],
  [0.87082351, 0.60295903, 0.49822142, 0.00936001]])
#+END_EXAMPLE
:end:

#+BEGIN_SRC ipython :session :results raw drawer
a = np.random.random_sample((2,3))
b = (a*10).astype(int)
b
#+END_SRC

#+RESULTS:
:results:
# Out[185]:
#+BEGIN_EXAMPLE
  array([[4, 1, 1],
  [6, 7, 6]])
#+END_EXAMPLE
:end:

* Universal function

negative

#+BEGIN_SRC ipython :session :results raw drawer
a = np.arange(1,11)
np.negative(a)
#+END_SRC

#+RESULTS:
:results:
# Out[189]:
: array([ -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,  -9, -10])
:end:

isnan

#+BEGIN_SRC ipython :session :results raw drawer
a = np.arange(5, dtype=float); a
evens = a % 2 == 0
a[evens] = np.nan
a
#+END_SRC

#+RESULTS:
:results:
# Out[195]:
: array([nan,  1., nan,  3., nan])
:end:

#+BEGIN_SRC ipython :session :results raw drawer
np.isnan(a)
#+END_SRC

#+RESULTS:
:results:
# Out[196]:
: array([ True, False,  True, False,  True])
:end:

unique

#+BEGIN_SRC ipython :session :results raw drawer
  chars = np.array(list("hello"))
  np.unique(chars)
#+END_SRC

#+RESULTS:
:results:
# Out[201]:
: array(['e', 'h', 'l', 'o'], dtype='<U1')
:end:

* where

#+BEGIN_SRC ipython :session :results raw drawer
  np.where([[True, False], [True, True]],
           [[1,2], [3,4]],
           [[5,6], [7,8]])
#+END_SRC

#+RESULTS:
:results:
# Out[197]:
#+BEGIN_EXAMPLE
  array([[1, 6],
  [3, 4]])
#+END_EXAMPLE
:end:

* .npy

#+BEGIN_SRC ipython :session :results raw drawer
a = np.arange(1,101, dtype=float).reshape(10,10)
np.save("1-100.npy", a)
a_copy = np.load("1-100.npy")
a_copy
#+END_SRC

#+RESULTS:
:results:
# Out[208]:
#+BEGIN_EXAMPLE
  array([[  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.],
  [ 11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.],
  [ 21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.,  30.],
  [ 31.,  32.,  33.,  34.,  35.,  36.,  37.,  38.,  39.,  40.],
  [ 41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,  49.,  50.],
  [ 51.,  52.,  53.,  54.,  55.,  56.,  57.,  58.,  59.,  60.],
  [ 61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.,  70.],
  [ 71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  79.,  80.],
  [ 81.,  82.,  83.,  84.,  85.,  86.,  87.,  88.,  89.,  90.],
  [ 91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  99., 100.]])
#+END_EXAMPLE
:end:

* axis

(3,4) 指两维数组，第一维长度 3，第二维长度 4。

- shape :: 形状
- ndim :: shape 个数
- axis :: 有 ndim 个
- row 两维数组中的「行」，对于 axis = 0
- column 两维数组中的「列」，对于 axis = 1

#+BEGIN_SRC ipython :session :results raw drawer
  a = np.arange(6)                #  1D array
  a.ndim
#+END_SRC

#+RESULTS:
:results:
# Out[11]:
: 1
:end:

#+BEGIN_SRC ipython :session :results raw drawer
  b = np.arange(12).reshape(3,4)  #  2D array
  b.ndim
#+END_SRC

#+RESULTS:
:results:
# Out[16]:
: 2
:end:

#+BEGIN_SRC ipython :session :results raw drawer
  c = np.arange(24).reshape(2,3,4) # 3D array
  c.ndim
#+END_SRC

#+RESULTS:
:results:
# Out[18]:
: 3
:end:

#+BEGIN_SRC ipython :session :results raw drawer
  a = [1,2,3]

  b = [[1,2,3], 
       [4,5,6]]

  c = [[[1],
        [2]], 
       [[3], [4]]]
  [np.array(x).ndim for x in [a, b, c]]
#+END_SRC

#+RESULTS:
:results:
# Out[30]:
: [1, 2, 3]
:end:

#+BEGIN_SRC ipython :session :results raw drawer
def f(x,y): return 10*x+y
b = np.fromfunction(f,(5,4), dtype=int)
b
#+END_SRC

#+RESULTS:
:results:
# Out[34]:
#+BEGIN_EXAMPLE
  array([[ 0,  1,  2,  3],
  [10, 11, 12, 13],
  [20, 21, 22, 23],
  [30, 31, 32, 33],
  [40, 41, 42, 43]])
#+END_EXAMPLE
:end:

#+BEGIN_SRC ipython :session :results raw drawer
b[0:5, 1]
#+END_SRC

#+RESULTS:
:results:
# Out[38]:
: array([ 1, 11, 21, 31, 41])
:end:

#+BEGIN_SRC ipython :session :results raw drawer
b[:, 1]
#+END_SRC

#+RESULTS:
:results:
# Out[39]:
: array([ 1, 11, 21, 31, 41])
:end:

#+BEGIN_SRC ipython :session :results raw drawer
a = np.arange(12).reshape(3,4)
a
#+END_SRC

#+RESULTS:
:results:
# Out[45]:
#+BEGIN_EXAMPLE
  array([[ 0,  1,  2,  3],
  [ 4,  5,  6,  7],
  [ 8,  9, 10, 11]])
#+END_EXAMPLE
:end:

#+BEGIN_SRC ipython :session :results raw drawer
  a.sum(axis = 0)
#+END_SRC

#+RESULTS:
:results:
# Out[46]:
: array([12, 15, 18, 21])
:end:

#+BEGIN_SRC ipython :session :results raw drawer
a.sum(axis = 1)
#+END_SRC

#+RESULTS:
:results:
# Out[47]:
: array([ 6, 22, 38])
:end:

* View or Shallow Copy V.S. Deep Copy
