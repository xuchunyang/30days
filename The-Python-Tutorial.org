* [[https://docs.python.org/3/tutorial/introduction.html][3. An Informal Introduction to Python — Python 3.6.5 documentation]]

** Numbers

整数自动被转换成浮点数：

#+begin_src python :results output
  print(3 / 4)
  print(1.0 * 1)
#+end_src

#+RESULTS:
: 0.75
: 1.0

~//~ 跟 ~/~ 类似但去掉小数部分：

#+begin_src python :results output
    print(8 / 5)
    print(8 // 5)
#+end_src

#+RESULTS:
: 1.6
: 1

指数运算用 ~**~

#+begin_src python :results output
  print(2 ** 10)
#+end_src

#+RESULTS:
: 1024

变量赋值用 ~=~

#+begin_src python :results output
two = 2
ten = 10
result = two ** ten
print("2 的 10 次方为", result)
#+end_src

#+RESULTS:
: 2 的 10 次方为 1024

混和了整数和浮点数的计算会先把整数转换成浮点数

#+begin_src python :results output
print(2 * 0.5)
#+end_src

#+RESULTS:
: 1.0

** Strings

单双引号都能表示

#+begin_src python :results output
  print("Hello, Python!")
  print('Hello, Python!')
#+end_src

#+RESULTS:
: Hello, Python!
: Hello, Python!

如有需要 Escape 引号的，用 ~\~

#+begin_src python :results output
print("single quote => '")
print('single quote => \'')
print('double quote => "')
print("double quote => \"")
#+end_src

#+RESULTS:
: single quote => '
: single quote => '
: double quote => "
: double quote => "

取消 ~\~ 的特殊含义，在前面加一个 ~r~

#+begin_src python :results output
print("Hello, World\n")
print(r"Hello, World\n")
#+end_src

#+RESULTS:
: Hello, World
:
: Hello, World\n

用 3 个引号表示超过一行的字符串

#+begin_src python :results output
    print("""\
    Usage: foo [OPTIONS]
         --version                 Show version
         --help                    Show help\
    """)
#+end_src

#+RESULTS:
: Usage: foo [OPTIONS]
:      --version                 Show version
:      --help                    Show help

用 ~+~ 串联字符串，用 ~*~ 重复字符串

#+begin_src python :results output
msg = "Hello, " + "World" + "!"
pad = '-' * 13
print(pad, msg, pad)
#+end_src

#+RESULTS:
: ------------- Hello, World! -------------

两个字符串摆到一起会自动相连

#+begin_src python :results output
print('Py' 'thon')
#+end_src

#+RESULTS:
: Python

上面这个特性是为了避免「longlines」

#+begin_src python :results output
  text = ('这是一个很长的段落，'
          '放到一个引号里写会导致'
          ' 「Long Line」。')
  print(text)
#+end_src

#+RESULTS:
: 这是一个很长的段落，放到一个引号里写会导致 「Long Line」。

获得字符串中的字符

#+begin_src python :results output
  word = "Hello"
  print(word[0])
  print(word[1])
  print(word[2])
  print(word[3])
  print(word[4])
#+end_src

#+RESULTS:
: H
: e
: l
: l
: o

索引从 0 开始，如果为负数则从结尾数起

#+begin_src python :results output
print('hello'[-1])
print('hello'[-5])
#+end_src

#+RESULTS:
: o
: h

对于长度为 ~N~ 的字符串，用 [0, N-1] 或者 [-1, -N] 索引。

~substring~ 在 Python 中叫做 Slicing 「切片？」

#+begin_src python :session :results output
  greeting = 'Hello, World!'
  print(greeting[0:5])
  print(greeting[7:-1])
  print()
  print(greeting[:5])
  print(greeting[7:])
#+end_src

#+RESULTS:
: Hello
: World
:
: Hello
: World!

写法是 [beg:end]，区间为 [beg, end)，下图有助于理解

#+begin_example
   +---+---+---+---+---+
   | H | E | L | L | O |
   +---+---+---+---+---+
   0   1   2   3   4   5
  -5  -4  -3  -2  -1
#+end_example

Python 的 String 一经生成就不能改动。

获得字符串的长度，用 ~len~

#+begin_src python :session
greeting = "Hello, World"
len(greeting)
#+end_src

#+RESULTS:
: 12

*** TODO String - See also

1. String 作为 Sequence 的一种
2. String 常用方法
3. 格式化字符串
4. printf

** Lists

列表、序列或数组

#+begin_src python :session :results value pp
  numbers = [1, 2, 3, 4, 5]
  numbers
#+end_src

#+RESULTS:
: [1, 2, 3, 4, 5]

跟 String 一样，List 也属于 Sequence 类型，因此也能「切片」

#+begin_src python :session :results output
  four_numbers = [1, 2, 3, 4]
  two_numbers = four_numbers[1:3]
  print("four_numbers = ", four_numbers)
  print("two_numbers = ", two_numbers)

  two_numbers[0] *= 100
  four_numbers[1] *= 200
  print("four_numbers = ", four_numbers)
  print("two_numbers = ", two_numbers)
#+end_src

#+RESULTS:
: four_numbers =  [1, 2, 3, 4]
: two_numbers =  [2, 3]
: four_numbers =  [1, 400, 3, 4]
: two_numbers =  [200, 3]

上例可说明：

1. 不像 String，List 的值可以改
2. 「切片」返回的是一个完全新的 List，修改其中一个不会对另一个值产生影响，跟 ~seq-subseq~ 一样

TODO Shallow copy 是什么意思？Python List 切片和 Emacs 的 ~seq-copy~ 都用到了这个术语。

List 串联用 ~+~

#+begin_src python :session
  [1, 2] + [3, 4]
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 |

加一个新元素用 ~append~

#+begin_src python :session
  # 不行，没报错，但也不返回结果
  # [1, 2, 3].append(4)

  list = [1, 2]
  list.append(3)
  list.append(4)
  list
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 |

甚至直接给 Slice 赋值，达到同时修改多值的目的

#+begin_src python :session
  list = [1, 2, 3, 4, 5]
  list[2:4] = [300, 400]
  list
#+end_src

#+RESULTS:
| 1 | 2 | 300 | 400 | 5 |

清空 List

#+begin_src python :session
  list = [1, 2, 3]
  # 为什么不直接 list = []，还是纯粹为了举例？
  list[:] = []
  list
#+end_src

#+RESULTS:
: []

用 ~len~ 获得 List 的长度

#+begin_src python :session
len([1, 2, 3])
#+end_src

#+RESULTS:
: 3

List 的嵌套

#+begin_src python :session :results output
numbers = [1, 2, 3]
characters = ['a', 'b', 'c']
lists = [numbers, characters]
print(lists[1])
print(lists[1][2])
#+end_src

#+RESULTS:
: ['a', 'b', 'c']
: c

** 第一步

生成 Fibonacci 序列 1, 1, 2, 3, 5, 8, ...

#+begin_src python :session :results output
  a, b = 0, 1
  while b < 10:
      print(b)
      a, b = b, a+b
#+end_src

#+RESULTS:
: 1
: 1
: 2
: 3
: 5
: 8

Python 中同时给多个变量赋值的计算顺序跟 ~cl-psetq~ 一样：

- 从左往右先计算完所以的值，最后在赋值

利用它，可以很容易地交换两个变量的值

#+begin_src python :session
  x = 1
  y = 2
  x, y = y, x
  [x, y]
#+end_src

#+RESULTS:
| 2 | 1 |

#+begin_src emacs-lisp
  (let ((x 1) (y 2))
    (cl-psetq x y
              y x)
    (list x y))
#+end_src

#+RESULTS:
| 2 | 1 |

Python 跟 C 一样，0 为假，其余均为真。

Python 对缩进有明确要求，这个别的语言不同。

~print~ 的参数 ~end~ 预设是一个空格，可以像这样修改它

#+begin_src python :results output
  numbers = [1, 2, 3, 4, 5]
  i = 0
  while i < len(numbers):
      print(numbers[i], end=',')
      i += 1
#+end_src

#+RESULTS:
: 1,2,3,4,5,

* [[https://docs.python.org/3/tutorial/controlflow.html][4. More Control Flow Tools — Python 3.6.5 documentation]]

** ~if~

if ... elif ... else

#+begin_src python :session :var s=(read-string "Number: ") :results output
  x = int(s)
  if x < 0:
      x = 0
      print('Negative changed to zero')
  elif x == 0:
      print('Zero')
  elif x == 1:
      print('Single')
  else:
      print('More')
#+end_src

#+RESULTS:
: More

** ~for~

#+begin_src python :session :results output
  strings = ['one', 'two', 'three']
  for x in strings:
      print(x, len(x))
#+end_src

#+RESULTS:
: one 3
: two 3
: three 5

修改 List，这会造成死循环：

#+begin_src python
  ints = [1, 2, 3]
  for x in ints:
    if x == 2:
      ints.insert(0, 100)
  return(ints)
#+end_src

可以为 for 专门先拷贝一份 List

#+begin_src python :session :results output
  ints = [1, 2, 3]
  for x in ints[:]:
    if x == 2:
      ints.insert(0, 200)
  print(ints)
#+end_src

#+RESULTS:
: [200, 1, 2, 3]

** ~range()~

#+begin_src python :session :results output
  for i in range(5):
    print(i)
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3
: 4

#+begin_src python :session :results output
  for i in range(3, 5):
    print(i)
#+end_src

#+RESULTS:
: 3
: 4

用索引遍历一个 List

#+begin_src python :session :results output
  numbers = ['one', 'two', 'three']
  for i in range(len(numbers)):
      print(numbers[i])
#+end_src

#+RESULTS:
: one
: two
: three

range() 的返回值是 iterable 的，可以被 for 和 list 这样的 iterator 理解

#+begin_src python :session
list(range(5))
#+end_src

#+RESULTS:
| 0 | 1 | 2 | 3 | 4 |

** ~break~, ~continue~ and ~else~

for ... else

#+begin_src python :session :results output
  for n in range(2, 10):
      for x in range(2, n):
          if n % x == 0:
              print(n, 'equals', x, '*', n//x)
              break
      else:
          print(n, 'is a prime number')    
#+end_src

#+RESULTS:
: 2 is a prime number
: 3 is a prime number
: 4 equals 2 * 2
: 5 is a prime number
: 6 equals 2 * 3
: 7 is a prime number
: 8 equals 2 * 4
: 9 equals 3 * 3

for ... continue

#+begin_src python :session :results output
  for num in range(2, 10):
      if num % 2 == 0:
          print('Found an even number', num)
          continue
      print("Found a number", num)
#+end_src

#+RESULTS:
: Found an even number 2
: Found a number 3
: Found an even number 4
: Found a number 5
: Found an even number 6
: Found a number 7
: Found an even number 8
: Found a number 9

** ~pass~

什么都不做，占位

#+begin_src python :session
  while True:
      pass
#+end_src

#+begin_src python :session
  def foo(arg):
      pass                            # TODO
#+end_src

** Defining Functions

定义函数：

- Name
- Arguments
- Docstring
- Return Value

#+begin_src python :session :results output
  def fib(n):
      """Print a Fibonacci series up to n."""
      a, b = 0, 1
      while b < n:
          print(a, end= ' ')
          a, b = b, a + b
      print()

  fib(100)
#+end_src

#+RESULTS:
: 0 1 1 2 3 5 8 13 21 34 55

#+begin_src python :session
  def fib2(n):
      result = []
      a, b = 0, 1
      while b < n:
          result.append(a)
          a, b = b, a + b
      return result

  fib2(10)
#+end_src

#+RESULTS:
| 0 | 1 | 1 | 2 | 3 | 5 |

** 参数表的定义和调用

设置参数预设值，会使之变成可选参数

#+begin_src python :results output
  def hello(name="World"):
    return "Hello, " + name + "!"
  print(hello())
  print(hello("Python"))
#+end_src

#+RESULTS:
: Hello, World!
: Hello, Python!

注意这个预设值只会求一次，有些类似

#+begin_src emacs-lisp :lexical t
  ;; -*- lexical-binding: t; -*-
  (let ((index 0) list)
    (defun foo ()
      (push (cl-incf index) list)
      list))

  (list (foo) (foo) (foo))
#+end_src

#+RESULTS:
| 1 |   |   |
| 2 | 1 |   |
| 3 | 2 | 1 |

#+begin_src python :session :results output
  def f(a, L=[]):
      L.append(a)
      return L

  # print([f(1), f(2), f(3)])
  print(f(1))
  print(f(2))
  print(f(3))
#+end_src

#+RESULTS:
: [1]
: [1, 2]
: [1, 2, 3]

函数调用者可以用关键词输入参数。

#+begin_src python :session
  def my_sum(*args, initial=0):
      return initial + sum(args)

  my_sum(1, 2, 3)
#+end_src

#+RESULTS:
: 6

#+begin_src python :session
  def concat(*args, sep="/"):
      return "/" + sep.join(args)

  concat("path", "to", "python")
#+end_src

#+RESULTS:
: /path/to/python

依照参数表的要求解压数据

#+begin_src python :session :results output
args = [1, 3]

print(list(range(args[0], args[1])))

print(list(range(*args)))
#+end_src

#+RESULTS:
: [1, 2]
: [1, 2]

** Lambda

#+begin_src python :session
add1 = lambda x: x + 1
add1(100)
#+end_src

#+RESULTS:
: 101

#+begin_src python :session
  pairs = [(1, "one"), (2, "two"), (3, "three"), (4, "four")]
  pairs.sort(key=lambda pair: pair[1])
  pairs
#+end_src

#+RESULTS:
| 4 | four  |
| 1 | one   |
| 3 | three |
| 2 | two   |

** Functions' Docstring

Docstring 的习俗，跟 Emacs 类似。

#+begin_src python :session
  def hello():
      """Print "Hello, World!\n".

      That is it.
      """
      print("Hello, World!")
#+end_src

用 ~__doc__~ 从获得 Docstring

#+begin_src python :session :results value pp
  hello.__doc__
#+end_src

#+RESULTS:
: 'Print "Hello, World!\n".\n\n    That is it.\n    '

** 编码风格 - PEP 8

* [[https://docs.python.org/3/tutorial/datastructures.html][5. Data Structures — Python 3.6.5 documentation]]

** List 方法

append

#+begin_src python :results output
xl = [1, 2, 3]
xl.append(4)
print(xl)

yl = [1, 2, 3]
yl[len(yl):] = [4]
print(yl)
#+end_src

#+RESULTS:
: [1, 2, 3, 4]
: [1, 2, 3, 4]

extend

#+begin_src python :session
l = [1, 2]
l.extend(range(3, 10))
l
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |

insert

#+begin_src python :session
l = ['a', 'b', 'c']
l.insert(0, '<')
l.insert(len(l), '>')
l
#+end_src

#+RESULTS:
| < | a | b | c | > |

remove

#+begin_src python :session
l = [1, 2, 3, 1]
l.remove(1)
l
#+end_src

#+RESULTS:
| 2 | 3 | 1 |

pop

#+begin_src python :session :results output
xl = [1, 2, 3, 4]
print(xl.pop())
print(xl.pop(0))
print(xl)
#+end_src

#+RESULTS:
: 4
: 1
: [2, 3]

clear

#+begin_src python :session
l = [1, 2]
l.clear()
#+end_src

~lst = []~ v.s. ~lst.clear()~ 的讨论：

[[https://stackoverflow.com/questions/850795/different-ways-of-clearing-lists][python - Different ways of clearing lists - Stack Overflow]]

然而我并不明白

index

#+begin_src python :session
[1, 2, 3, 2, 1].index(2)
#+end_src

#+RESULTS:
: 1

count

#+begin_src python :session
[1,2,3,2,1].count(1)
#+end_src

#+RESULTS:
: 2

sort

#+begin_src python :session
lst = [1, 5, 4, 2, 3]
lst.sort()
lst
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 |

reverse

#+begin_src python :session
lst = [1,2,3]
lst.reverse()
lst
#+end_src

#+RESULTS:
| 3 | 2 | 1 |

copy

#+begin_src python :session
  lst = [1,2,3]
  copy = lst.copy()
  lst[:0] = [100]
  copy[3:] = [200]
  [lst, copy]
#+end_src

#+RESULTS:
| 100 | 1 | 2 |   3 |
|   1 | 2 | 3 | 200 |

构造 List

#+begin_src python :session
  squares = []
  for x in range(10):
      squares.append(x**2)

  squares
#+end_src

#+RESULTS:
| 0 | 1 | 4 | 9 | 16 | 25 | 36 | 49 | 64 | 81 |

#+begin_src python :session
list(map(lambda x: x**2, range(10)))
#+end_src

#+RESULTS:
| 0 | 1 | 4 | 9 | 16 | 25 | 36 | 49 | 64 | 81 |

map

#+begin_src python :session
[x**2 for x in range(10)]
#+end_src

#+RESULTS:
| 0 | 1 | 4 | 9 | 16 | 25 | 36 | 49 | 64 | 81 |

#+begin_src python :session :results value pp
[(x, y) for x in [1,2] for y in [3, 4]]
#+end_src

#+RESULTS:
: [(1, 3), (1, 4), (2, 3), (2, 4)]

#+begin_src python :session
[x**2 for x in [1,2,3]]
#+end_src

#+RESULTS:
| 1 | 4 | 9 |

filter

#+begin_src python :session
[x for x in [-1, 0, 1, 2, 3] if x > 0]
#+end_src

#+RESULTS:
| 1 | 2 | 3 |

flattern

#+begin_src python :session
[y for x in [[1,2], [3,4]] for y in x]
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 |

zip

#+begin_src python :session :results value pp
  matrix = [
      [1, 2],
      [3, 4],
      [5, 6],
  ]

  [[row[i] for row in matrix] for i in range(2)]
#+end_src

#+RESULTS:
: [[1, 3, 5], [2, 4, 6]]

#+begin_src python :session :results value pp
list(zip([1,2], [3,4]))
#+end_src

#+RESULTS:
: [(1, 3), (2, 4)]

** del

#+begin_src python :session :results output
l = list(range(0, 10))
del l[0]
print(l)
del l[3:5]
print(l)
del l[:]
print(l)
#+end_src

#+RESULTS:
: [1, 2, 3, 4, 5, 6, 7, 8, 9]
: [1, 2, 3, 6, 7, 8, 9]
: []

完全删除一个变量

#+begin_src python :session
  x = 123
  del x
#+end_src


** Tuples

#+begin_src python :session :results value pp
t = 1, True, 'hello'
t
#+end_src

#+RESULTS:
: (1, True, 'hello')

tuple 的值不能改

#+begin_src python :session :results value pp
x = 1, True, "Hello"
first, second, third = x
[first, second, third]
#+end_src

#+RESULTS:
: [1, True, 'Hello']

** Sets

集合（无序、单一）

#+begin_src python :session :results output
  numbers = {1, 1, 2, 3, 4, 5}
  print(numbers, len(numbers))
  empty = set()
  print(empty, len(empty))
#+end_src

#+RESULTS:
: {1, 2, 3, 4, 5} 5
: set() 0

#+begin_src python :session
ints = {1,3}
[x in ints for x in [1, 2, 3]]
#+end_src

#+RESULTS:
| True | False | True |

** Dictionaries

类似的讲法 Alist, Plist, Hash Table。Python Dictionaries 的键要求是不可变的类似的数据，如数字、字符串，Tuple。

#+begin_src python :session
{}
#+end_src

#+RESULTS:
: {}

#+begin_src python :session :results output
tiger = {'kind': "cat", 'speed': 40}
tiger['color'] = 'yellow'
print(tiger)
print(tiger['kind'])
print(list(tiger.keys()))
print(list(tiger.values()))
print('life-span' in tiger)
#+end_src

#+RESULTS:
: {'kind': 'cat', 'speed': 40, 'color': 'yellow'}
: cat
: ['kind', 'speed', 'color']
: ['cat', 40, 'yellow']
: False

#+begin_src python :session :results value pp
dict([('one', 1), ('two', 2)])
#+end_src

#+RESULTS:
: {'one': 1, 'two': 2}

#+begin_src python :session :results value pp
dict(x=3, y=4)
#+end_src

#+RESULTS:
: {'x': 3, 'y': 4}

** Loop Techniques

#+begin_src python :session :results output
  foo = {'one': 1, 'two': 2, 'three': 3}
  for k, v in foo.items():
      print(k, v)
#+end_src

#+RESULTS:
: one 1
: two 2
: three 3

索引

#+begin_src python :session :results value pp
  [(i, v) for i, v in enumerate(['a', 'b', 'c'])]
#+end_src

#+RESULTS:
: [(0, 'a'), (1, 'b'), (2, 'c')]

同时 Loop 两个等长序列

#+begin_src python :session :results output
  questions = ['1 + 2', '2 + 3', '3 + 4']
  answers = [3, 5, 7]
  for q, a in zip(questions, answers):
      print(q, '=', a)
#+end_src

#+RESULTS:
: 1 + 2 = 3
: 2 + 3 = 5
: 3 + 4 = 7

从后向前

#+begin_src python :session :results output
  for i in reversed(range(1, 10)):
      print(i)
#+end_src

#+RESULTS:
: 9
: 8
: 7
: 6
: 5
: 4
: 3
: 2
: 1

按顺序

#+begin_src python :session :results output
  nums = [1, 3, 4, 2, 3, 3, 1]
  for i in sorted(set(nums)):
      print(i)
#+end_src

#+RESULTS:
: 1
: 2
: 3
: 4

#+begin_src python :session
  import math
  raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
  [x for x in raw_data if not math.isnan(x)]
#+end_src

#+RESULTS:
| 56.2 | 51.7 | 55.3 | 52.5 | 47.8 |

** Sequence 的比较

按照词典顺序

#+begin_src python :session
[1,2,3] < [1,2,4]
#+end_src

#+RESULTS:
: True

#+begin_src python :session
'a' < 'b' < 'c'
#+end_src

#+RESULTS:
: True

一个元素一个元素地比较，"abc" 比 "abcd" 大，字典就是如此。

#+begin_src python :session
[1,2] < [1,2,3]
#+end_src

#+RESULTS:
: True

* [[https://docs.python.org/3/tutorial/modules.html][6. Modules — Python 3.6.5 documentation]]

文件对应模块，模块有 Namespace，就是它的文件名。

** 导入模块

#+begin_src python :session
  # 模块
  import fibo
  # 模块中的方法
  from fibo import fib, fib2
  from fibo import *
  # 别名
  import fibo as fib
  from fibo import fib as fibonacci
#+end_src

** 模块同时作为程序本身

#+begin_src python :session
  if __name__ == "__main__":
      import sys
      print("Hello, " + sys.argv[1] + "!")
#+end_src

** 模块的 ~load-path~

~import foo~ 的搜索顺序：

1. 看看 ~foo~ 是不是内置的
2. 看看 ~sys.path~ 中有没有一个 ~foo.py~ 文件， ~sys.path~ 包含了：
   - 当前路径
   - ~PYTHONPATH~

** Standard Modules

举例 ~sys~

#+begin_src python :session :results value pp
import sys
[sys.ps1, sys.ps2]
#+end_src

#+RESULTS:
: ['>>> ', '... ']

#+begin_src python :session :results pp
sys.path
#+end_src

#+RESULTS:
: ['',
:  '/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6/lib/python36.zip',
:  '/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6/lib/python3.6',
:  '/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/lib-dynload',
:  '/usr/local/lib/python3.6/site-packages']

** ~dir()~ - 探索模块

#+begin_src python :session :results pp
[m for m in dir(fibo) if not m.startswith('__')]
#+end_src

#+RESULTS:
: ['fib', 'fib2']

** Packages

package/subpackage/.../module

每个目录下 ~__init__.py~ 用来提醒 Python 这个目录是 Package 的一部分，它可以是个空文件。

* [[https://docs.python.org/3/tutorial/inputoutput.html][7. Input and Output — Python 3.6.5 documentation]]

** 格式化

第一个问题是如何把 Python Value 转成 String 类型

- ~str()~ 人可读
- ~repr()~ 机器可读 REPResentation

#+begin_src python :session
str(1).rjust(4)
#+end_src

#+RESULTS:
:    1

#+begin_src python :session :results output
  for x in range(1, 11):
      print(str(x).rjust(2), str(x*x).rjust(3), str(x*x*x).rjust(4))
#+end_src

#+RESULTS:
#+BEGIN_EXAMPLE
1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000
#+END_EXAMPLE

#+begin_src python :session :results output
  for x in range(1, 11):
    print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))
#+end_src

#+RESULTS:
#+BEGIN_EXAMPLE
1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000
#+END_EXAMPLE

~{}~ 指定替换位置

#+begin_src python :session
  name = 'Python'
  'Hello, {}!'.format(name)
#+end_src

#+RESULTS:
: Hello, Python!

编号指定参数位置

#+begin_src python :session
"{0} + {1} = {1} + {0}".format(1, 2)
#+end_src

#+RESULTS:
: 1 + 2 = 2 + 1

可以用 keyword argument

#+begin_src python :session
'Hello, {name}!'.format(name='Python')
#+end_src

#+RESULTS:
: Hello, Python!

#+begin_src python :session :results output
  table = {'x': 42, 'zzz': 1922}
  for k, v in table.items():
      print('{0:10} => {1:10d}'.format(k, v))
#+end_src

#+RESULTS:
: x          =>         42
: zzz        =>       1922

** 读写文件

一次性读出文件内容：

#+begin_src python :results output silent
  f = open("/usr/share/dict/connectives")
  print(f.read())
  f.close()
#+end_src

一行一行地读：

#+begin_src python :session
  import sys

  f = open("/usr/share/dict/connectives")
  while True:
      line = f.readline()
      if line != '':
          sys.stdout.write(line)
      else:
          break
  f.close()
#+end_src

更紧凑的写法：

#+begin_src python :session
  with open('/usr/share/dict/connectives') as f:
      for line in f:
          print(line, end='')
#+end_src

写入文件：

#+begin_src python :results output
  msg = 'Hello, Python!\n'
  with open('/tmp/workfile', 'w+') as f:
      f.write(msg)
      f.seek(0)
      if msg == f.read():
          print("Success")
      else:
          print("Failure")
#+end_src

#+RESULTS:
: Success

** Python 数据写入 JSON

查看 List 的 JSON 表示：

#+begin_src python :session :results value pp
import json
json.dumps([1, 'simple', 'list'])
#+end_src

#+RESULTS:
: '[1, "simple", "list"]'


保存到文件：

#+begin_src python :session
  import json
  with open("/tmp/a.json", "w") as f:
      json.dump([1, 'simple', 'list', '!'], f)
#+end_src

读取 JSON 文件：

#+begin_src python :session :results value pp
  import json
  with open("/tmp/a.json") as f:
      json.load(f)
#+end_src

#+RESULTS:
: [1, 'simple', 'list', '!']

* [[https://docs.python.org/3/tutorial/errors.html][8. Errors and Exceptions — Python 3.6.5 documentation]]

处理指定的异常

#+begin_src python :results output
  try:
      with open("non-exist.txt"):
          pass
  except FileNotFoundError:
      print("No such file or directory")
#+end_src

#+RESULTS:
: No such file or directory

处理一系列的异常：

#+begin_src python :session
  import sys

  try:
      f = open('myfile.txt')
      s = f.readline()
      i = int(s.strip())
  except OSError as err:
      print("OS error: {0}".format(err))
  except ValueError:
      print("Could not convert data to an integer.")
  except:
      print("Unexpected error:", sys.exc_info()[0])
      raise
#+end_src

#+RESULTS:

抛出异常：

#+begin_src python :session :results output
  try:
      raise Exception('spam', 'eggs')
  except Exception as inst:
      print(type(inst))
      print(inst.args)
      print(inst)
#+end_src

#+RESULTS:
: <class 'Exception'>
: ('spam', 'eggs')
: ('spam', 'eggs')

检查异常，但不处理它

#+begin_src python :session
  try:
      raise NameError("foobar")
  except NameError:
      print("An exception occurs")
      raise
#+end_src

TODO 自定义异常：


try ... except ... else ... finally

* [[https://docs.python.org/3/tutorial/classes.html][9. Classes — Python 3.6.5 documentation]]

** 定义 Class 

- ~__init__~ 初始化
- 一个类实例包含了 data 和 method
  + data 指 class/instance variable
  + method 第一个参数 self，指的是实例本身，调用时不写

#+begin_src ipython :session class :results raw drawer
  class Dog:

      kind = '家养'

      def __init__(self, name):
          self.name = name

      def bark(self):
          return str("汪汪")
#+end_src

#+RESULTS:
:results:
# Out[5]:
:end:

使用 Class

#+begin_src ipython :session class :results raw drawer
  d = Dog('小黄')
  [d.kind, d.name, d.bark()]
#+end_src

#+RESULTS:
:results:
# Out[6]:
: ['家养', '小黄', '汪汪']
:end:

** Class v.s. instance Variables

Class variables 被所有的实例共享，对于 List 这样的 mutable 类似，修改它会影响所有实例

#+begin_src ipython :session :results raw drawer
  class MyClass:
      num = 0
      lst = []

      def p(self):
          print(self.num, self.lst)

  a = MyClass()
  a.num += 1
  a.lst.append(1)
  a.p()
  b = MyClass()
  b.p()
#+end_src

#+RESULTS:
:results:
# Out[13]:
:end:

应该用 Instance variables

#+begin_src ipython :session :results raw drawer
  class MyClass:

      def __init__(self, name):
          self.name = name
          self.numbers = []

      def add_number(self, number):
          self.numbers.append(number)

  a, b, c = [MyClass(n) for n in ["a", "b", "c"]]
  a.add_number(1)
  b.add_number(2)
  c.add_number(3)
  print(a.numbers, b.numbers, c.numbers)
#+end_src

#+RESULTS:
:results:
# Out[19]:
:end:

** 杂

- 同名 data/method, 优先 data
- 需要调用同类中的其它方法，用 self.方法
- 习惯上用 self 作为第一个参数

** 用 Class 做 Structure

#+begin_src ipython :session
  class Cat:
    pass

tom = Cat()

tom.name = "Tom"
tom.age = 7
tom.color = 'blue & white'

print(tom.name)
#+end_src

#+RESULTS:
: # Out[22]:

** 迭代 (遍历、循环)

以下数据都能用 ~for~ 语句实现遍历

- List
- Tuple
- Dict
- Str
- file

因为它们实现了 Iterator protocol

#+begin_src ipython :session :results raw drawer
  class Reverse:
      """从后向前遍历一个序列的迭代器."""
      def __init__(self, data):
          self.data = data
          self.index = len(data)

      def __iter__(self):
          return self

      def __next__(self):
          if self.index == 0:
              raise StopIteration
          self.index -= 1
          return self.data[self.index]

  rev = Reverse('abcd')
  [x for x in rev]
#+end_src

#+RESULTS:
:results:
# Out[33]:
: ['d', 'c', 'b', 'a']
:end:

使用 Generator 生成 Iterator

#+begin_src ipython :session :results raw drawer
  def reverse(data):
      for index in range(len(data)-1, -1, -1):
          yield data[index]

  for char in reverse('hello'):
      print(char)
#+end_src

#+RESULTS:
:results:
# Out[34]:
:end:

generator expression

#+begin_src ipython :session :results raw drawer
sum(i for i in range(1, 101))
#+end_src

#+RESULTS:
:results:
# Out[36]:
: 5050
:end:

跟构造 List 的相似

#+begin_src ipython :session :results raw drawer
sum([i for i in range(1, 101)])
#+end_src

#+RESULTS:
:results:
# Out[37]:
: 5050
:end:
