#+TITLE: Project 2 | Data Visualization
#+DATE: <2018-04-24 Tue>

#+PROPERTY: header-args :exports both

* 15-1 立方

数字的三次方被称为其立方。请绘制一个图形，显示前5个整数的立方值，再绘
制一个图形，显示前5000个整数的立方值。

#+BEGIN_SRC python :results file
  # 1-5 的立方
  import matplotlib.pyplot as plt

  x = [1, 2, 3, 4, 5]
  y = [i**3 for i in x]

  plt.plot(x, y, 'ro')
  plt.title("Cube Numbers [1, 5]")
  plt.xlabel("Cube of Value")
  plt.ylabel("Value")

  filename = 'cube1.png'
  plt.savefig(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:cube1.png]]

#+BEGIN_SRC python :results file
  # 1-5000的立方
  import matplotlib.pyplot as plt

  x = list(range(1, 5001))
  y = [i**3 for i in x]

  plt.plot(x, y)

  filename = 'cube2.svg'
  plt.savefig(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:cube2.svg]]

* 15-2 彩色立方

#+BEGIN_SRC python :results file
  # 1-5000的立方
  import matplotlib.pyplot as plt

  x = list(range(1, 5001))
  y = [i**3 for i in x]

  plt.scatter(x, y, c=y, cmap=plt.cm.Blues)

  filename = 'cube3.svg'
  plt.savefig(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:cube3.svg]]

* 15-3 分子运动

DONE

* 15-4 改进的随机漫步

DONE

* 15-5 重构

DONE

* 15-6 自动生成标签

一个骰子

#+BEGIN_SRC python :results file
  from random import randint

  import pygal


  class Die():

      def __init__(self, num_sides=6):
          self.num_sides = num_sides

      def roll(self):
          return randint(1, self.num_sides)

      def values(self):
          return list(range(1, self.num_sides+1))


  die = Die()
  results = [die.roll() for num_roll in range(1000)]
  values = die.values()
  frequencies = [results.count(value) for value in values]

  hist = pygal.Bar()
  hist.title = "掷骰子 1000 次的结果"
  hist.x_labels = values
  hist.x_title = "点数"
  hist.y_title = "次数"
  hist.add("D6", frequencies)
  filename = "15-6-1.svg"
  hist.render_to_file(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:15-6-1.svg]]

两个骰子

#+BEGIN_SRC python :results file
  from random import randint

  import pygal


  results = [randint(1, 6) + randint(1, 6) for i in range(5000)]
  values = list(range(2, 13))
  frequencies = [results.count(value) for value in values]

  hist = pygal.Bar()
  hist.x_labels = values
  hist.add("D6 + D6", frequencies)
  filename = "15-6-2.svg"
  hist.render_to_file(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:15-6-2.svg]]

* 15-7 两个 D8 骰子

#+BEGIN_SRC python :results file
  from random import randint

  import pygal


  results = [randint(1, 8) + randint(1, 8) for i in range(10_0000)]
  values = list(range(2, 17))
  frequencies = [results.count(value) for value in values]

  hist = pygal.Bar()
  hist.x_labels = values
  hist.add("D8 + D8", frequencies)
  filename = "15-7.svg"
  hist.render_to_file(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:15-7.svg]]

* 15-8 同时掷三个骰子

#+BEGIN_SRC python :results file
  from random import randint

  import pygal


  results = [randint(1, 6) + randint(1, 6) + randint(1, 6)
             for i in range(10_0000)]
  values = list(range(3, 19))
  frequencies = [results.count(value) for value in values]

  hist = pygal.Bar()
  hist.x_labels = values
  hist.add("D6 + D6 + D6", frequencies)
  filename = "15-8.svg"
  hist.render_to_file(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:15-8.svg]]

* 15-9 将点数相乘

#+BEGIN_SRC python :results file
  from random import randint

  import pygal


  results = [randint(1, 6) * randint(1, 6) for i in range(10_0000)]
  values = sorted(set([i * j for i in range(1, 7) for j in range(1, 7)]))
  print(values)
  frequencies = [results.count(value) for value in values]

  hist = pygal.Bar()
  hist.x_labels = values
  hist.add("D6 * D6", frequencies)
  filename = "15-9.svg"
  hist.render_to_file(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:15-9.svg]]

* 15-10 练习使用本章介绍的两个库

使用matplotlib通过可视化来模拟掷骰子的情况

#+BEGIN_SRC python :results file
  from random import randint

  import matplotlib.pyplot as plt


  x = [1, 2, 3, 4, 5, 6]
  results = [randint(1, 6) for i in range(1000)]
  y = [results.count(i) for i in x]

  plt.plot(x, y)
  plt.title("Results of rolling one D6 1000 times")
  plt.xlabel("Result")
  plt.ylabel("Frequency of Result")
  filename = "15-10-1.svg"
  plt.savefig(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:15-10-1.svg]]

使用Pygal通过可视化来模拟随机漫步的情况

#+BEGIN_SRC python :results file
  import pygal

  from random_walk import RandomWalk

  rw = RandomWalk(100)
  rw.fill_walk()

  xy_chart = pygal.XY()
  xy_chart.title = '随机漫步 100 点'
  xy_chart.add("XY", list(zip(rw.x, rw.y)))
  xy_chart.add('End Point',  [(rw.x[-1], rw.y[-1])])
  filename = "15-10-2.svg"
  xy_chart.render_to_file(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:15-10-2.svg]]

* 16-1 旧金山

#+BEGIN_SRC python :tangle 16-1.py
  import csv
  import sys
  from datetime import datetime

  import matplotlib.pyplot as plt


  # https://www.rapidtables.com/convert/temperature/fahrenheit-to-celsius.html
  def f2c(f):
      """Fahrenheit to Celsius"""
      return (f - 32) * (5/9)

  # 洛杉矶
  filename = "san_francisco_2014.csv"
  with open(filename) as f:
      reader = csv.reader(f, delimiter=';')
      header_row = next(reader)

      dates, highs, lows = [], [], []
      for row in reader:
          try:
              year = int(row[0])
              month = int(row[1])
              day = int(row[2])
              date = datetime(year, month, day)
              high = float(row[-2])
              low = float(row[-1])
          except ValueError:
              print(date, 'missing data')
          else:
              dates.append(date)
              # 转换成摄氏度，我不熟悉华氏
              highs.append(high)
              lows.append(low)

  fig = plt.figure(dpi=128, figsize=(10, 6))
  plt.plot(dates, highs, c='red', alpha=0.5)
  plt.plot(dates, lows, c='blue', alpha=0.5)
  plt.fill_between(dates, highs, lows, facecolor='blue', alpha=0.1)

  plt.title("Daily high and low temperature - 2014\nSan Francisco, CA")
  plt.xlabel("")
  fig.autofmt_xdate()
  plt.ylabel("Temperature (C)")

  plt.show()
#+END_SRC

* 16-2 比较锡特卡和死亡谷的气温

#+BEGIN_SRC python :tangle 16-2-1.py
  import csv
  from datetime import datetime

  import matplotlib.pyplot as plt


  # https://www.rapidtables.com/convert/temperature/fahrenheit-to-celsius.html
  def f2c(f):
      """Fahrenheit to Celsius"""
      return (f - 32) * (5/9)

  def get_data(filename):
      with open(filename) as f:
          reader = csv.reader(f)
          header_row = next(reader)

          dates, highs, lows = [], [], []
          for row in reader:
              try:
                  date = datetime.strptime(row[0], "%Y-%m-%d")
                  high = int(row[1])
                  low = int(row[3])

              except ValueError:
                  print(date, 'missing data')
              else:
                  dates.append(date)
                  # 转换成摄氏度，我不熟悉华氏
                  high = f2c(high)
                  highs.append(high)
                  low = f2c(low)
                  lows.append(low)
          return dates, highs, lows

  # 死亡谷 - 加州 - 沙漠
  filename = "death_valley_2014.csv"
  dates, highs, lows = get_data(filename)

  fig = plt.figure(dpi=128, figsize=(10, 6))
  plt.plot(dates, highs, c='red', alpha=0.5)
  plt.plot(dates, lows, c='blue', alpha=0.5)
  plt.fill_between(dates, highs, lows, facecolor='blue', alpha=0.1)

  plt.ylim(-10, 45)

  plt.title("Daily high and low temperature - 2014\nDeath VAlley, CA")
  plt.xlabel("")
  fig.autofmt_xdate()
  plt.ylabel("Temperature (C)")

  plt.show()
#+END_SRC

#+BEGIN_SRC python :tangle 16-2-2.py
  import csv
  from datetime import datetime

  import matplotlib.pyplot as plt


  # https://www.rapidtables.com/convert/temperature/fahrenheit-to-celsius.html
  def f2c(f):
      """Fahrenheit to Celsius"""
      return (f - 32) * (5/9)

  def get_data(filename):
      with open(filename) as f:
          reader = csv.reader(f)
          header_row = next(reader)

          dates, highs, lows = [], [], []
          for row in reader:
              try:
                  date = datetime.strptime(row[0], "%Y-%m-%d")
                  high = int(row[1])
                  low = int(row[3])

              except ValueError:
                  print(date, 'missing data')
              else:
                  dates.append(date)
                  # 转换成摄氏度，我不熟悉华氏
                  high = f2c(high)
                  highs.append(high)
                  low = f2c(low)
                  lows.append(low)
          return dates, highs, lows

  # 阿拉斯加州 - 北极圈
  filename = "sitka_weather_2014.csv"
  dates, highs, lows = get_data(filename)

  fig = plt.figure(dpi=128, figsize=(10, 6))
  plt.plot(dates, highs, c='red', alpha=0.5)
  plt.plot(dates, lows, c='blue', alpha=0.5)
  plt.fill_between(dates, highs, lows, facecolor='blue', alpha=0.1)

  plt.ylim(-10, 45)

  plt.title("Daily high and low temperature - 2014\nSitka")
  plt.xlabel("")
  fig.autofmt_xdate()
  plt.ylabel("Temperature (C)")

  plt.show()
#+END_SRC

* 16-3 降雨量

#+BEGIN_SRC python :results file
  import csv
  from datetime import datetime

  import matplotlib.pyplot as plt

  def get_data(filename):
      with open(filename) as f:
          reader = csv.reader(f)
          header_row = next(reader)

          dates, rains = [], []
          for row in reader:
              try:
                  date = datetime.strptime(row[0], "%Y-%m-%d")
                  rain = float(row[-4])
              except ValueError:
                  print(date, 'missing data')
              else:
                  dates.append(date)
                  rains.append(rain)
          return dates, rains

  # 阿拉斯加州 - 北极圈
  filename = "sitka_weather_2014.csv"
  dates, rains = get_data(filename)

  fig = plt.figure(dpi=128, figsize=(10, 6))
  plt.plot(dates, rains)

  plt.title("Daily PrecipitationIn - 2014\nSitka")
  plt.xlabel("")
  fig.autofmt_xdate()
  plt.ylabel("PrecipitationIn")

  filename = 'out.svg'
  plt.savefig(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:out.svg]]

* 16-4 探索

#+BEGIN_SRC python :results file
  import csv
  from datetime import datetime

  import matplotlib.pyplot as plt

  def get_data(filename):
      with open(filename) as f:
          reader = csv.reader(f)
          header_row = next(reader)

          dates, highs, lows = [], [], []
          for row in reader:
              try:
                  date = datetime.strptime(row[0], "%Y-%m-%d")
                  high = int(row[1])
                  low = int(row[2])
              except ValueError:
                  print(date, 'missing data')
              else:
                  dates.append(date)
                  highs.append(high)
                  lows.append(low)
          return dates, highs, lows

  filename = "binhai.csv"
  dates, highs, lows = get_data(filename)
  mids = [(high + low) / 2 for high, low in zip(highs, lows)]

  fig = plt.figure(dpi=128, figsize=(10, 6))
  plt.plot(dates, mids)

  plt.title("Mid Temperature - Binhai")
  plt.xlabel("")
  fig.autofmt_xdate()
  plt.ylabel("Temperature")

  filename = 'binhai.svg'
  plt.savefig(filename)
  return filename
#+END_SRC

#+RESULTS:
[[file:binhai.svg]]
