#+TITLE: Notes for Python Crash Course
#+DATE: <2018-04-16 Mon>

* Part one

** Chapter 1

#+BEGIN_SRC python :session :results output
print("Hello Python world!")
#+END_SRC

#+RESULTS:
: Hello Python world!

#+begin_quote
在文件名和文件夹名中，最好使用小写字母，并使用下划线来表示空格，因为这
是Python采用的命名约定
#+end_quote

可能是因为 Python 标识符中不能用 dash

*** Exercises

**** 1-1 浏览 https://www.python.org

Python 水平越高，这个网址越有用

**** 1-1 输入错误

我能理解函数未定义、括号引号不匹配这样的语法错误，并且能看懂报错信息。

#+begin_src sh :results output
python -c 'printf("Hello Python world!")' 2>&1 || true
#+end_src

#+RESULTS:
: Traceback (most recent call last):
:   File "<string>", line 1, in <module>
: NameError: name 'printf' is not defined

#+begin_src sh :results output
python -c 'print(x"Hello Python world!")' 2>&1 || true
#+end_src

#+RESULTS:
:   File "<string>", line 1
:     print(x"Hello Python world!")
:                                ^
: SyntaxError: invalid syntax

#+begin_src sh :results output
python -c 'print("Hello)' 2>&1 || true
#+end_src

#+RESULTS:
:   File "<string>", line 1
:     print("Hello)
:                 ^
: SyntaxError: EOL while scanning string literal

#+begin_src sh :results output
python -c 'print("Hello"' 2>&1 || true
#+end_src

#+RESULTS:
:   File "<string>", line 1
:     print("Hello"
:                 ^
: SyntaxError: unexpected EOF while parsing

**** 1-3 无穷的技艺

三个我想创建的程序：

1. 朗文词典第五版的 Emacs 浏览器（主要用 Python 实现，参考用 PyQt 写的 LDOCE5 Viewer）
2. 个人网站或者博客（用 Flask 之类的实现）
3. 写一个类似 Spotlight 之类的切换器，除了打开应用，还能切换 Chrome 标签和 Emacs Buffer

** Chapter 2

#+begin_src python :session :results output
  message = "Hello Python world!"
  print(message)

  message = "Hello Python Crash Course world!"
  print(message)
#+end_src

#+RESULTS:
: Hello Python world!
: Hello Python Crash Course world!

命名规则：[a-zA-Z0-9_]+ and not [0-9]+.+ and not 内置关键词和函数名

#+begin_src python :session :results output
  def check_name(name):
      import re
      import keyword
      import builtins
      if not re.fullmatch(r"[a-zA-Z0-9_]+", name):
          print("Error: {} contains invalid character".format(name))
      elif re.match(r"[0-0]", name):
          print("Error: {} starts with number".format(name))
      elif name in keyword.kwlist:
          # https://docs.python.org/3/library/stdtypes.html
          print("Error: {} is keyword name".format(name))
      elif name in dir(builtins):
          print("Error: {} is builtins function name".format(name))
      else:
          print("OK: {} is vaild variable name".format(name))

  for name in ["my-name", "my_name", "1name", "name1", "ABC123", "_______", "print", "import"]:
      check_name(name)
#+end_src

#+RESULTS:
: Error: my-name contains invalid character
: OK: my_name is vaild variable name
: OK: 1name is vaild variable name
: OK: name1 is vaild variable name
: OK: ABC123 is vaild variable name
: OK: _______ is vaild variable name
: Error: print is builtins function name
: Error: import is keyword name

*** Exercises

**** 2-1 简单消息

#+BEGIN_SRC python :session :results output
  message = "世界，你好！"
  print(message)
#+END_SRC

#+RESULTS:
: 世界，你好！

**** 2-2 多条简单消息

#+BEGIN_SRC python :session :results output
  message = "世界，你好！"
  print(message)

  message = "Python，你好！"
  print(message)
#+END_SRC

#+RESULTS:
: 世界，你好！
: Python，你好！

*** 2.3 字符串

**** 方法

「方法」或 Method 指：

#+begin_quote
方法title()出现在这个变量的后面。方法是Python可对数据执行的操作
#+end_quote

比如，title() 是 name 的方法

#+BEGIN_SRC python :session :results output
name = "xu chunyang"
print(name.title())
#+END_SRC

#+RESULTS:
: Xu Chunyang

#+BEGIN_SRC python :session :results output
  my_name = "Xu Chunyang"
  print(my_name.upper())
  print(my_name.lower())
#+END_SRC

#+RESULTS:
: XU CHUNYANG
: xu chunyang

**** 合并、拼接字符串

用 + 拼接多个字符串

#+BEGIN_SRC python :session :results output
  first_name = "chunyang"
  last_name = "xu"
  full_name = first_name + " " + last_name

  print(full_name)
#+END_SRC

#+RESULTS:
: Chunyang Xu

举例

#+BEGIN_SRC python :session :results output
  first_name = "chunyang"
  last_name = "xu"
  full_name = first_name + " " + last_name

  print("Hello, " + full_name.title() + "!")
#+END_SRC

#+RESULTS:
: Hello, Chunyang Xu!

再简化

#+BEGIN_SRC python :session :results output
  first_name = "chunyang"
  last_name = "xu"
  full_name = first_name + " " + last_name

  message = "Hello, " + full_name.title() + "!"
  print(message)
#+END_SRC

#+RESULTS:
: Hello, Chunyang Xu!

**** 用空格、制表符和换行添加空白

「空白」不仅仅指空格，而表示的包括 space、tab 和 newline 在内的一类字符。

#+begin_quote
在编程中，空白泛指任何非打印字符，如空格、制表符和换行符
#+end_quote

#+BEGIN_SRC python :session :results output
print("Python")
print("\tPython")
print("Language:\nPython\nC\nJava\nJavaScript")
#+END_SRC

#+RESULTS:
: Python
: 	Python
: Language:
: Python
: C
: Java
: JavaScript

#+BEGIN_SRC python :session :results output
print("Language:\n\tPython\n\tC\n\tJava\n\tJavaScript")
#+END_SRC

#+RESULTS:
: Language:
: 	Python
: 	C
: 	Java
: 	JavaScript

**** 删除空白

空白字符（Whitespace）具体指哪些字符？

[[https://en.wikipedia.org/wiki/Whitespace_character][Whitespace character - Wikipedia]]

#+BEGIN_SRC python :session :results value pp
  favorite_language = "python "
  favorite_language
#+END_SRC

#+RESULTS:
: 'python '

#+BEGIN_SRC python :session :results value pp
  favorite_language.rstrip()
#+END_SRC

#+RESULTS:
: 'python'

#+BEGIN_SRC python :session :results value pp
favorite_language
#+END_SRC

#+RESULTS:
: 'python '

~rstrip()~ 不会就地修改变量，而是返回一个新值

#+BEGIN_SRC python :session :results value pp
  favorite_language = "python "
  favorite_language = favorite_language.rstrip()
  favorite_language
#+END_SRC

#+RESULTS:
: 'python'

lstrip strip rstrip

#+BEGIN_SRC python :session :results value pp
  favorite_language = " python "
  favorite_language.rstrip(), \
      favorite_language.lstrip(), \
      favorite_language.strip()
#+END_SRC

#+RESULTS:
: (' python', 'python ', 'python')

避免 String 引号不匹配的语法错误

#+BEGIN_SRC python :session :results output
message = "one of Python's strengths is its diverse community."
print(message)
#+END_SRC

#+RESULTS:
: one of Python's strengths is its diverse community.

错误写法

#+BEGIN_SRC python :session :results value pp
message = 'one of Python's strengths is its diverse community.'
print(message)
#+END_SRC

*** Exercises

**** 2-3 个性化消息

#+BEGIN_SRC python :session :results output :tangle ask_name.py
name = "Eric"
message = "Hello " + name + ", would you like to learn some Python today?"

print(message)
#+END_SRC

#+RESULTS:
: Hello Eric, would you like to learn some Python today?

**** 2-4 调整名字的大小写

#+BEGIN_SRC python :session :results output :tangle name_cases.py
  name = "Jerry"
  print(name.lower())
  print(name.upper())
  print(name.capitalize())
#+END_SRC

#+RESULTS:
: jerry
: JERRY
: Jerry

**** 2-5 名言

#+BEGIN_SRC python :session :results output :tangle quote.py
print('鲁迅曾经说过, "躲进小楼成一统，管他冬夏与春秋。"')
#+END_SRC

#+RESULTS:
: 鲁迅曾经说过, "躲进小楼成一统，管他冬夏与春秋。"

**** 2-6 名言2

#+BEGIN_SRC python :session :results output :tangle quote2.py
name = "鲁迅"
quote = "躲进小楼成一统，管他冬夏与春秋。"

message = name + '曾经说过, "' + quote + '"'
print(message)
#+END_SRC

#+RESULTS:
: 鲁迅曾经说过, "躲进小楼成一统，管他冬夏与春秋。"

**** 2-7 剔除人名中的空白

#+BEGIN_SRC python :session :results output :tangle name_strip.py
name = "\t\nXu Chunyang\n"
print(name)
print(name.lstrip())
print(name.rstrip())
print(name.strip())
#+END_SRC

#+RESULTS:
: Xu Chunyang

*** 数字

+ - * / ** (次方)

#+BEGIN_SRC python :session :results value pp
1+2, 3 - 1, 2 * 3, 1/2, 2**10
#+END_SRC

#+RESULTS:
: (3, 2, 6, 0.5, 1024)

带小数的数字称为「浮点数」

浮点数运算结果不确定

#+BEGIN_SRC python :session :results value pp
0.2 + 0.1, 3 * 0.1
#+END_SRC

#+RESULTS:
: (0.30000000000000004, 0.30000000000000004)

用 ~str()~ 把数字转换成字符串

#+BEGIN_SRC python :session :results output
age = 23
message = "Happy " + str(age) + "rd Birthday!"

print(message)
#+END_SRC

#+RESULTS:
: Happy 23rd Birthday!

*** Exercises

**** 2-8 数字8

#+BEGIN_SRC python :session :results output
print(5 + 3)
print(10 - 2)
print(2 * 4)
print(16 / 2)
#+END_SRC

#+RESULTS:
: 8
: 8
: 8
: 8.0

**** 2-19 最喜欢的数字

#+BEGIN_SRC python :session :results output
  favorite_number = 0
  message = "My favorite number is " + str(favorite_number)

  print(message)
#+END_SRC

#+RESULTS:
: My favorite number is 0

*** 注释

#+BEGIN_SRC python :session :results output
  # 向大家问好
  print("Hello Python people!")
#+END_SRC

#+RESULTS:
: Hello Python people!

**** Exercises

***** 2-10 添加注释

一

#+BEGIN_SRC python :session :results output
  # Author: xuchunyang
  # Date: 2018-04-16

  # Print "Hello World!"
  print("Hello World!")
#+END_SRC

#+RESULTS:
: Hello World!

二

#+BEGIN_SRC python :session :results output
  # Authro: xuchunyang
  # Date: 2018-04-16
  # 打印一条消息

  message = "one of Python's strengths is its diverse community."
  print(message)
#+END_SRC

#+RESULTS:
: one of Python's strengths is its diverse community.


***** 2-11 Python 之禅

#+BEGIN_SRC python :session :results output
import this
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
#+END_EXAMPLE

** Chapter 3

列表的写法

#+BEGIN_SRC python :session :results output
bicycles = ['trek', 'cannondale', 'redline', 'specialized']
print(bicycles)
#+END_SRC

#+RESULTS:
: ['trek', 'cannondale', 'redline', 'specialized']

访问列表元素

#+BEGIN_SRC python :session :results output
print(bicycles[0])
print(bicycles[0].title())
#+END_SRC

#+RESULTS:
: trek
: Trek

列表的索引从 0 算起

#+BEGIN_SRC python :session :results output
bicycles = ['trek', 'cannondale', 'redline', 'specialized']
print(bicycles[0])
print(bicycles[1])
print(bicycles[2])
print(bicycles[3])
#+END_SRC

#+RESULTS:
: trek
: cannondale
: redline
: specialized

从后向前索引

#+BEGIN_SRC python :session :results value pp
bicycles[-1], bicycles[-2], bicycles[-3], bicycles[-4]
#+END_SRC

#+RESULTS:
: ('specialized', 'redline', 'cannondale', 'trek')

*** Exercises

**** 3-1 姓名

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Charlie"]
  print(names[0])
  print(names[1])
  print(names[2])
  print(names[3])
#+END_SRC

#+RESULTS:
: Tom
: Jerry
: Snoopy
: Charlie

**** 3-2 问候语

#+BEGIN_SRC python :session :results output
names = ["Tom", "Jerry", "Snoopy", "Charlie"]
print("Hello, " + names[0] + "!")
print("Hello, " + names[1] + "!")
print("Hello, " + names[2] + "!")
print("Hello, " + names[3] + "!")
#+END_SRC

#+RESULTS:
: Hello, Tom!
: Hello, Jerry!
: Hello, Snoopy!
: Hello, Charlie!

**** 3-3 自己的列表

#+BEGIN_SRC python :session :results output
  commuting_methods = ["walk", "swim", "bike", "bus", "subway", "fly"]

  print("I would like to " + commuting_methods[0] + " to work.")
  print("I would like to learn " + commuting_methods[1] + "ing.")
  print("I also would like to go to walk by " + commuting_methods[-2] + ", because I like subway.")
  print("I don't like to take a " + commuting_methods[3] + ", because I don't know when to get out")
#+END_SRC

#+RESULTS:
: I would like to walk to work.
: I would like to learn swiming.
: I also would like to go to walk by subway, because I like subway.
: I don't like to take a bus, because I don't know when to get out

*** 修改、添加和删除元素

用 append() 添加一个元素到末尾

#+BEGIN_SRC python :session :results output
  motorcycles = ['honda', 'yamaha', 'suzuki']
  print(motorcycles)

  motorcycles.append('ducati')
  print(motorcycles)
#+END_SRC

#+RESULTS:
: ['honda', 'yamaha', 'suzuki']
: ['honda', 'yamaha', 'suzuki', 'ducati']

#+BEGIN_SRC python :session :results output
  motorcycles = []

  motorcycles.append('honda')
  motorcycles.append('yamaha')
  motorcycles.append('suzuki')

  print(motorcycles)
#+END_SRC

#+RESULTS:
: ['honda', 'yamaha', 'suzuki']

用 insert() 在任意位置加入新元素

#+BEGIN_SRC python :session :results output
  motorcycles = ['本田', '雅马哈', '铃木']

  motorcycles.insert(0, '杜卡迪')
  print(motorcycles)
#+END_SRC

#+RESULTS:
: ['杜卡迪', '本田', '雅马哈', '铃木']

用 del 根据位置（索引）删除元素

#+BEGIN_SRC python :session :results output
  motorcycles = ['本田', '雅马哈', '铃木']
  print(motorcycles)

  del motorcycles[0]
  print(motorcycles)
#+END_SRC

#+RESULTS:
: ['本田', '雅马哈', '铃木']
: ['雅马哈', '铃木']

用 pop() 方法删除最后一个元素，并且返回这个元素的值

#+BEGIN_SRC python :session :results output
  motorcycles = ['本田', '雅马哈', '铃木']
  print(motorcycles)

  popped_motorcycle = motorcycles.pop()
  print(motorcycles)
  print(popped_motorcycle)
#+END_SRC

#+RESULTS:
: ['本田', '雅马哈', '铃木']
: ['本田', '雅马哈']
: 铃木

pop() 方法能删除任意位置的元素

#+BEGIN_SRC python :session :results output
  motorcycles = ['本田', '雅马哈', '铃木']

  first_owned = motorcycles.pop(0)
  print("The first motorcycle I own was a " + first_owned.title() + ".")
#+END_SRC

#+RESULTS:
: The first motorcycle I own was a 本田.

del 语句 V.S. pop() 方法

#+begin_quote
如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del语句；
如果你要在删除元素后还能继续使用它，就使用方法pop()。
#+end_quote


用 remove() 根据值删除元素

#+BEGIN_SRC python :session :results output
  motorcycles = ['本田', '雅马哈', '铃木', '杜卡迪']
  print(motorcycles)

  motorcycles.remove('杜卡迪')
  print(motorcycles)
#+END_SRC

#+RESULTS:
: ['本田', '雅马哈', '铃木', '杜卡迪']
: ['本田', '雅马哈', '铃木']

#+begin_quote
注意　方法remove()只删除第一个指定的值。如果要删除的值可能在列表中出现
多次，就需要使用循环来判断是否删除了所有这样的值。
#+end_quote

*** Exercises

**** 3-4 嘉宾名单

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Racket"]
  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")
#+END_SRC

#+RESULTS:
: Tom, would you like to have dinner with me?
: Jerry, would you like to have dinner with me?
: Snoopy, would you like to have dinner with me?
: Racket, would you like to have dinner with me?

**** 3-5 修改嘉宾名单

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Racket"]
  print(names[0] + ", would you like to have dinner with me?")
  print(names[1] + ", would you like to have dinner with me?")
  print(names[2] + ", would you like to have dinner with me?")
  print(names[3] + ", would you like to have dinner with me?")

  nope = "Snoopy"
  names.remove(nope)
  names.append("Gammy")
  print(names[0] + ", would you like to have dinner with me?")
  print(names[1] + ", would you like to have dinner with me?")
  print(names[2] + ", would you like to have dinner with me?")
  print(names[3] + ", would you like to have dinner with me?")

  print(nope + " said he don't have time thus can't accept my invitation.")
#+END_SRC

#+RESULTS:
: Tom, would you like to have dinner with me?
: Jerry, would you like to have dinner with me?
: Snoopy, would you like to have dinner with me?
: Racket, would you like to have dinner with me?
: Tom, would you like to have dinner with me?
: Jerry, would you like to have dinner with me?
: Racket, would you like to have dinner with me?
: Gammy, would you like to have dinner with me?
: Snoopy said he don't have time thus can't accept my invitation.

**** 3-6 添加嘉宾

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Racket"]
  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")

  print()
  print("I have found a bigger dinner table for more people")
  print()
  names.insert(0, "Lisa")
  names.insert(3, "Homer")
  names.append("Bart")

  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")
  print(names[4].title() + ", would you like to have dinner with me?")
  print(names[5].title() + ", would you like to have dinner with me?")
  print(names[6].title() + ", would you like to have dinner with me?")
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Tom, would you like to have dinner with me?
Jerry, would you like to have dinner with me?
Snoopy, would you like to have dinner with me?
Racket, would you like to have dinner with me?

I have found a bigger dinner table for more people

Lisa, would you like to have dinner with me?
Tom, would you like to have dinner with me?
Jerry, would you like to have dinner with me?
Homer, would you like to have dinner with me?
Snoopy, would you like to have dinner with me?
Racket, would you like to have dinner with me?
Bart, would you like to have dinner with me?
#+END_EXAMPLE

**** 3-7 缩减名单

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Racket"]
  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")

  print()
  print("I have found a bigger dinner table for more people")
  print()
  names.insert(0, "Lisa")
  names.insert(3, "Homer")
  names.append("Bart")

  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")
  print(names[4].title() + ", would you like to have dinner with me?")
  print(names[5].title() + ", would you like to have dinner with me?")
  print(names[6].title() + ", would you like to have dinner with me?")

  print()
  print("Oops, I can invite just two")
  print()

  print(names.pop() + ", I am sorry")
  print(names.pop() + ", I am sorry")
  print(names.pop() + ", I am sorry")
  print(names.pop() + ", I am sorry")
  print(names.pop() + ", I am sorry")

  print(names[0] + ", you are still invited.")
  print(names[1] + ", you are still invited.")

  del names[0]
  del names[0]
  print(names)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Tom, would you like to have dinner with me?
Jerry, would you like to have dinner with me?
Snoopy, would you like to have dinner with me?
Racket, would you like to have dinner with me?

I have found a bigger dinner table for more people

Lisa, would you like to have dinner with me?
Tom, would you like to have dinner with me?
Jerry, would you like to have dinner with me?
Homer, would you like to have dinner with me?
Snoopy, would you like to have dinner with me?
Racket, would you like to have dinner with me?
Bart, would you like to have dinner with me?

Oops, I can invite just two

Bart, I am sorry
Racket, I am sorry
Snoopy, I am sorry
Homer, I am sorry
Jerry, I am sorry
Lisa, you are still invited.
Tom, you are still invited.
[]
#+END_EXAMPLE

*** 组织列表

用 sort() 就地排序

#+BEGIN_SRC python :session :results value pp
  cars = ['bwm', 'audi', 'toyota', 'subaru']
  cars.sort()
  cars
#+END_SRC

#+RESULTS:
: ['audi', 'bwm', 'subaru', 'toyota']


#+BEGIN_SRC python :session :results value pp
  cars = ['bwm', 'audi', 'toyota', 'subaru']
  cars.sort(reverse=True)
  cars
#+END_SRC

#+RESULTS:
: ['toyota', 'subaru', 'bwm', 'audi']

用函数 sorted() 临时排序

#+BEGIN_SRC python :session :results output
  cars = ['bmw', 'audi', 'toyota', 'subaru']

  print("Here is the original list")
  print(cars)

  print("\nHere is the sorted list")
  print(sorted(cars))

  print("\nHere is the original list again")
  print(cars)
#+END_SRC

#+RESULTS:
: Here is the original list
: ['bmw', 'audi', 'toyota', 'subaru']
: 
: Here is the sorted list
: ['audi', 'bmw', 'subaru', 'toyota']
: 
: Here is the original list again
: ['bmw', 'audi', 'toyota', 'subaru']

用方法 reverse() 就绪的倒序排列

#+BEGIN_SRC python :session :results output
  cars = ['bmw', 'audi', 'toyota', 'subaru']
  print(cars)

  cars.reverse()
  print(cars)
#+END_SRC

#+RESULTS:
: ['bmw', 'audi', 'toyota', 'subaru']
: ['subaru', 'toyota', 'audi', 'bmw']

用函数 len() 获得列表的长度

#+BEGIN_SRC python :session :results value pp
  cars = ['bwm', 'audi', 'toyota', 'subaru']
  len(cars)
#+END_SRC

#+RESULTS:
: 4

**** Exercises

***** 3-8 放眼世界

#+BEGIN_SRC python :session :results output
places = ['Tokyo', 'Busan', 'Xiamen', 'Beijing', 'Praha', 'İstanbul']
print(places)

print(sorted(places))
print(places)

print(sorted(places, reverse=True))
print(places)

places.reverse()
print(places)
places.reverse()
print(places)

places.sort()
print(places)

places.sort(reverse=True)
print(places)
#+END_SRC

#+RESULTS:
: ['Tokyo', 'Busan', 'Xiamen', 'Beijing', 'Praha', 'İstanbul']
: ['Beijing', 'Busan', 'Praha', 'Tokyo', 'Xiamen', 'İstanbul']
: ['Tokyo', 'Busan', 'Xiamen', 'Beijing', 'Praha', 'İstanbul']
: ['İstanbul', 'Xiamen', 'Tokyo', 'Praha', 'Busan', 'Beijing']
: ['Tokyo', 'Busan', 'Xiamen', 'Beijing', 'Praha', 'İstanbul']
: ['İstanbul', 'Praha', 'Beijing', 'Xiamen', 'Busan', 'Tokyo']
: ['Tokyo', 'Busan', 'Xiamen', 'Beijing', 'Praha', 'İstanbul']
: ['Beijing', 'Busan', 'Praha', 'Tokyo', 'Xiamen', 'İstanbul']
: ['İstanbul', 'Xiamen', 'Tokyo', 'Praha', 'Busan', 'Beijing']

***** 3-9 晚餐嘉宾

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Racket"]
  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")

  print("I have invitated " + str(len(names)) + " guests.")
#+END_SRC

#+RESULTS:
: Tom, would you like to have dinner with me?
: Jerry, would you like to have dinner with me?
: Snoopy, would you like to have dinner with me?
: Racket, would you like to have dinner with me?
: I have invitated 4 guests.

***** 3-10 尝试使用各个函数

- 方法 append(elt)
- 方法 insert(idx, elt)
- 语句 del lst[idx]
- 方法 pop(idx)
- 方法 remove(elt)
- 方法 sort()
- 函数 sorted()
- 方法 reverse()
- 函数 len()

#+BEGIN_SRC python :session :results output
  characters = []

  characters.append("Tom")
  characters.append("Jerry")
  characters.append("Lisa")
  characters.append("Racket")
  characters.append("Snoopy")
  # http://kungfupanda.wikia.com/wiki/Fung
  characters.append("Fung")

  print(characters)

  first = characters[0]
  del characters[0]
  print(characters)
  characters.insert(0, first)
  print(characters)
  
  last = characters.pop()
  print(characters)
  characters.append(last)
  print(characters)

  fung = "Fung"
  characters.remove(fung)
  print(characters)
  characters.append(fung)
  print(characters)

  print(sorted(characters))
  print(characters)

  characters.sort()
  print(characters)
  characters.reverse()
  print(characters)

  print("I have " + str(len(characters)) + " favorite characters.")
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Fung', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Tom']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Fung', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Tom']
['Tom', 'Snoopy', 'Racket', 'Lisa', 'Jerry', 'Fung']
I have 6 favorite characters.
#+END_EXAMPLE

****** Exercises

******* 3-11 有意引发错误

索引超出范围时 Python 会报错

#+BEGIN_SRC python :session :results value pp
empty_list = []
print(empty_list[0])

names = ["Tom"]
print(names[1])
#+END_SRC

** Chapter 4

遍历列表

#+BEGIN_SRC python :session :results output
  magicians = ["alice", "david", "carolina"]
  for magician in magicians:
      print(magician)
#+END_SRC

#+RESULTS:
: alice
: david
: carolina

复杂一点的操作

#+BEGIN_SRC python :session :results output
  magicians = ["alice", "david", "carolina"]
  for magician in magicians:
      print(magician.title() + ", that was a great trick!")
#+END_SRC

#+RESULTS:
: Alice, that was a great trick!
: David, that was a great trick!
: Carolina, that was a great trick!

更复杂一点

#+BEGIN_SRC python :session :results output
  magicians = ['alice', 'david', 'carolina']
  for magician in magicians:
      print(magician.title() + ", that was a great trick!")
      print("I can't wait to see your next trick, " + magician.title() + ".\n")
#+END_SRC

#+RESULTS:
: Alice, that was a great trick!
: I can't wait to see your next trick, Alice.
: 
: David, that was a great trick!
: I can't wait to see your next trick, David.
: 
: Carolina, that was a great trick!
: I can't wait to see your next trick, Carolina.

结束语

#+begin_src python :session :results output
  magicians = ['alice', 'david', 'carolina']
  for magician in magicians:
      print(magician.title() + ", that was a great trick!")
      print("I can't wait to see your next trick, " + magician.title() + ".\n")

  print("Thank you, everyone. That was a great magic show!")
#+end_src

#+RESULTS:
#+BEGIN_EXAMPLE
Alice, that was a great trick!
I can't wait to see your next trick, Alice.

David, that was a great trick!
I can't wait to see your next trick, David.

Carolina, that was a great trick!
I can't wait to see your next trick, Carolina.

Thank you, everyone. That was a great magic show!
#+END_EXAMPLE

*** 缩进

- 缺少缩进
- 不必的缩进
- 忘记 for 后面的冒号

#+BEGIN_SRC python :session :results value pp :tangle missing_colon.py
magicians = ['alice', 'dvaid', 'carolina']
for magician in magicians
   print(magician)
#+END_SRC

*** Exercises

**** 4-1 比萨

#+BEGIN_SRC python :session :results output
  pizzas = ['土豆', '水果', '芝士']

  for pizza in pizzas:
      print(pizza)

  for pizza in pizzas:
      print("I like " + pizza + " pizza")

  print("I don't know if I like pizza.")
#+END_SRC

#+RESULTS:
: 土豆
: 水果
: 芝士
: I like 土豆 pizza
: I like 水果 pizza
: I like 芝士 pizza
: I don't know if I like pizza.

**** 4-1 动物

#+BEGIN_SRC python :session :results output
  cats = ['cat', 'tiger', 'lion']

  for cat in cats:
      print(cat)

  for cat in cats:
      print(cat + " is very dangerous!")

  print("Any of these animals is very dangerous.")
#+END_SRC

#+RESULTS:
: cat
: tiger
: lion
: cat is very dangerous!
: tiger is very dangerous!
: lion is very dangerous!
: Any of these animals is very dangerous

*** 数值列表

#+BEGIN_SRC python :session :results output
  for value in range(1,5):
      print(value)
#+END_SRC

#+RESULTS:
: 1
: 2
: 3
: 4

用函数 list() 和函数 range() 生成数值列表

#+BEGIN_SRC python :session :results value pp
list(range(1,6))
#+END_SRC

#+RESULTS:
: [1, 2, 3, 4, 5]

为 range() 指定步长

#+BEGIN_SRC python :session :results value pp
even_numbers = list(range(2, 11, 2))
even_numbers
#+END_SRC

#+RESULTS:
: [2, 4, 6, 8, 10]

1 到 10 的平方

#+BEGIN_SRC python :session :results output
  squares = []
  for value in range(1,11):
      square = value**2
      squares.append(square)
  print(squares)
#+END_SRC

#+RESULTS:
: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

函数 min() max() 和 sum()

#+BEGIN_SRC python :session :results value pp
digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
min(digits), max(digits), sum(digits)
#+END_SRC

#+RESULTS:
: (0, 9, 45)

列表解析

#+BEGIN_SRC python :session :results output
  squares = [value**2 for value in range(1, 11)]
  print(squares)
#+END_SRC

#+RESULTS:
: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

*** Exercises

**** 4-3 数到 20

#+BEGIN_SRC python :session :results output
  for value in range(1, 21):
      print(value)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
#+END_EXAMPLE

**** 4-4 一百万

#+BEGIN_SRC python :session :results value pp
for value in range(1,1_000_000+1): print(value)
#+END_SRC

**** 4-5 计算一到一百万的和

#+BEGIN_SRC python :session :results output
  numbers = list(range(1, 1_000_000+1))
  print(sum(numbers))
  print(min(numbers))
  print(max(numbers))
#+END_SRC

#+RESULTS:
: 500000500000
: 1
: 1000000

**** 4-6 奇数

#+BEGIN_SRC python :session :results output
  odd_numbers = list(range(1, 21, 2))
  for value in odd_numbers: print(value)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1
3
5
7
9
11
13
15
17
19
#+END_EXAMPLE

**** 4-7 3 的倍数

#+BEGIN_SRC python :session :results output
  three_times_numbers = list(range(3,31,3))
  for value in three_times_numbers:
      print(value)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
3
6
9
12
15
18
21
24
27
30
#+END_EXAMPLE

**** 4-8 立方

#+BEGIN_SRC python :session :results output
  cubes = []

  for value in range(1,11):
      cubes.append(value**3)

  for value in cubes: 
      print(value)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1
8
27
64
125
216
343
512
729
1000
#+END_EXAMPLE

**** 4-9 立方解析

#+BEGIN_SRC python :session :results output
  cubes = [value**3 for value in range(1,11)]
  for value in cubes: 
      print(value)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1
8
27
64
125
216
343
512
729
1000
#+END_EXAMPLE

*** 使用列表的一部分

处理列表的一部分元素即「切片」

#+BEGIN_SRC python :session :results output
  players = ['charles', 'martina', 'michale', 'florence', 'eli']
  print(players[0:3])
#+END_SRC

#+RESULTS:
: ['charles', 'martina', 'michale']

#+BEGIN_SRC python :session :results output
players = ['charles', 'martina', 'michale', 'florence', 'eli']
print(players[1:4])
#+END_SRC

#+RESULTS:
: ['martina', 'michale', 'florence']

#+BEGIN_SRC python :session :results output
players = ['charles', 'martina', 'michele', 'florence', 'eli']
print(players[2:])
#+END_SRC

#+RESULTS:
: ['michele', 'florence', 'eli']

负数

#+BEGIN_SRC python :session :results output
players = ['charles', 'martina', 'michele', 'florence', 'eli']
print(players[-3:])
#+END_SRC

#+RESULTS:
: ['michele', 'florence', 'eli']

#+BEGIN_SRC python :session :results output
  players = ['charles', 'martina', 'michele', 'florence', 'eli']

  print("Here are the first three players on my team:")
  for player in players[:3]:
      print(player.title())
#+END_SRC

#+RESULTS:
: Here are the first three players on my team:
: Charles
: Martina
: Michele


*** 复制列表

用 [:] 复制一个列表

#+BEGIN_SRC python :session :results output
  my_foods = ['pizza', 'falafal', 'carrot cake']
  friend_foods = my_foods[:]

  print("My favorite foods are:")
  print(my_foods)

  print("\nMy friend's favorite foods are:")
  print(friend_foods)
#+END_SRC

#+RESULTS:
: My favorite foods are:
: ['pizza', 'falafal', 'carrot cake']
: 
: My friend's favorite foods are:
: ['pizza', 'falafal', 'carrot cake']

#+BEGIN_SRC python :session :results output
  my_foods = ['pizza', 'falafal', 'carrot cake']
  friend_foods = my_foods[:]

  my_foods.append('apple')
  friend_foods.append('pear')

  print("My favorite foods are:")
  print(my_foods)

  print("\nMy friend's favorite foods are:")
  print(friend_foods)
#+END_SRC

#+RESULTS:
: My favorite foods are:
: ['pizza', 'falafal', 'carrot cake', 'apple']
: 
: My friend's favorite foods are:
: ['pizza', 'falafal', 'carrot cake', 'pear']

*** Exercises

**** 4-10 切片

#+BEGIN_SRC python :session :results output
  even_numbers = list(range(2, 11, 2))
  print(even_numbers)
  print("The first three items in the list are:")
  print(even_numbers[:3])
  print("The items from the midle of the list are:")
  print(even_numbers[1:4])
  print("The last three items in the list are:")
  print(even_numbers[-3:])
#+END_SRC

#+RESULTS:
: [2, 4, 6, 8, 10]
: The first three items in the list are:
: [2, 4, 6]
: The items from the midle of the list are:
: [4, 6, 8]
: The last three items in the list are:
: [6, 8, 10]

**** 4-11 你的批萨和我的批萨

#+BEGIN_SRC python :session :results output
  pizzas = ['土豆', '水果', '芝士']
  friend_pissas = pizzas[:]

  pizzas.append('夏威夷')
  friend_pissas.append('蛋黄虾仁')

  print('My favorite pizzas are:')
  print(pizzas)
  for pizza in pizzas: print(pizza)

  print()

  print("My friend's favorite pizzas are:")
  print(friend_pissas)
  for pizza in friend_pissas: print(pizza)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
My favorite pizzas are:
['土豆', '水果', '芝士', '夏威夷']
土豆
水果
芝士
夏威夷

My friend's favorite pizzas are:
['土豆', '水果', '芝士', '蛋黄虾仁']
土豆
水果
芝士
蛋黄虾仁
#+END_EXAMPLE

**** 4-12 使用多个循环

#+BEGIN_SRC python :session :results output
  my_foods = ['pizza', 'falafal', 'carrot cake']
  friend_foods = my_foods[:]

  print("My favorite foods are:")
  for food in my_foods: print(food)

  print("\nMy friend's favorite foods are:")
  for food in friend_foods: print(food)
#+END_SRC

#+RESULTS:
: My favorite foods are:
: pizza
: falafal
: carrot cake
: 
: My friend's favorite foods are:
: pizza
: falafal
: carrot cake

*** 元组

#+begin_quote
Python将不能修改的值称为不可变的，而不可变的列表被称为元组。
#+end_quote

定义一个元组，并且访问其中的元素

#+BEGIN_SRC python :session :results output
  dimensions = (200, 50)
  print(dimensions[0])
  print(dimensions[1])
#+END_SRC

#+RESULTS:
: 200
: 50

遍历一个元组

#+BEGIN_SRC python :session :results output
  dimensions = (200, 50)
  for dimension in dimensions:
      print(dimension)
#+END_SRC

#+RESULTS:
: 200
: 50

*** Exercises

**** 4-13 自助餐

#+BEGIN_SRC python :session :results output
  foods = ('土豆丝', '凉拌黄瓜', '米饭', '海带汤', '还有一样不知名的菜')
  # foods[0] = '宫保鸡丁'

  foods = ('土豆丝', '豆腐', '米饭', '海带汤', '蒸鸡蛋')
  for food in foods:
      print(food)
#+END_SRC

#+RESULTS:
: 土豆丝
: 豆腐
: 米饭
: 海带汤
: 蒸鸡蛋

*** 代码格式

#+begin_quote
若要提出Python语言修改建议，需要编写Python改进提案（Python Enhancement
Proposal，PEP）
#+end_quote

#+begin_quote
PEP 8是最古老的PEP之一，它向Python程序员提供了代码格式设置指南。PEP 8
的篇幅很长，但大都与复杂的编码结构相关。
#+end_quote

1. 缩进，4 个宽度的空格
2. 行长，最多 79 个字符宽度
3. 空行，需要用，但不能滥用（注意 Python 只关心缩进，不关空行

*** Exercises

**** 4-14 PEP 8

[[https://www.python.org/dev/peps/pep-0008/][PEP 8 -- Style Guide for Python Code | Python.org]]

** Chapter 5

if

#+BEGIN_SRC python :session :results output
  cars = ['audi', 'bmw', 'subaru', 'toyota']

  for car in cars:
      if car == 'bmw':
          print(car.upper())
      else:
          print(car.title())
#+END_SRC

#+RESULTS:
: Audi
: BMW
: Subaru
: Toyota

== 是否相等

#+begin_src python :session :results value pp
car = 'bwm'
car == 'bwm'
#+end_src

#+RESULTS:
: True

#+BEGIN_SRC python :session :results value pp
  car = 'Audi'
  car.lower() == 'audi', car
#+END_SRC

#+RESULTS:
: (True, 'Audi')

!= 是否不相等

#+BEGIN_SRC python :session :results output
  requested_topping = 'mushrooms'

  if requested_topping != 'anchovies':
      print("Hold the anchovies!")
#+END_SRC

#+RESULTS:
: Hold the anchovies!

比较数字

#+BEGIN_SRC python :session :results value pp
age = 19
age == 19
#+END_SRC

#+RESULTS:
: True

#+BEGIN_SRC python :session :results value pp
age = 19
age < 21, age <= 21, age > 21, age >= 21
#+END_SRC

#+RESULTS:
: (True, True, False, False)

and 检查多个条件

#+BEGIN_SRC python :session :results value pp
  age_0 = 22
  age_1 = 18

  age_0 >= 21 and age_1 >= 21
#+END_SRC

#+RESULTS:
: False

or

#+BEGIN_SRC python :session :results value pp
  age_0 = 22
  age_1 = 18

  age_0 >= 21 or age_1 >= 21
#+END_SRC

#+RESULTS:
: True

in

#+BEGIN_SRC python :session :results value pp
  requested_toppings = ['mushrooms', 'onions', 'pineapple']

  'mushrooms' in requested_toppings, 'pepperoni' in requested_toppings
#+END_SRC

#+RESULTS:
: (True, False)

not in

#+BEGIN_SRC python :session :results output
  banned_users = ['andrew', 'carolina', 'david']
  user = 'marie'

  if user not in banned_users:
      print(user.title() + ", you can post a response if you wish.")
#+END_SRC

#+RESULTS:
: Marie, you can post a response if you wish.

Boolean

#+BEGIN_SRC python :session :results value pp
game_active = True
can_edit = False
#+END_SRC

*** Exercises

**** 5-1 条件测试

#+BEGIN_SRC python :session :results output
  car = 'subaru'
  print("Is car == 'subaru'? I predicate True.")
  print(car == 'subaru')

  print("\nIs car == 'audi'? I predicate False.")
  print(car == 'audi')

  number = 4
  print("\nIs number == 4? I predicate True.")
  print(number == 4)

  print("\nIs number == 4.0? I predicate True")
  print(number == 4.0)

  print("\nIs number == '4'? I predicate False")
  print(number == "4")

  print("\nIs number > 4? I predicate False")
  print(number > 4)

  print("\nIs number < 4? I predicate False")
  print(number < 4)

  even_numbers = list(range(2,11, 2))
  print(even_numbers)
  odd_numbers = list(range(1,11, 2))
  print(odd_numbers)

  print("\nIs number in even_numbers? I predicate True")
  print(number in even_numbers)

  print("\nIs number in odd_numbers? I predicate False")
  print(number in odd_numbers)

  print("\nIs number in odd_numbers and number in even_numbers? I predicate False")
  print(number in odd_numbers and number in even_numbers)

  print("\nIs number == 4 and number not in odd_numbers? I predicate True")
  print(number == 4 and number not in odd_numbers)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Is car == 'subaru'? I predicate True.
True

Is car == 'audi'? I predicate False.
False

Is number == 4? I predicate True.
True

Is number == 4.0? I predicate True
True

Is number == '4'? I predicate False
False

Is number > 4? I predicate False
False

Is number < 4? I predicate False
False
[2, 4, 6, 8, 10]
[1, 3, 5, 7, 9]

Is number in even_numbers? I predicate True
True

Is number in odd_numbers? I predicate False
False

Is number in odd_numbers and number in even_numbers? I predicate False
False

Is number == 4 and number not in odd_numbers? I predicate True
True
#+END_EXAMPLE

**** 5-2 更多的条件测试

#+BEGIN_SRC python :session :results output
  car_0 = 'Audi'
  car_2 = 'bmw'

  print("Is car_0 == 'Audi'? I predicate True")
  print(car_0 == 'Audi')

  print("\nIs car_0 == 'audi'? I predicate False")
  print(car_0 == 'audi')

  print("\nIs car_0.lower() == 'audi'? I predicate True")
  print(car_0.lower() == 'audi')

  number_0 = 3
  number_1 = 5

  print("\nIs number_0 == 3? I predicate True")
  print(number_0 == 3)

  print("\nIs number_0 != 3? I predicate False")
  print(number_0 != 3)

  print("\nIs number_0 > 0? I predicate True")
  print(number_0 > 0)

  print("\nIs number_0 > 10? I predicate False")
  print(number_0 > 10)

  print("\nIs number_0 < 10? I predicate True")
  print(number_0 < 10)

  print("\nIs number_0 < 0? I predicate False")
  print(number_0 < 0)

  print("\nIs number_0 <= 3? I predicate True")
  print(number_0 <= 3)

  print("\nIs number_0 <= 0? I predicate False")
  print(number_0 <= 0)

  print("\nIs number_0 >= 3? I predicate True")
  print(number_0 >= 3)

  print("\nIs number_0 >= 4? I predicate False")
  print(number_0 >= 4)

  number_0 = 3
  number_1 = 5

  print("\nIs number_0 > 0 and number_1 > 0? I predicate True")
  print(number_0 > 0 and number_1 > 0)

  print("\nIs number_0 > 4 and number_1 > 4? I predicate False")
  print(number_0 > 4 and number_1 > 4)

  print("\nIs number_0 > 4 or number_1 > 4? I predicate True")
  print(number_0 > 4 or number_1 > 4)

  print("\nIs number_0 > 5 or number_1 > 5? I predicate False")
  print(number_0 > 5 or number_1 > 5)

  even_numbers = list(range(2,11,2))
  print(even_numbers)

  print("\nIs 3 in even_numbers? I predicate False")
  print(3 in even_numbers)

  print("\nIs 4 in even_numbers? I predicate True")
  print(4 in even_numbers)

  print("\nIs 3 not in even_numbers? I predicate True")
  print(3 not in even_numbers)

  print("\nIs 4 not in even_numbers? I predicate False")
  print(4 not in even_numbers)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Is car_0 == 'Audi'? I predicate True
True

Is car_0 == 'audi'? I predicate False
False

Is car_0.lower() == 'audi'? I predicate True
True

Is number_0 == 3? I predicate True
True

Is number_0 != 3? I predicate False
False

Is number_0 > 0? I predicate True
True

Is number_0 > 10? I predicate False
False

Is number_0 < 10? I predicate True
True

Is number_0 < 0? I predicate False
False

Is number_0 <= 3? I predicate True
True

Is number_0 <= 0? I predicate False
False

Is number_0 >= 3? I predicate True
True

Is number_0 >= 4? I predicate False
False

Is number_0 > 0 and number_1 > 0? I predicate True
True

Is number_0 > 4 and number_1 > 4? I predicate False
False

Is number_0 > 4 or number_1 > 4? I predicate True
True

Is number_0 > 5 or number_1 > 5? I predicate False
False
[2, 4, 6, 8, 10]

Is 3 in even_numbers? I predicate False
False

Is 4 in even_numbers? I predicate True
True

Is 3 not in even_numbers? I predicate True
True

Is 4 not in even_numbers? I predicate False
False
#+END_EXAMPLE

*** if

#+BEGIN_SRC python :session :results output
  age = 19
  if age >= 18:
      print("You are old enough to vote!")
#+END_SRC

#+RESULTS:
: You are old enough to vote!

#+begin_src python :session :results output
  age = 19
  if age >= 18:
      print("You are old enough to vote!")
      print("Have you registered to vote yet?")
#+end_src

#+RESULTS:
: You are old enough to vote!
: Have you registered to vote yet?

if-else

#+begin_src python :session :results output
  age = 17
  if age >= 18:
      print("You are old enough to vote!")
      print("Have you registered to vote yet?")
  else:
      print("Sorry, you are too young to vote.")
      print("Please register to vote as soon as you turn 18!")
#+end_src

#+RESULTS:
: Sorry, you are too young to vote.
: Please register to vote as soon as you turn 18!

if-elif-else

#+BEGIN_SRC python :session :results output
  age = 12

  if age < 4:
      print("Your admission cost is $0.")
  elif age < 18:
      print("Your admission cost is $5.")
  else:
      print("Your admission cost is $10.")
#+END_SRC

#+RESULTS:
: Your admission cost is $5.

更简洁

#+BEGIN_SRC python :session :results output
  age = 12

  if age < 4:
      price = 0
  elif age < 19:
      price = 5
  else:
      price = 10

  print("Your admission cost is $" + str(price) + ".")
#+END_SRC

#+RESULTS:
: Your admission cost is $5.

用 elif 替代最后的 else

#+BEGIN_SRC python :session :results output
  age = 12

  if age < 4:
      price = 0
  elif age < 18:
      price = 5
  elif age < 65:
      price = 10
  elif age >= 65:
      price = 5

  print("Your admission cost is $" + str(price) + ".")
#+END_SRC

#+RESULTS:
: Your admission cost is $5.

用并列的、独立的 if 测试多个条件

#+BEGIN_SRC python :session :results output
  requested_toppings = ['mushrooms', 'extra cheese']

  if 'mushrooms' in requested_toppings:
      print("Adding mushrooms")

  if 'pepperoni' in requested_toppings:
      print("Adding pepperoni")

  if 'extra cheese' in requested_toppings:
      print("Add extra cheese")

  print("\nFinished making your pizza!")
#+END_SRC

#+RESULTS:
: Adding mushrooms
: Add extra cheese
: 
: Finished making your pizza!

*** Exercises

**** 5-3 外星人颜色 #1

#+BEGIN_SRC python :session :results output
  alien_color = 'green'

  if alien_color == 'green':
      print("You get 5 points")

  alien_color = 'red'

  if alien_color == 'green':
      print("You get 5 points")
#+END_SRC

#+RESULTS:
: You get 5 points

**** 5-4 外星人颜色 #2

#+BEGIN_SRC python :session :results output
  alien_color = 'green'

  if alien_color == 'green':
      print("You get 5 points")
  else:
      print("You get 10 points")

  alien_color = 'red'

  if alien_color == 'green':
      print("You get 5 points")
  else:
      print("You get 10 points")
#+END_SRC

#+RESULTS:
: You get 5 points
: You get 10 points

**** 5-5 外星人颜色 #3

#+BEGIN_SRC python :session :results output
  alien_color = 'green'

  if alien_color == 'green':
      print("You get 5 points")
  elif alien_color == 'yellow':
      print("You get 10 points")
  elif alien_color == 'red':
      print("you get 15 points")

  alien_color = 'yellow'

  if alien_color == 'green':
      print("You get 5 points")
  elif alien_color == 'yellow':
      print("You get 10 points")
  elif alien_color == 'red':
      print("you get 15 points")

  alien_color = 'red'

  if alien_color == 'green':
      print("You get 5 points")
  elif alien_color == 'yellow':
      print("You get 10 points")
  elif alien_color == 'red':
      print("you get 15 points")
    
#+END_SRC

#+RESULTS:
: You get 5 points
: You get 10 points
: you get 15 points

**** 5-6 人生的不同阶段

#+BEGIN_SRC python :session :results output
  age = 25

  if age < 2:
      print("婴儿")
  elif age < 4:
      print("蹒跚学步")
  elif age < 13:
      print("儿童")
  elif age < 20:
      print("青少年")
  elif age < 65:
      print("成年人")
  elif age >= 65:
      print("老年人")
#+END_SRC

#+RESULTS:
: 成年人

**** 5-7 喜欢的水果

#+BEGIN_SRC python :session :results output
  favorite_fruits = ['火龙果', '橙子', '樱桃']

  if '樱桃' in favorite_fruits:
      print("You really like 樱桃!")

  if '火龙果' in favorite_fruits:
      print("You really like 火龙果!")

  if '橙子' in favorite_fruits:
      print("You really like 橙子!")
#+END_SRC

#+RESULTS:
: You really like 樱桃!
: You really like 火龙果!
: You really like 橙子!

*** if 和 list

#+BEGIN_SRC python :session :results output
  requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']

  for requested_topping in requested_toppings:
      if requested_topping == 'green peppers':
          print("Sorry, we are out of green peppers right now.")
      else:
          print("Adding " + requested_topping + ".")

  print("\nFinished making your pizza!")
#+END_SRC

#+RESULTS:
: Adding mushrooms.
: Sorry, we are out of green peppers right now.
: Adding extra cheese.
: 
: Finished making your pizza!

确认列表是否为空

#+BEGIN_SRC python :session :results output
  requested_toppings = []

  if requested_toppings:
      for requested_topping in requested_toppings:
          print("Adding " + requested_topping + ".")
      print("\nFinished making your pizza!")
  else:
      print("Are you sure you want a plain pizza?")
#+END_SRC

#+RESULTS:
: Are you sure you want a plain pizza?

使用多个列表

#+BEGIN_SRC python :session :results output
  available_toppings = ['mushrooms', 'clives', 'green peppers',
                        'pepperoni', 'pineapple', 'extra cheese']
  requested_toppings = ['mushrooms', 'fresh fries', 'extra cheese']

  for requested_topping in requested_toppings:
      if requested_topping in available_toppings:
          print("Adding " + requested_topping + ".")
      else:
          print("Sorry, we don't have " + requested_topping + ".")

  print("\nFinished making your pizza!")
#+END_SRC

#+RESULTS:
: Adding mushrooms.
: Sorry, we don't have fresh fries.
: Adding extra cheese.
: 
: Finished making your pizza!

*** Exercises

**** 5-8 以特殊的方式跟管理员打招呼

#+BEGIN_SRC python :session :results output
  users = ['bob', 'admin', 'jerry', 'tom', 'kyle']

  for user in users:
      if user == 'admin':
          print("Hello admin, would you like to see a status report?")
      else:
          print("Hello " + user + ", thank you for logging in again.")
#+END_SRC

#+RESULTS:
: Hello bob, thank you for logging in again.
: Hello admin, would you like to see a status report?
: Hello jerry, thank you for logging in again.
: Hello tom, thank you for logging in again.
: Hello kyle, thank you for logging in again.

**** 5-9 处理没有用户的情形

#+BEGIN_SRC python :session :results output
  users = ['bob', 'admin', 'jerry', 'tom', 'kyle']

  del users[:]
  print(users)

  if users:
      for user in users:
          if user == 'admin':
              print("Hello admin, would you like to see a status report?")
          else:
              print("Hello " + user + ", thank you for logging in again.")
  else:
      print("We need to find some users!")
#+END_SRC

#+RESULTS:
: []
: We need to find some users!

**** 5-10 检查用户名

#+BEGIN_SRC python :session :results output
  current_users = ['alice', 'bob', 'carolina', 'david', 'eli']
  new_users = ['tom', 'jerry', 'Eli', 'gammy', 'bob']

  for user in new_users:
      if user.lower() in current_users:
          print(user + " have been taken, please pick another one")
      else:
          print(user + " is a good name")
#+END_SRC

#+RESULTS:
: tom is a good name
: jerry is a good name
: Eli have been taken, please pick another one
: gammy is a good name
: bob have been taken, please pick another one

**** 5-11 序数

#+BEGIN_SRC python :session :results output
  numbers = range(1,10)
  for number in numbers:
      if number == 1:
          print("1st")
      elif number == 2:
          print("2nd")
      elif number == 3:
          print("3rd")
      else:
          print(str(number) + "th")
#+END_SRC

#+RESULTS:
: 1st
: 2nd
: 3rd
: 4th
: 5th
: 6th
: 7th
: 8th
: 9th

*** Exercises

**** 5-12 设置 if 语句的格式

#+begin_quote
在诸如==、>=和<=等比较运算符两边各添加一个空格，例如，if age < 4:要比
if age<4:好。
#+end_quote

**** 5-13 自己的想法

- 贪吃蛇游戏
- 扫雷游戏
- 转换 Org Mode 成 HTML

** Chapter 6

#+BEGIN_SRC python :session :results output
  alien_0 = {'color': 'green', 'points': 5}

  print(alien_0['color'])
  print(alien_0['points'])
#+END_SRC

#+RESULTS:
: green
: 5

访问字典元素

#+BEGIN_SRC python :session :results output
  alien_0 = {'color': 'green', 'points': 5}

  new_points = alien_0['points']
  print("You just enarned " + str(new_points) + " points!")
#+END_SRC

#+RESULTS:
: You just enarned 5 points!


添加键值对

#+BEGIN_SRC python :session :results output
  alien_0 = {'color': 'green', 'points': 5}

  print(alien_0)

  alien_0['x_position'] = 0
  alien_0['y_position'] = 25
  print(alien_0)
#+END_SRC

#+RESULTS:
: {'color': 'green', 'points': 5}
: {'color': 'green', 'points': 5, 'x_position': 0, 'y_position': 25}

空字典

#+BEGIN_SRC python :session :results output
  alien_0 = {}

  alien_0['color'] = 'green'
  alien_0['points'] = 5

  print(alien_0)
#+END_SRC

#+RESULTS:
: {'color': 'green', 'points': 5}

修改字典中的值

#+BEGIN_SRC python :session :results output
  alien_0 = {'color': 'green'}
  print("The alien is " + alien_0['color'] + '.')

  alien_0['color'] = 'yellow'
  print("The alien is now " + alien_0['color'] + '.')
#+END_SRC

#+RESULTS:
: The alien is green.
: The alien is now yellow.

更有趣的例子

#+BEGIN_SRC python :session :results output
  alien_0 = {'x_position': 0, 'y_position': 25, 'speed': 'medium'}
  print("Original x-position: " + str(alien_0['x_position']))

  if alien_0['speed'] == 'slow':
      x_increment = 1
  elif alien_0['speed'] == 'medium':
      x_increment = 2
  else:
      x_increment = 3


  alien_0['x_position'] = alien_0['x_position'] + x_increment
  print("New x-position: " + str(alien_0['x_position']))
#+END_SRC

#+RESULTS:
: Original x-position: 0
: New x-position: 2

删除键值对

#+BEGIN_SRC python :session :results output
  alien_0 = {'color': 'green', 'points': 5}
  print(alien_0)

  del alien_0['points']
  print(alien_0)
#+END_SRC

#+RESULTS:
: {'color': 'green', 'points': 5}
: {'color': 'green'}

用对象表示一系列同类信息，比如一群人各自喜欢的编程语言

#+BEGIN_SRC python :session :results output
  favorite_languages = {
      'jen': 'python',
      'sarah': 'c',
      'edward': 'ruby',
      'phil': 'python',
  }

  print("Sarah's favorite language is "
        + favorite_languages['sarah'].title()
        + ".")
#+END_SRC

#+RESULTS:
: Sarah's favorite language is C.

*** Exercises

**** 6-1 人

#+BEGIN_SRC python :session :results output
  # http://bojackhorseman.wikia.com/wiki/BoJack
  bojack = {
      'first_name': 'boJack',
      'last_name': 'horseman',
      'age': 54,
      'city': 'hollywoo'
  }

  print(bojack['first_name'].title() + ' ' + bojack['last_name'].title()
        + " is " + str(bojack['age']) + " years old, and live in "
        + bojack['city'].title())
#+END_SRC

#+RESULTS:
: Bojack Horseman is 54 years old, and live in Hollywoo

**** 6-2 喜欢的数字

#+BEGIN_SRC python :session :results output
  favorite_numbers = {
      'alice': 8,
      'bob': 12,
      'carolina': 42,
      'david': 2,
      'eli': 6
  }

  print("Alice's favorite number is " + str(favorite_numbers['alice']))
  print("Bob's favorite number is " + str(favorite_numbers['bob']))
  print("Carolina's favorite number is " + str(favorite_numbers['carolina']))
  print("David's favorite number is " + str(favorite_numbers['david']))
  print("Eli's favorite number is " + str(favorite_numbers['eli']))
#+END_SRC

#+RESULTS:
: Alice's favorite number is 8
: Bob's favorite number is 12
: Carolina's favorite number is 42
: David's favorite number is 2
: Eli's favorite number is 6

**** 6-3 词汇表

#+BEGIN_SRC python :session :results output
  programming_terms = {
      'print': 'Print python object to screen',
      'if': 'Run code base on condition',
      'list': 'collections of items',
      'dict': 'collections of key-value pairs',
      'str': 'Convert number to string',
  }

  print('print: ' + programming_terms['print'] + "\n")
  print('if: ' + programming_terms['if'] + "\n")
  print('list: ' + programming_terms['list'] + "\n")
  print('dict: ' + programming_terms['dict'] + "\n")
  print('str: ' + programming_terms['str'] + "\n")
#+END_SRC

#+RESULTS:
: print: Print python object to screen
: 
: if: Run code base on condition
: 
: list: collections of items
: 
: dict: collections of key-value pairs
: 
: str: Convert number to string

*** 遍历字典

遍历键值对

#+BEGIN_SRC python :session :results output
  user_0 = {
      'username': 'efermi',
      'first': 'enrico',
      'last': 'fermi',
  }

  for key, value in user_0.items():
      print("\nKey: " + key)
      print("Value: " + value)
#+END_SRC

#+RESULTS:
: Key: username
: Value: efermi
: 
: Key: first
: Value: enrico
: 
: Key: last
: Value: fermi

#+BEGIN_SRC python :session :results output
  favorite_languages = {
      'jen': 'python',
      'sarah': 'c',
      'edward': 'ruby',
      'phil': 'python',
  }

  for name, language in favorite_languages.items():
      print(name.title () + "'s favorite language is " +
            language.title())
#+END_SRC

#+RESULTS:
: Jen's favorite language is Python
: Sarah's favorite language is C
: Edward's favorite language is Ruby
: Phil's favorite language is Python

遍历键

#+BEGIN_SRC python :session :results output
  favorite_languages = {
      'jen': 'python',
      'sarah': 'c',
      'edward': 'ruby',
      'phil': 'python',
  }

  for name in favorite_languages.keys():
      print(name.title())
#+END_SRC

#+RESULTS:
: Jen
: Sarah
: Edward
: Phil

#+BEGIN_SRC python :session :results output
  favorite_languages = {
      'jen': 'python',
      'sarah': 'c',
      'edward': 'ruby',
      'phil': 'python',
  }

  friends = ['phil', 'sarah']

  for name in favorite_languages.keys():
      print(name.title())

      if name in friends:
          print("  Hi " + name.title() +
                ", I see your favorite language is " +
                favorite_languages[name].title() + "!")
#+END_SRC

#+RESULTS:
: Jen
: Sarah
:   Hi Sarah, I see your favorite language is C!
: Edward
: Phil
:   Hi Phil, I see your favorite language is Python!

#+BEGIN_SRC python :session :results output
  favorite_languages = {
      'jen': 'python',
      'sarah': 'c',
      'edward': 'ruby',
      'phil': 'python',
  }

  if 'erin' not in favorite_languages.keys():
      print("Erin, please take our poll!")
#+END_SRC

#+RESULTS:
: Erin, please take our poll!

用函数 sorted() 按顺序遍历字典的所有键

#+BEGIN_SRC python :session :results output
  favorite_languages = {
      'jen': 'python',
      'sarah': 'c',
      'edward': 'ruby',
      'phil': 'python',
  }

  for name in sorted(favorite_languages.keys()):
      print(name.title() + ", thank you for taking the poll.")
#+END_SRC

#+RESULTS:
: Edward, thank you for taking the poll.
: Jen, thank you for taking the poll.
: Phil, thank you for taking the poll.
: Sarah, thank you for taking the poll.

遍历所有值

#+BEGIN_SRC python :session :results output
  favorite_languages = {
      'jen': 'python',
      'sarah': 'c',
      'edward': 'ruby',
      'phil': 'python',
  }

  print("The following languages have been mentioned:")
  for language in favorite_languages.values():
      print(language.title())
#+END_SRC

#+RESULTS:
: The following languages have been mentioned:
: Python
: C
: Ruby
: Python

用方法 set() 删除重复项

#+BEGIN_SRC python :session :results output
  favorite_languages = {
      'jen': 'python',
      'sarah': 'c',
      'edward': 'ruby',
      'phil': 'python',
  }

  print("The following languages have been mentioned:")
  for language in set(favorite_languages.values()):
      print(language.title())
#+END_SRC

#+RESULTS:
: The following languages have been mentioned:
: Python
: Ruby
: C

*** Exercises

**** 6-4 词汇表2
#+BEGIN_SRC python :session :results output
  programming_terms = {
      'print': 'Print python object to screen',
      'if': 'Run code base on condition',
      'list': 'collections of items',
      'dict': 'collections of key-value pairs',
      'str': 'Convert number to string',
  }

  for term, meaning in programming_terms.items():
      print(term + ": " + meaning)

  programming_terms['sorted'] = 'Return a sorted copy of list'
  programming_terms['set'] = 'Remove dup from list'
  programming_terms['for'] = 'Loop list'
  programming_terms['del'] = 'remove element from list, dict'

  print()
  for term, meaning in programming_terms.items():
      print(term + ": " + meaning)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
print: Print python object to screen
if: Run code base on condition
list: collections of items
dict: collections of key-value pairs
str: Convert number to string

print: Print python object to screen
if: Run code base on condition
list: collections of items
dict: collections of key-value pairs
str: Convert number to string
sorted: Return a sorted copy of list
set: Remove dup from list
for: Loop list
del: remove element from list, dict
#+END_EXAMPLE

**** 6-5 河流

#+BEGIN_SRC python :session :results output
  rivers = {
      'nile': 'egypt',
      'amazon': 'brazil',
      'Yangtze': 'china',
  }

  for river, country in rivers.items():
      print("The " + river.title() + " runs through " +
            country.title())

  print("\n世界三大河流:")
  for river in rivers.keys():
      print(river.title())

  print("\n它们流经的国家:")
  for country in rivers.values():
      print(country.title())
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
The Nile runs through Egypt
The Amazon runs through Brazil
The Yangtze runs through China

世界三大河流:
Nile
Amazon
Yangtze

它们流经的国家:
Egypt
Brazil
China
#+END_EXAMPLE

**** 6-6 调查

#+BEGIN_SRC python :session :results output
  favorite_languages = {
      'jen': 'python',
      'sarah': 'c',
      'edward': 'ruby',
      'phil': 'python',
  }

  supposed_names = ['sarah', 'phil', 'tom', 'jack']
  for name in supposed_names:
      if name in favorite_languages.keys():
          print(name.title() + ", thank you for taking the poll.")
      else:
          print(name.title() + ", please take out poll.")
#+END_SRC

#+RESULTS:
: Sarah, thank you for taking the poll.
: Phil, thank you for taking the poll.
: Tom, please take out poll.
: Jack, please take out poll.

*** 嵌套

**** 用列表保存字典

#+BEGIN_SRC python :session :results output
  alien_0 = {'color': 'green', 'points': 5}
  alien_1 = {'color': 'yellow', 'points': 10}
  alien_2 = {'color': 'red', 'points': 15}

  aliens = [alien_0, alien_1, alien_2]

  for alien in aliens:
      print(alien)
#+END_SRC

#+RESULTS:
: {'color': 'green', 'points': 5}
: {'color': 'yellow', 'points': 10}
: {'color': 'red', 'points': 15}

自动生成更多的外星人

#+BEGIN_SRC python :session :results output
  aliens = []

  for alien_number in range(30):
      new_alien = {'color': 'green', 'points': 5, 'speed': "slow"}
      aliens.append(new_alien)

  for alien in aliens[:5]:
      print(alien)
  print("...")

  print("Total number of aliens: " + str(len(aliens)))
#+END_SRC

#+RESULTS:
: {'color': 'green', 'points': 5, 'speed': 'slow'}
: {'color': 'green', 'points': 5, 'speed': 'slow'}
: {'color': 'green', 'points': 5, 'speed': 'slow'}
: {'color': 'green', 'points': 5, 'speed': 'slow'}
: {'color': 'green', 'points': 5, 'speed': 'slow'}
: ...
: Total number of aliens: 30

#+BEGIN_SRC python :session :results output
  aliens = []

  for alien_number in range(30):
      new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}
      aliens.append(new_alien)

  for alien in aliens[0:3]:
      if alien['color'] == 'green':
          alien['color'] = 'yellow'
          alien['speed'] = 'medium'
          alien['points'] = 10

  for alien in aliens[0:5]:
      print(alien)
  print("...")
#+END_SRC

#+RESULTS:
: {'color': 'yellow', 'points': 10, 'speed': 'medium'}
: {'color': 'yellow', 'points': 10, 'speed': 'medium'}
: {'color': 'yellow', 'points': 10, 'speed': 'medium'}
: {'color': 'green', 'points': 5, 'speed': 'slow'}
: {'color': 'green', 'points': 5, 'speed': 'slow'}
: ...

**** 用字典保存列表

#+BEGIN_SRC python :session :results output
  pizza = {
      'curst': 'thick',
      'toppings': ['mushrooms', 'extra cheese'],
  }

  print("You ordered a " + pizza['curst'] + "-curst pizza " +
        "with the following toppings: ")

  for toppings in pizza['toppings']:
      print("\t" + toppings)
#+END_SRC

#+RESULTS:
: You ordered a thick-curst pizza with the following toppings: 
: 	mushrooms
: 	extra cheese

#+BEGIN_SRC python :session :results output
  favorite_languages = {
      'jen': ['python', 'ruby'],
      'sarah': ['c'],
      'edward': ['ruby', 'go'],
      'phil': ['python', 'haskell'],
  }

  for name, languages in favorite_languages.items():
      print("\n" + name.title() + "'s favorite languages are: ")
      for language in languages:
          print("\t" + language.title())
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Jen's favorite languages are: 
	Python
	Ruby

Sarah's favorite languages are: 
	C

Edward's favorite languages are: 
	Ruby
	Go

Phil's favorite languages are: 
	Python
	Haskell
#+END_EXAMPLE

**** 用字典保存字典

#+NAME: many_users.py
#+BEGIN_SRC python :session :results output
  users = {
      'aeinstein': {
          'first': 'albert',
          'last': 'einstain',
          'location': 'princeton',
      },

      'mourie': {
          'first': 'marie',
          'last': 'curie',
          'location': 'paris',
      },
    
  }

  for username, user_info in users.items():
      print("\nUsername: " + username)
      full_name = user_info['first'] + " " + user_info['last']
      location = user_info['location']

      print("\tFull name: " + full_name.title())
      print("\tLocation: " + location.title())
#+END_SRC

#+RESULTS: many_users.py
: Username: aeinstein
: 	Full name: Albert Einstain
: 	Location: Princeton
: 
: Username: mourie
: 	Full name: Marie Curie
: 	Location: Paris

**** Exercises

***** 6-7 人

#+BEGIN_SRC python :session :results output
  # http://bojackhorseman.wikia.com/wiki/BoJack
  bojack = {
      'first_name': 'boJack',
      'last_name': 'horseman',
      'age': 54,
      'city': 'Los Angeles'
  }

  todd = {
      'first_name': 'todd',
      'last_name': 'chavez',
      'age': 26,
      'city': "Princess Carolyn's apartment"
  }

  diane = {
      'first_name': 'diane',
      'last_name': 'nguyen',
      'age': 37,
      'city': 'Los Angeles'
  }


  people = [bojack, todd, diane]

  for person in people:
      full_name = person['first_name'].title() + ' ' + person['last_name'].title()
      print(full_name + " is " + str(person['age']) + " years old, and live in "
            + person['city'].title())
#+END_SRC

#+RESULTS:
: Bojack Horseman is 54 years old, and live in Los Angeles
: Todd Chavez is 26 years old, and live in Princess Carolyn'S Apartment
: Diane Nguyen is 37 years old, and live in Los Angeles

***** 6-8 宠物

#+BEGIN_SRC python :session :results output
  tom = {
      'species': 'cat',
      'owner': 'unknown',
  }

  jerry = {
      'species': 'mouse',
      'owner': 'nobody',
  }

  spike = {
      'species': 'dog',
      'owner': 'unknown',
  }

  pets = [tom, jerry, spike]

  for pet in pets:
      print('\nSpecies: ' + pet['species'].title())
      print("Owner: " + pet['owner'].title())
#+END_SRC

#+RESULTS:
: Species: Cat
: Owner: Unknown
: 
: Species: Mouse
: Owner: Nobody
: 
: Species: Dog
: Owner: Unknown

***** 6-9 喜欢的地方

#+BEGIN_SRC python :session :results output
  favorite_places = {
      'alice': ['beijing', 'hongkong', 'guangzhou'],
      'bob': ['boston'],
      'carolina': ['tokyo', 'seoul'],
  }

  for person, places in favorite_places.items():
      if len(places) == 1:
          print("\n" + person + "'s favorite place is " + places[0].title())
      elif len(places) > 1:
          print("\n" + person + "'s favorite places are: ")
          for place in places:
              print("\t" + place.title())
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
alice's favorite places are: 
	Beijing
	Hongkong
	Guangzhou

bob's favorite place is Boston

carolina's favorite places are: 
	Tokyo
	Seoul
#+END_EXAMPLE

***** 6-10 最喜欢的数字

#+BEGIN_SRC python :session :results output
  favorite_numbers = {
      'alice': [8, 10],
      'bob': [12],
      'carolina': [42, 99, 1000],
      'david': [2, 8],
      'eli': [6, 12],
  }

  for name, numbers in favorite_numbers.items():
      if len(numbers) == 1:
          print(name.title() + "'s favorite number is " + str(numbers[0]) + ".\n")
      elif len(numbers) >= 2:
          print(name.title() + "'s favorite numbers are:")
          for number in numbers:
              print("\t" + str(number))
          print()
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Alice's favorite numbers are:
	8
	10

Bob's favorite number is 12.

Carolina's favorite numbers are:
	42
	99
	1000

David's favorite numbers are:
	2
	8

Eli's favorite numbers are:
	6
	12
#+END_EXAMPLE


***** 6-11 城市

#+BEGIN_SRC python :session :results output
  cities = {
      'beijing': {
          'country': 'china',
          'population': 2171_0000,
          'fact': 'beijing is the capital of China',
      },

      'istanbul': {
          'country': 'turkey',
          'population': 1503_0000,
          'fact': 'istanbul is the largest city of Turkey'
      },

      'tokyo': {
          'country': 'japan',
          'population': 1374_0000,
          'fact': "Tokyo has 23 special wards",
      },
  }

  for city_name, city_info in cities.items():
      print("\n" + city_name.title())
      for info_key, info_value in city_info.items():
          print("\t" + info_key + ": " + str(info_value))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Beijing
	country: china
	population: 21710000
	fact: beijing is the capital of China

Istanbul
	country: turkey
	population: 15030000
	fact: istanbul is the largest city of Turkey

Tokyo
	country: japan
	population: 13740000
	fact: Tokyo has 23 special wards
#+END_EXAMPLE

***** 6-12 扩展

#+BEGIN_SRC python :session :results output
  favorite_numbers = {
      'alice': [8, 10],
      'bob': [12],
      'carolina': [42, 99, 1000],
      'david': [2, 8],
      'eli': [6, 12],
  }

  favorite_numbers['jack'] = []

  for name, numbers in favorite_numbers.items():
      if not numbers:
          print(name.title() + " doesn't have any favorite numbers.")
      elif len(numbers) == 1:
          print(name.title() + " has only one favorite numbers.")
      elif len(numbers) > 1:
          print(name.title() + " has multiple favorite numbers")
#+END_SRC

#+RESULTS:
: Alice has multiple favorite numbers
: Bob has only one favorite numbers.
: Carolina has multiple favorite numbers
: David has multiple favorite numbers
: Eli has multiple favorite numbers
: Jack doesn't have any favorite numbers.

** Chapter 7

用函数 input() 获得输入

#+NAME: parrot.py
#+BEGIN_SRC python :session :results output
message = input("Tell me something, and I will repeat it back to you: ")
print(message)
#+END_SRC

#+BEGIN_SRC python :session :results value pp
  name = input("Please enter your name: ")
  print("Hello, " + name + "!")
#+END_SRC

用函数 int() 获得数值输入

#+BEGIN_SRC python :session :results value pp
  height = input("How tall are you? ")
  height = int(height)

  if height >= 36:
      print("\nYou're tall enough to ride!")
  else:
      print("\nYou'll be able to ride when you're a little older.")
#+END_SRC

求模运算（两数相除取余数）

#+BEGIN_SRC python :session :results value pp
  number = input("Enter a number, and I'll tell you if it's a even or odd: ")
  number = int(number)

  if number % 2 == 0:
      print("\nThe number " + str(number) + " is a even.")
  else:
      print("\nThe number " + str(number) + " is a odd.")
#+END_SRC

*** Exercises

**** 7-1 汽车租赁

#+BEGIN_SRC python :session :results value pp
  car = input("What kind of car do you want to borrow? ")
  print("\nLet me see if I can find you a " + car.title() + ".")
#+END_SRC

**** 7-2 餐馆订位

#+BEGIN_SRC python :session :results value pp
  how_many_people = input("How many people eat? ")
  how_many_people = int(how_many_people)

  if how_many_people > 8:
      print("Sorry, there is not empty seat.")
  else:
      print("OK, there are empty seat.")
#+END_SRC

**** 7-3 10 的整数倍

#+BEGIN_SRC python :session :results value pp
  number = input("Enter a number," +
                 "and I'll tell you if it's an integer multiple of 10: ")
  number = int(number)

  if number % 10 == 0:
      print("\nThe number " + str(number) + " is multiple of 10.")
  else:
      print("\nThe number " + str(number) + " is NOT multiple of 10.")
#+END_SRC

*** while

#+BEGIN_SRC python :session :results output
  current_number = 1
  while current_number <= 5:
      print(current_number)
      current_number += 1
#+END_SRC

#+RESULTS:
: 1
: 2
: 3
: 4
: 5

让用户决定何时退出

#+BEGIN_SRC python :session :results value pp
  prompt = "\nTell my something, and I will repeat it back to you:"
  prompt += "\nEnter 'quit' to end the program. "

  message = ""
  while message != 'quit':
      message = input(prompt)
      if message != 'quit':
          print(message)
#+END_SRC

用变量保存条件

#+BEGIN_SRC python :session :results value pp
  prompt = "\nTell my something, and I will repeat it back to you:"
  prompt += "\nEnter 'quit' to end the program. "

  active = True
  while active:
      message = input(prompt)
      if message == 'quit':
          active = False
      else:
          print(message)
#+END_SRC

break

#+BEGIN_SRC python :session :results value pp
  prompt = "\nPlease enter the name of a city you have visited:"
  prompt += "\n(Enter 'quit' when you are finished.) "

  while True:
      city = input(prompt)

      if city == 'quit':
          break
      else:
          print("I'd live to go to " + city.title() + "!")
#+END_SRC

#+begin_quote
注意　在任何Python循环中都可使用break语句。例如，可使用break语句来退出
遍历列表或字典的for循环。
#+end_quote

continue

#+BEGIN_SRC python :session :results output
  current_number = 0
  while current_number < 10:
      current_number += 1
      if current_number % 2 == 0:
          continue

      print(current_number)
#+END_SRC

#+RESULTS:
: 1
: 3
: 5
: 7
: 9

*** Exercises

**** 7-4 比萨配料

#+BEGIN_SRC python :session :results value pp
  prompt = "\nPlease enter a pizza topping:"
  prompt += "\n(Enter 'quit' when you are finished.) "

  while True:
      topping = input(prompt)
      if topping == 'quit':
          break
      else:
          print("We will adding " + topping +".")
#+END_SRC

**** 7-5 电影票

#+BEGIN_SRC python :session :results value pp
  while True:
      age = input("\nHow old are you(Enter 'quit' when you are finished)? ")
      if age == 'quit':
          break
      else:
          age = int(age)
          if age < 3:
              print("Your admission cost is $0.")
          elif age < 12:
              print("Your admission cost is $10.")
          else:
              print("Your admission cost is $15.")
#+END_SRC

**** 7-6 三个出口

?

#+BEGIN_SRC python :session :results value pp
  active = True
  while active:
      age = input("\nHow old are you? (Enter 'quit' when you are finished) ")
      if age == 'quit':
          active = False
          break
      else:
          age = int(age)
          if age < 3:
              print("Your admission cost is $0.")
          elif age < 12:
              print("Your admission cost is $10.")
          else:
              print("Your admission cost is $15.")
#+END_SRC

**** 7-7 无限循环

#+BEGIN_SRC python :session :results value pp
  number = 0
  while number >= 0:
      print(number)
      number += 1
#+END_SRC

*** while & list and dict

用 while 修改 list

#+BEGIN_SRC python :session :results output
  unconfirmed_users = ['alice', 'bob', 'carolina']
  confirmed_users = []

  while unconfirmed_users:
      current_user = unconfirmed_users.pop()

      print("Verifying user: " + current_user.title())
      confirmed_users.append(current_user)

  print("\nThe following users have been confirmed:")
  for confirmed_user in confirmed_users:
      print(confirmed_user.title())
#+END_SRC

#+RESULTS:
: Verifying user: Carolina
: Verifying user: Bob
: Verifying user: Alice
: 
: The following users have been confirmed:
: Carolina
: Bob
: Alice

删除包含特定值的所有列表元素

#+BEGIN_SRC python :session :results output
  numbers = [1, 3, 1, 2, 3]
  print(numbers)

  while 1 in numbers:
      numbers.remove(1)

  print(numbers)
#+END_SRC

#+RESULTS:
: [1, 3, 1, 2, 3]
: [3, 2, 3]

更多的用户输入

#+BEGIN_SRC python :session :results value pp
  responses = {}

  polling_active = True

  while polling_active:
      name = input("\nWhat's your name? ")
      response = input("Which mountain would you like to climb someday? ")

      responses[name] = response

      repeat = input("would you like to let another person respond? (yes or no)")
      if repeat == 'no':
          polling_active = False

  print("\n--- Poll Results ---")
  for name, response in responses.items():
      print(name + " would like to clib " + response + ".")
#+END_SRC

*** Exercises

**** 7-8 熟食店

#+BEGIN_SRC python :session :results output
  sandwich_orders = ['豆腐', '葱香', '米饭']
  finished_sandwiches = []

  while sandwich_orders:
      current_sandwich = sandwich_orders.pop()

      print("I made your " + current_sandwich + " sandwich.")
      finished_sandwiches.append(current_sandwich)
    
  print("\nThe following sandwiches are finished:")
  for sandwich in finished_sandwiches:
      print("\t" + sandwich)
#+END_SRC

#+RESULTS:
: I made your 米饭 sandwich.
: I made your 葱香 sandwich.
: I made your 豆腐 sandwich.
: 
: The following sandwiches are finished:
: 	米饭
: 	葱香
: 	豆腐

**** 7-9 五香烟熏牛肉（pastrami）卖完了

#+BEGIN_SRC python :session :results output
  sandwich_orders = ['pastrami', '豆腐', 'pastrami', '葱香', '米饭', 'pastrami']
  finished_sandwiches = []

  print("pastrami is sold out.")

  while 'pastrami' in sandwich_orders:
      sandwich_orders.remove('pastrami')

  while sandwich_orders:
      current_sandwich = sandwich_orders.pop()

      print("I made your " + current_sandwich + " sandwich.")
      finished_sandwiches.append(current_sandwich)

  print("\nThe following sandwiches are finished:")
  for sandwich in finished_sandwiches:
      print("\t" + sandwich)
#+END_SRC

#+RESULTS:
: pastrami is sold out.
: I made your 米饭 sandwich.
: I made your 葱香 sandwich.
: I made your 豆腐 sandwich.
: 
: The following sandwiches are finished:
: 	米饭
: 	葱香
: 	豆腐

**** 7-10 梦想的度假胜地

#+BEGIN_SRC python :session :results value pp
  responses = {}

  while True:
      name = input("\nWhat's your name? ")
      response = input("If you could visit one place in the world, where would like to go? ")

      responses[name] = response

      repeat = input("Would you like to let another person respond? (y or n)")
      if repeat == 'n':
          break

  print("\n--- Poll Results ---")
  for name, response in responses.items():
      print(name + " would like go to " + response + ".")
#+END_SRC

** Chapter 8

define function:
- name
- arg
- docstring
- body

#+BEGIN_SRC python :session :results output
  def greet_user():
      """Say Hello"""
      print("Hello!")

  greet_user()
#+END_SRC

#+RESULTS:
: Hello!

参数

#+BEGIN_SRC python :session :results output
  def greet_user(username):
      """Say Hello"""
      print("Hello, " + username.title() + "!")

  greet_user("kevin")
#+END_SRC

#+RESULTS:
: Hello, Kevin!

*** Exercises

**** 8-1 消息

#+BEGIN_SRC python :session :results output
  def display_message():
      print("I learnt how to define and call a function.")

  display_message()
#+END_SRC

#+RESULTS:
: I learnt how to define and call a function.

**** 8-2 喜欢的图书

#+BEGIN_SRC python :session :results output
  def favorite_book(title):
      """Show the name of my favorite book"""
      print("One of my favorite book is " + title.title())

  favorite_book('nowhere')
#+END_SRC

#+RESULTS:
: One of my favorite book is Nowhere

*** 参数

位置参数

#+BEGIN_SRC python :session :results output
  def describe_pet(animal_type, pet_name):
      """Show pet infomation"""
      print("\nI have a " + animal_type + ".")
      print("My " + animal_type + "'s name is " + pet_name.title() + ".")

  describe_pet('dog', 'yellow')
  describe_pet('cat', 'black')
#+END_SRC

#+RESULTS:
: I have a dog.
: My dog's name is Yellow.
:
: I have a cat.
: My cat's name is Black.

关键词实参

#+BEGIN_SRC python :session :results output
  def describe_pet(animal_type, pet_name):
      """Describe my pet"""
      print("\nI have a " + animal_type + ".")
      print("My " + animal_type + " a name is " + pet_name.title() + ".")

  describe_pet(animal_type='dog', pet_name='yellow')
  describe_pet(pet_name='yellow', animal_type='dog')
#+END_SRC

#+RESULTS:
: I have a dog.
: My dog a name is Yellow.
:
: I have a dog.
: My dog a name is Yellow.

默认值

#+BEGIN_SRC python :session :results output
  def describe_pet(pet_name, animal_type='dog'):
      """Describe my pet"""
      print("\nI have a " + animal_type + ".")
      print("My " + animal_type + "'s name is " + pet_name.title() + '.')

  describe_pet(pet_name='white')
#+END_SRC

#+RESULTS:
: I have a dog.
: My dog's name is White.

等效的函数调用

#+BEGIN_SRC python :session :results output
  describe_pet('willie')
  describe_pet(pet_name='willie')

  describe_pet('tom', 'cat')
  describe_pet(pet_name='tom', animal_type='cat')
  describe_pet('tom', animal_type='cat')
  # 这种不行
  # describe_pet(pet_name='tom', 'cat')
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
I have a dog.
My dog's name is Willie.

I have a dog.
My dog's name is Willie.

I have a cat.
My cat's name is Tom.

I have a cat.
My cat's name is Tom.

I have a cat.
My cat's name is Tom.
#+END_EXAMPLE

*** Exercises

**** 8-3 T恤

#+BEGIN_SRC python :session :results output
  def make_shirt(size, message):
      """Make T-shirt"""
      print("Making a " + str(size) + " T shirt with '" + message + "' on it.")

  make_shirt(56, 'Hello World')
  make_shirt(size=56, message='Hello World')
#+END_SRC

#+RESULTS:
: Making a 56 T shirt with 'Hello World' on it.
: Making a 56 T shirt with 'Hello World' on it.

**** 8-4 大号 T恤

#+BEGIN_SRC python :session :results output
  def make_shirt(size, message='I love Python'):
      """Make T-shirt"""
      print("Making a " + str(size) + " T shirt with '" + message + "' on it.")

  make_shirt(100)
  make_shirt(80)
  make_shirt(80, message='Hello Python')
#+END_SRC

#+RESULTS:
: Making a 100 T shirt with 'I love Python' on it.
: Making a 80 T shirt with 'I love Python' on it.
: Making a 80 T shirt with 'Hello Python' on it.

**** 8-5 城市

#+BEGIN_SRC python :session :results output
  def describe_city(city_name, country_name='China'):
      """描述一个城市"""
      print(city_name.title() + " is in " + country_name.title() + ".")

  describe_city('Beijing')
  describe_city("Chang'an")
  describe_city("Seoul", country_name='Korea')
#+END_SRC

#+RESULTS:
: Beijing is in China.
: Chang'An is in China.
: Seoul is in Korea.

*** 返回值

#+BEGIN_SRC python :session :results output
  def get_formatted_name(first_name, last_name):
      """返回整洁的姓名"""
      full_name = first_name + ' ' + last_name
      return full_name.title()

  musican = get_formatted_name('jimi', 'hendrix')
  print(musican)
#+END_SRC

#+RESULTS:
: Jimi Hendrix

#+BEGIN_SRC python :session :results output
  def get_formatted_name(first_name, last_name, middle_name=''):
      """返回整洁的姓名"""
      if middle_name:
          full_name = first_name + ' ' + middle_name + ' ' + last_name
      else:
          full_name = first_name + ' ' + last_name
      return full_name.title()

  musican = get_formatted_name('jimi', 'hendrix')
  print(musican)

  musican = get_formatted_name('john', 'hooker', 'lee')
  print(musican)
#+END_SRC

#+RESULTS:
: Jimi Hendrix
: John Lee Hooker

#+begin_quote
Python将非空字符串解读为True
#+end_quote

发挥字典

#+BEGIN_SRC python :session :results output
  def build_person(first_name, last_name, age=''):
      """返回一个字典，其中包括有关一个人的信息"""
      person = {'first': first_name, 'last': last_name}
      if age:
          person['age'] = age
      return person

  musican = build_person('jimi', 'hendrix', age=27)
  print(musican)
#+END_SRC

#+RESULTS:
: {'first': 'jimi', 'last': 'hendrix', 'age': 27}

while

#+BEGIN_SRC python :session :results value pp
  def get_formatted_name(first_name, last_name):
      """返回整洁的姓名"""
      full_name = first_name + ' ' + last_name
      return full_name.title()

  while True:
      print("\nPlease tell me your name:")
      print("(enter 'q' at any time to quit)")

      f_name = input("First name: ")
      if f_name == 'q':
          break

      l_name = input("Last name: ")
      if l_name == 'q':
          break

      formatted_name = get_formatted_name(f_name, l_name)
      print("\nHello, " + formatted_name + "!")

#+END_SRC

*** Exercises

**** 8-6 城市名

#+BEGIN_SRC python :session :results output
  def city_country(city, country):
      """返回包含城市名和所在国家的字符串"""
      return city.title() + ', ' + country.title()

  print(city_country('Beijing', 'China'))
  print(city_country('Hongkong', 'China'))
  print(city_country('Seoul', 'South Korea'))
#+END_SRC

#+RESULTS:
: Beijing, China
: Hongkong, China
: Seoul, South Korea

**** 8-7 专辑

#+BEGIN_SRC python :session :results output
  def make_album(artist, title):
      """返回一个字典，其中包括艺术家的姓名和专辑名"""
      album = {'artist': artist, 'title': title}
      return album

  album = make_album('Pink Floyd', 'The Wall')
  print(album)

  album = make_album('Michale Jackson', 'HIStory')
  print(album)

  album = make_album('Eminem', 'The Marshall Mathers LP')
  print(album)

  def make_album_2(artist, title, how_many_songs=0):
      """返回一个字典，其中包括艺术家的姓名和专辑名"""
      album = {'artist': artist, 'title': title}
      if how_many_songs:
          album['how_many_songs'] = how_many_songs
      return album

  album = make_album_2('Michale Jackson', 'HIStory', how_many_songs=30)
  print(album)

  album = make_album('Eminem', 'The Marshall Mathers LP')
  print(album)
#+END_SRC

#+RESULTS:
: {'artist': 'Pink Floyd', 'title': 'The Wall'}
: {'artist': 'Michale Jackson', 'title': 'HIStory'}
: {'artist': 'Eminem', 'title': 'The Marshall Mathers LP'}
: {'artist': 'Michale Jackson', 'title': 'HIStory', 'how_many_songs': 30}
: {'artist': 'Eminem', 'title': 'The Marshall Mathers LP'}

**** 8-8 用户的专辑

#+BEGIN_SRC python :session :results output
  def make_album(artist, title):
      """返回一个字典，其中包括艺术家的姓名和专辑名"""
      album = {'artist': artist, 'title': title}
      return album

  while True:
      print("\nPlease tell me one album")
      print("(enter 'q' at any time to quit)")

      artist = input("Artist: ")
      if artist == 'q':
          break

      title = input("Title: ")
      if title == 'q':
          break

      album = make_album(artist, title)
      print(album)
#+END_SRC

*** 传递列表

#+BEGIN_SRC python :session :results output
  def greet_users(names):
      """向列表中的每位用户都发送简单的问候"""
      for name in names:
          msg = "Hello, " + name.title() + "!"
          print(msg)

  usernames = ['alice', 'bob', 'carolina']
  greet_users(usernames)
#+END_SRC

#+RESULTS:
: Hello, Alice!
: Hello, Bob!
: Hello, Carolina!

修改列表

#+BEGIN_SRC python :session :results output
  unprinted_designs = ['iphone case', 'robot pendant', 'dodecahedron']
  completed_models = []

  while unprinted_designs:
      current_design = unprinted_designs.pop()

      print("Printing model: " + current_design)
      completed_models.append(current_design)

  print("\nThe following models have been printed:")
  for completed_model in completed_models:
      print(completed_model)
#+END_SRC

#+RESULTS:
: Printing model: dodecahedron
: Printing model: robot pendant
: Printing model: iphone case
:
: The following models have been printed:
: dodecahedron
: robot pendant
: iphone case

#+BEGIN_SRC python :session :results output
  def print_modules(unprinted_designs, completed_models):
      """
      模拟打印每个设计，直到没有未打印的设计为止
      打印每个设计后，都将其移到列表 completed_models 中
      """
      while unprinted_designs:
          current_design = unprinted_designs.pop()

          print("Printing model: " + current_design)
          completed_models.append(current_design)


  def show_completed_models(completed_models):
      """显示打印好的所有模型"""
      print("\nThe following models have been printed:")
      for completed_model in completed_models:
          print(completed_model)

  unprinted_designs = ['iphone case', 'robot pendant', 'dodecahedron']
  completed_models = []

  print_modules(unprinted_designs, completed_models)
  show_completed_models(completed_models)
#+END_SRC

#+RESULTS:
: Printing model: dodecahedron
: Printing model: robot pendant
: Printing model: iphone case
:
: The following models have been printed:
: dodecahedron
: robot pendant
: iphone case

通过向函数传递 列表的副本 来禁止函数修改列表

*** Exercises

**** 8-9 魔术师

#+BEGIN_SRC python :session :results output
  magicians = ["alice", "david", "carolina"]

  def show_magicans(magicians):
      """显示列表中每位魔术师的名字"""
      for magician in magicians:
          print(magician.title())

  show_magicans(magicians)
#+END_SRC

#+RESULTS:
: Alice
: David
: Carolina

**** 8-10 了不起的魔术师

#+BEGIN_SRC python :session :results output
  def show_magicans(magicians):
      """显示列表中每位魔术师的名字"""
      for magician in magicians:
          print(magician.title())

  def make_great(magicians):
      """修改列表中每位魔术师的名字"""
      magicians_copy = magicians[:]
      del magicians[:]
      for magician in magicians_copy:
          magicians.append('the Great ' + magician)

  magicians = ["alice", "david", "carolina"]
  make_great(magicians)
  show_magicans(magicians)
#+END_SRC

#+RESULTS:
: The Great Alice
: The Great David
: The Great Carolina

**** 8-11 不变的魔术师

#+BEGIN_SRC python :session :results output
  def show_magicans(magicians):
      """显示列表中每位魔术师的名字"""
      for magician in magicians:
          print(magician.title())

  def make_great(magicians):
      """修改列表中每位魔术师的名字"""
      magicians_copy = magicians[:]
      del magicians[:]
      for magician in magicians_copy:
          magicians.append('the Great ' + magician)
      return magicians

  magicians = ["alice", "david", "carolina"]
  great_magicians = make_great(magicians[:])
  show_magicans(magicians)
  show_magicans(great_magicians)
#+END_SRC

#+RESULTS:
: Alice
: David
: Carolina
: The Great Alice
: The Great David
: The Great Carolina

*** 传递任意数量的实参

*arg 表示任意长度的元组

#+BEGIN_SRC python :session :results output
  def make_pizza(*toppings):
      """打印顾客点的所有配料"""
      print(toppings)

  make_pizza()
  make_pizza('pepperoni')
  make_pizza('mushrooms', 'green peppers', 'extra cheese')
#+END_SRC

#+RESULTS:
: ()
: ('pepperoni',)
: ('mushrooms', 'green peppers', 'extra cheese')

#+BEGIN_SRC python :session :results output
  def make_pizza(*toppings):
      """概述需要制作的比萨"""
      print("\nMaking a pizza with the following toppings:")
      for topping in toppings:
          print("- " + topping)

  make_pizza('pepperoni')
  make_pizza('mushrooms', 'green peppers', 'extra cheese')
#+END_SRC

#+RESULTS:
: Making a pizza with the following toppings:
: - pepperoni
:
: Making a pizza with the following toppings:
: - mushrooms
: - green peppers
: - extra cheese

结合位置实参和任意数量实参

#+BEGIN_SRC python :session :results output
  def make_pizza(size, *toppings):
      """概述需要制作的比萨"""
      print("\nMaking a " + str(size) +
            "-inch pizza with the following toppings:")
      for topping in toppings:
          print("- " + topping)

  make_pizza(16, "pepperoni")
  make_pizza(12, "mushroom", "green peppers", "extra cheese")
#+END_SRC

#+RESULTS:
: Making a 16-inch pizza with the following toppings:
: - pepperoni
:
: Making a 12-inch pizza with the following toppings:
: - mushroom
: - green peppers
: - extra cheese

**args 任意数量的关键字实参

#+BEGIN_SRC python :session :results output
  def build_profile(first, last, **user_info):
      """创建一个字典，其中包括我们知道的有关用户的一切"""
      profile = {}
      profile['first_name'] = first
      profile['last_name'] = last
      for key, value in user_info.items():
          profile[key] = value
      return profile

  user_profile = build_profile('albert', 'einstein',
                               location='princeton',
                               field='physics')
  print(user_profile)
#+END_SRC

#+RESULTS:
: {'first_name': 'albert', 'last_name': 'einstein', 'location': 'princeton', 'field': 'physics'}

*** Exercises

**** 8-12 三明治

#+BEGIN_SRC python :session :results output
  def make_sandwith(*toppings):
      """概述需要制作的三明治"""
      print("\nMaking a sandwith with the following toppings:")
      for topping in toppings:
          print('- ' + topping)

  make_sandwith('pepperoni')
  make_sandwith('mushrooms', 'floss')
  make_sandwith('mushrooms', 'floss', 'cheese')
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Making a sandwith with the following toppings:
- pepperoni

Making a sandwith with the following toppings:
- mushrooms
- floss

Making a sandwith with the following toppings:
- mushrooms
- floss
- cheese
#+END_EXAMPLE

**** 8-13 用户简介

#+BEGIN_SRC python :session :results output
  def build_profile(given_name, family_name, **other_info):
      """创建一个字典，其中包括所知的我的一切"""
      profile = {'given_name': given_name, 'family_name': family_name}
      for key, value in other_info.items():
          profile[key] = value
      return profile

  my_profile = build_profile('chunyang', 'xu', age=25, country='china', sex='male')
  print(my_profile)
#+END_SRC

#+RESULTS:
: {'given_name': 'chunyang', 'family_name': 'xu', 'age': 25, 'country': 'china', 'sex': 'male'}

**** 8-14 汽车

#+BEGIN_SRC python :session :results output
  def make_car(factory, model, **other_info):
      """返回一个字典，包括关于车的所有信息"""
      profile = {}
      profile['factory'] = factory
      profile['model'] = model
      for key, value in other_info.items():
          profile[key] = value
      return profile

  car = make_car('subaru', 'outback', color='blue', tow_package=True)
  print(car)
#+END_SRC

#+RESULTS:
: {'factory': 'subaru', 'model': 'outback', 'color': 'blue', 'tow_package': True}

*** 函数 · 模块

一个模块

#+BEGIN_SRC python :tangle pizza.py
  def make_pizza(size, *toppings):
      """概述要制作的比萨"""
      print("\nMaking a " + str(size) +
            "-inch pizza with the following toppings:")
      for topping in toppings:
          print("- " + topping)
#+END_SRC

导入这个模块

#+BEGIN_SRC python :results output
  import pizza

  pizza.make_pizza(16, 'pepperoni')
  pizza.make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')
#+END_SRC

#+RESULTS:
:
: Making a 16-inch pizza with the following toppings:
: - pepperoni
:
: Making a 12-inch pizza with the following toppings:
: - mushrooms
: - green peppers
: - extra cheese

导入模块中的特定函数

#+BEGIN_SRC python :results output
  from pizza import make_pizza

  make_pizza(16, 'pepperoni')
  make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')
#+END_SRC

#+RESULTS:
:
: Making a 16-inch pizza with the following toppings:
: - pepperoni
:
: Making a 12-inch pizza with the following toppings:
: - mushrooms
: - green peppers
: - extra cheese

用 as 给函数设置别名

#+BEGIN_SRC python :results output
  from pizza import make_pizza as mp

  mp(16, 'pepperoni')
  mp(12, 'mushrooms', 'green peppers', 'extra cheese')
#+END_SRC

#+RESULTS:
:
: Making a 16-inch pizza with the following toppings:
: - pepperoni
:
: Making a 12-inch pizza with the following toppings:
: - mushrooms
: - green peppers
: - extra cheese

用 * 导入模块中的所有函数

#+BEGIN_SRC python :results output
  from pizza import *

  make_pizza(16, 'pepperoni')
  make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')
#+END_SRC

#+RESULTS:
:
: Making a 16-inch pizza with the following toppings:
: - pepperoni
:
: Making a 12-inch pizza with the following toppings:
: - mushrooms
: - green peppers
: - extra cheese

*** 函数编写指南

1. 使用描述性的名字
2. docstring
3. 形参默认值两侧不加空格

*** Exercises

**** 8-15 打印模型

定义 printing_functions 模块

#+BEGIN_SRC python :tangle printing_functions.py
  def print_modules(unprinted_designs, completed_models):
      """
      模拟打印每个设计，直到没有未打印的设计为止
      打印每个设计后，都将其移到列表 completed_models 中
      """
      while unprinted_designs:
          current_design = unprinted_designs.pop()

          print("Printing model: " + current_design)
          completed_models.append(current_design)


  def show_completed_models(completed_models):
      """显示打印好的所有模型"""
      print("\nThe following models have been printed:")
      for completed_model in completed_models:
          print(completed_model)
#+END_SRC

使用该模块

#+BEGIN_SRC python :results output
  from printing_functions import print_modules, show_completed_models

  unprinted_designs = ['iphone case', 'robot pendant', 'dodecahedron']
  completed_models = []

  print_modules(unprinted_designs, completed_models)
  show_completed_models(completed_models)
#+END_SRC

#+RESULTS:
: Printing model: dodecahedron
: Printing model: robot pendant
: Printing model: iphone case
:
: The following models have been printed:
: dodecahedron
: robot pendant
: iphone case

**** 8-16 导入

定义 greet_users 模块

#+BEGIN_SRC python :tangle greet_users.py
  def greet_users(names):
      """向列表中的每位用户都发送简单的问候"""
      for name in names:
          msg = "Hello, " + name.title() + "!"
          print(msg)
#+END_SRC

使用该模块

#+BEGIN_SRC python :results output
  usernames = ['alice', 'bob', 'carolina']

  import greet_users
  greet_users.greet_users(usernames)

  from greet_users import greet_users
  greet_users(usernames)

  from greet_users import greet_users as gu
  gu(usernames)

  import greet_users as gu
  gu.greet_users(usernames)

  from greet_users import *
  greet_users(usernames)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Hello, Alice!
Hello, Bob!
Hello, Carolina!
Hello, Alice!
Hello, Bob!
Hello, Carolina!
Hello, Alice!
Hello, Bob!
Hello, Carolina!
Hello, Alice!
Hello, Bob!
Hello, Carolina!
Hello, Alice!
Hello, Bob!
Hello, Carolina!
#+END_EXAMPLE

**** 8-17 函数编写指南

#+BEGIN_SRC python :session :results value pp
  def greet_users(names):
      """向列表中的每位用户都发送简单的问候"""
      for name in names:
          msg = "Hello, " + name.title() + "!"
          print(msg)
#+END_SRC

#+BEGIN_SRC python :session :results value pp
  def describe_city(city_name, country_name='China'):
      """描述一个城市"""
      print(city_name.title() + " is in " + country_name.title() + ".")
#+END_SRC

#+BEGIN_SRC python :session :results value pp
  def get_formatted_name(first_name, last_name, middle_name=''):
      """返回整洁的姓名"""
      if middle_name:
          full_name = first_name + ' ' + middle_name + ' ' + last_name
      else:
          full_name = first_name + ' ' + last_name
      return full_name.title()
#+END_SRC

** Chapter 9

创建一个类

#+NAME: dog_class
#+BEGIN_SRC python
  class Dog():
      """一次模拟小狗的简单尝试"""

      def __init__(self, name, age):
          """初始化属性 name 和 age"""
          self.name = name
          self.age = age

      def sit(self):
          """模拟小狗被命令蹲下"""
          print(self.name.title() + " is now sitting.")

      def roll_over(self):
          """模拟小狗被命令打滚"""
          print(self.name.title() + " rolled over!")
#+END_SRC

#+RESULTS:

创建实例

#+BEGIN_SRC python :results output :noweb yes
  <<dog_class>>

  my_dog = Dog('while', 6)

  print("My dog's name is " + my_dog.name.title() + ".")
  print("My dog is " + str(my_dog.age) + " years old")
#+END_SRC

#+RESULTS:
: My dog's name is While.
: My dog is 6 years old

调用方法

#+BEGIN_SRC python :results output :noweb yes
  <<dog_class>>

  my_dog = Dog('while', 6)
  my_dog.sit()
  my_dog.roll_over()
#+END_SRC

#+RESULTS:
: While is now sitting.
: While rolled over!

创建多个实例

#+BEGIN_SRC python :results output :noweb yes
  <<dog_class>>

  my_dog = Dog('willie', 6)
  your_dog = Dog('lucy', 3)

  print("My dog's name is " + my_dog.name.title() + ".")
  print("My dog is " + str(my_dog.age) + " years old.")
  my_dog.sit()

  print("\nYour dog's name is " + your_dog.name.title() + ".")
  print("Your dog is " + str(your_dog.age) + " years old.")
  your_dog.sit()
#+END_SRC

#+RESULTS:
: My dog's name is Willie.
: My dog is 6 years old.
: Willie is now sitting.
:
: Your dog's name is Lucy.
: Your dog is 3 years old.
: Lucy is now sitting.

*** Exercises

**** 9-1 餐馆

#+NAME: restaurant_class
#+BEGIN_SRC python :results output
  class Restaurant():
      """模拟餐馆的类"""

      def __init__(self, restaurant_name, cuisine_type):
          """初始化属性 restaurant_name 和 cuisine_type"""
          self.restaurant_name = restaurant_name
          self.cuisine_type = cuisine_type

      def describe_restaurant(self):
          """描述餐馆"""
          print("The restaurant's name is " + self.restaurant_name.title())
          print("The restaurant's cuisine is " + self.cuisine_type.title())

      def open_restaurant(self):
          """指出餐馆正在营业"""
          print("The restaurant is opening.")
#+END_SRC

#+RESULTS: restaurant_class

#+BEGIN_SRC python :results output :noweb yes
  <<restaurant_class>>

  restaurant = Restaurant('Eleven', 'Chinese')
  print(restaurant.restaurant_name)
  print(restaurant.cuisine_type)
  restaurant.describe_restaurant()
  restaurant.open_restaurant()
#+END_SRC

#+RESULTS:
: Eleven
: Chinese
: The restaurant's name is Eleven
: The restaurant's cuisine is Chinese
: The restaurant is opening.

**** 9-2 三家餐馆

#+BEGIN_SRC python :results output :noweb yes
  <<restaurant_class>>

  restaurant_0 = Restaurant('foo', 'Chinese')
  restaurant_1 = Restaurant('bar', 'Mexico')
  restaurant_2 = Restaurant('baz', 'Lanzhou')

  restaurant_0.describe_restaurant()
  restaurant_1.describe_restaurant()
  restaurant_2.describe_restaurant()
#+END_SRC

#+RESULTS:
: The restaurant's name is Foo
: The restaurant's cuisine is Chinese
: The restaurant's name is Bar
: The restaurant's cuisine is Mexico
: The restaurant's name is Baz
: The restaurant's cuisine is Lanzhou

**** 9-3 用户

#+BEGIN_SRC python :results output
  class User():
      """表示用户的类"""

      def __init__(self, first_name, last_name):
          """初始化属性 first_name 和 last_name"""
          self.first_name = first_name
          self.last_name = last_name

      def describe_user(self):
          """描述用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("The user's full name is " + full_name.title())

      def greet_user(self):
          """问候用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("Welcome, " + full_name.title())

  me = User('chunyang', 'xu')
  bob = User('Bob', 'lee')
  jayce = User('jacye', 'zoo')

  for user in [me, bob, jayce]:
      print()
      user.describe_user()
      user.greet_user()
#+END_SRC

#+RESULTS:
:
: The user's full name is Chunyang Xu
: Welcome, Chunyang Xu
:
: The user's full name is Bob Lee
: Welcome, Bob Lee
:
: The user's full name is Jacye Zoo
: Welcome, Jacye Zoo

*** 使用类和实例

#+NAME: car_class
#+BEGIN_SRC python :session :results value pp
  class Car():
      """一次描述汽车的简单尝试"""

      def __init__(self, make, model, year):
          """初始化汽车的属性"""
          self.make = make
          self.model = model
          self.year = year

      def get_descriptive_name(self):
          """返回整洁的描述性信息"""
          long_name = str(self.year) + ' ' + self.make + ' ' + self.model
          return long_name
#+END_SRC

#+BEGIN_SRC python :results output :noweb yes
  <<car_class>>

  my_new_car = Car('audi', 'a4', '2016')
  print(my_new_car.get_descriptive_name())
#+END_SRC

#+RESULTS:
: 2016 audi a4

#+NAME: car_class2
#+BEGIN_SRC python
  class Car():
      """一次描述汽车的简单尝试"""

      def __init__(self, make, model, year):
          """初始化汽车的属性"""
          self.make = make
          self.model = model
          self.year = year
          self.odometer_reading = 0

      def get_descriptive_name(self):
          """返回整洁的描述性信息"""
          long_name = str(self.year) + ' ' + self.make + ' ' + self.model
          return long_name

      def read_odometer(self):
          """打印一条指出汽车里程的消息"""
          print("This car has " + str(self.odometer_reading) + " miles on it.")

#+END_SRC

#+BEGIN_SRC python :results output :noweb yes
  <<car_class2>>

  my_new_car = Car('audi', 'a4', '2016')
  print(my_new_car.get_descriptive_name())
  my_new_car.read_odometer()
#+END_SRC

#+RESULTS:
: 2016 audi a4
: This car has 0 miles on it.

直接修改属性的值

#+begin_src python :results output :noweb yes
  <<car_class2>>

  my_new_car = Car('audi', 'a4', '2016')
  print(my_new_car.get_descriptive_name())

  my_new_car.odometer_reading = 23
  my_new_car.read_odometer()
#+end_src

#+RESULTS:
: 2016 audi a4
: This car has 23 miles on it.

通过方法更新属性值

#+BEGIN_SRC python :results output
  class Car():
      """一次描述汽车的简单尝试"""

      def __init__(self, make, model, year):
          """初始化汽车的属性"""
          self.make = make
          self.model = model
          self.year = year
          self.odometer_reading = 0

      def get_descriptive_name(self):
          """返回整洁的描述性信息"""
          long_name = str(self.year) + ' ' + self.make + ' ' + self.model
          return long_name

      def read_odometer(self):
          """打印一条指出汽车里程的消息"""
          print("This car has " + str(self.odometer_reading) + " miles on it.")

      def update_odometer(self, mileage):
          """将里程读数设置成指定的值"""
          self.odometer_reading = mileage

  my_new_car = Car('audi', 'a4', 2016)
  print(my_new_car.get_descriptive_name())

  my_new_car.update_odometer(23)
  my_new_car.read_odometer()
#+END_SRC

#+RESULTS:
: 2016 audi a4
: This car has 23 miles on it.

阻止人回调里程数

#+BEGIN_SRC python :results output
  class Car():
      """一次描述汽车的简单尝试"""

      def __init__(self, make, model, year):
          """初始化汽车的属性"""
          self.make = make
          self.model = model
          self.year = year
          self.odometer_reading = 0

      def get_descriptive_name(self):
          """返回整洁的描述性信息"""
          long_name = str(self.year) + ' ' + self.make + ' ' + self.model
          return long_name

      def read_odometer(self):
          """打印一条指出汽车里程的消息"""
          print("This car has " + str(self.odometer_reading) + " miles on it.")

      def update_odometer(self, mileage):
          """将里程读数设置成指定的值"""
          if mileage >= self.odometer_reading:
              self.odometer_reading = mileage
          else:
              print("You can't roll back an odometer!")

  my_used_car = Car('subaru', 'outback', 2013)
  print(my_used_car.get_descriptive_name())

  my_used_car.update_odometer(23500)
  my_used_car.read_odometer()

  my_used_car.update_odometer(100)
  my_used_car.read_odometer()
#+END_SRC

#+RESULTS:
: 2013 subaru outback
: This car has 23500 miles on it.
: You can't roll back an odometer!
: This car has 23500 miles on it.

通过方法对属性的值进行递增

#+BEGIN_SRC python :results output
  class Car():
      """一次描述汽车的简单尝试"""

      def __init__(self, make, model, year):
          """初始化汽车的属性"""
          self.make = make
          self.model = model
          self.year = year
          self.odometer_reading = 0

      def get_descriptive_name(self):
          """返回整洁的描述性信息"""
          long_name = str(self.year) + ' ' + self.make + ' ' + self.model
          return long_name

      def read_odometer(self):
          """打印一条指出汽车里程的消息"""
          print("This car has " + str(self.odometer_reading) + " miles on it.")

      def update_odometer(self, mileage):
          """将里程读数设置成指定的值"""
          if mileage >= self.odometer_reading:
              self.odometer_reading = mileage
          else:
              print("You can't roll back an odometer!")

      def increment_odometer(self, miles):
          """将里程表读数增加指定的量"""
          self.odometer_reading += miles

  my_used_car = Car('subaru', 'outback', 2013)
  print(my_used_car.get_descriptive_name())

  my_used_car.update_odometer(23500)
  my_used_car.read_odometer()

  my_used_car.increment_odometer(100)
  my_used_car.read_odometer()
#+END_SRC

#+RESULTS:
: 2013 subaru outback
: This car has 23500 miles on it.
: This car has 23600 miles on it.

*** Exercises

**** 9-4 就餐人数

#+BEGIN_SRC python :results output
  class Restaurant():
      """模拟餐馆的类"""

      def __init__(self, restaurant_name, cuisine_type):
          """初始化属性 restaurant_name 和 cuisine_type"""
          self.restaurant_name = restaurant_name
          self.cuisine_type = cuisine_type
          self.number_served = 0

      def describe_restaurant(self):
          """描述餐馆"""
          print("The restaurant's name is " + self.restaurant_name.title())
          print("The restaurant's cuisine is " + self.cuisine_type.title())

      def open_restaurant(self):
          """指出餐馆正在营业"""
          print("The restaurant is opening.")

      def set_number_served(self, number_served):
          """设置就过餐的人数"""
          self.number_served = number_served

      def increment_number_served(self, number):
          """递增就餐过的人数"""
          self.number_served += number


  my_restaurant = Restaurant('Never come back', 'Korea')
  print(str(my_restaurant.number_served) + " people had eaten in this restaruant.")

  my_restaurant.number_served = 1000
  print(str(my_restaurant.number_served) + " people had eaten in this restaruant.")

  my_restaurant.set_number_served(1200)
  print(str(my_restaurant.number_served) + " people had eaten in this restaruant.")

  my_restaurant.increment_number_served(100)
  print(str(my_restaurant.number_served) + " people had eaten in this restaruant.")
#+END_SRC

#+RESULTS:
: 0 people had eaten in this restaruant.
: 100 people had eaten in this restaruant.

**** 9-5 尝试登录次数

#+BEGIN_SRC python :results output
  class User():
      """表示用户的类"""

      def __init__(self, first_name, last_name):
          """初始化属性 first_name 和 last_name"""
          self.first_name = first_name
          self.last_name = last_name
          self.login_attempts = 0

      def increment_login_attempts(self):
          """尝试登录的次数增加一"""
          self.login_attempts += 1

      def reset_login_attempt(self):
          """重置尝试登录的次数"""
          self.login_attempts = 0

      def describe_user(self):
          """描述用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("The user's full name is " + full_name.title())

      def greet_user(self):
          """问候用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("Welcome, " + full_name.title())

  me = User('chunyang', 'xu')

  me.increment_login_attempts()
  me.increment_login_attempts()
  me.increment_login_attempts()
  me.increment_login_attempts()
  print(str(me.login_attempts))

  me.reset_login_attempt()
  print(str(me.login_attempts))
#+END_SRC

#+RESULTS:
: 4
: 0

*** 继承

#+NAME: car_class_3
#+BEGIN_SRC python
  class Car():
      """一次模拟汽车的简单尝试"""

      def __init__(self, make, model, year):
          """初始化汽车属性"""
          self.make = make
          self.model = model
          self.year = year
          self.odometer_reading = 0

      def get_descriptive_name(self):
          """返回整洁的名字"""
          long_name = str(self.year) + ' ' + self.make + ' ' + self.model
          return long_name.title()

      def read_odometer(self):
          """打印里程数"""
          print('This car has ' + str(self.odometer_reading) + ' miles on it.')

      def update_odometer(self, mileage):
          """更新里程数"""
          if mileage >= self.odometer_reading:
              self.odometer_reading = mileage
          else:
              print("You can't roll back odometer!")

      def increment_odometer(self, miles):
          """增加里程数"""
          self.odometer_reading += miles
#+END_SRC

定义子类

#+BEGIN_SRC python :results output :noweb yes
  <<car_class_3>>

  class ElectricCar(Car):
      """电动汽车的独特之处"""

      def __init__(self, make, model, year):
          """初始化父类的属性"""
          super().__init__(make, model, year)

  my_tesla = ElectricCar('tesla', 'model s', 2016)
  print(my_tesla.get_descriptive_name())
#+END_SRC

#+RESULTS:
: 2016 Tesla Model S

给子类定义属性和方法

#+BEGIN_SRC python :results output :noweb yes
  <<car_class_3>>

  class ElectricCar(Car):
      """电动汽车"""

      def __init__(self, make, model, year):
          """
          电动汽车的独特之处
          初始化父类的属性，再初始化电动汽车特有的属性
          """
          super().__init__(make, model, year)
          self.battery_size = 70

      def describe_battery(self):
          """打印一条描述电瓶容量的消息"""
          print("This car has a " + str(self.battery_size) + "-kWh battery.")

  my_tesla = ElectricCar('tesla', 'model s', 2016)
  print(my_tesla.get_descriptive_name())
  my_tesla.describe_battery()
#+END_SRC

#+RESULTS:
: 2016 Tesla Model S
: This car has a 70-kWh battery.

重写父类的方法

将实例用作属性

#+BEGIN_SRC python :results output
  class Car():
      """汽车"""

      def __init__(self, make, model, year):
          """初始化汽车的属性"""
          self.make = make
          self.model = model
          self.year = year

      def get_descriptive_name(self):
          """返回整洁的描述性信息"""
          long_name = str(self.year) + ' ' + self.make + ' ' + self.model
          return long_name

  class Battery():
      """电瓶"""

      def __init__(self, battery_size=70):
          """初始化电瓶的属性"""
          self.battery_size = battery_size

      def describe_battery(self):
          """打印一条描述电瓶容量的消息"""
          print("This car has a " + str(self.battery_size) + "-kWh batter.")

      def get_range(self):
          """打印一条消息，指出电瓶的续航里程"""
          if self.battery_size == 70:
              range = 240
          elif self.battery_size == 85:
              range = 270

          message = "This car can go approximately " + str(range)
          message += " miles on a full charge."
          print(message)

  class ElectricCar(Car):
      """电动汽车"""

      def __init__(self, make, model, year):
          """
          初始化父类的属性，再初始化电动汽车特有的属性
          """
          super().__init__(make, model, year)
          self.battery = Battery()

  my_tesla = ElectricCar('tesla', 'model s', 2016)

  print(my_tesla.get_descriptive_name())
  my_tesla.battery.describe_battery()
  my_tesla.battery.get_range()
#+END_SRC

#+RESULTS:
: 2016 tesla model s
: This car has a 70-kWh batter.

*** Exercises

**** 9-6 冰淇淋小店

#+BEGIN_SRC python :results output
  class Restaurant():
      """模拟餐馆的类"""

      def __init__(self, restaurant_name, cuisine_type):
          """初始化属性 restaurant_name 和 cuisine_type"""
          self.restaurant_name = restaurant_name
          self.cuisine_type = cuisine_type

      def describe_restaurant(self):
          """描述餐馆"""
          print("The restaurant's name is " + self.restaurant_name.title())
          print("The restaurant's cuisine is " + self.cuisine_type.title())

      def open_restaurant(self):
          """指出餐馆正在营业"""
          print("The restaurant is opening.")

  class IceCreamStand(Restaurant):
      """冰淇淋小店"""

      def __init__(self, restaurant_name, flavors):
          """初始化属性"""
          super().__init__(restaurant_name, "icecream")
          self.flavors = flavors

      def show_flavors(self):
          """显示口味"""
          print("\n这家冰淇淋店有以下口味：")
          for flavor in self.flavors:
              print(flavor)

  flavors = ['blackberry', 'cookie dough', 'green tea']
  my_icecream_stand = IceCreamStand('Scoopy', flavors)
  my_icecream_stand.show_flavors()
  flavors = ['nut']
  my_icecream_stand.show_flavors()
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE

这家冰淇淋店有以下口味：
blackberry
cookie dough
green tea

这家冰淇淋店有以下口味：
blackberry
cookie dough
green tea
#+END_EXAMPLE

**** 9-7 管理员

#+BEGIN_SRC python :session :results output
  class User():
      """表示用户的类"""

      def __init__(self, first_name, last_name):
          """初始化属性 first_name 和 last_name"""
          self.first_name = first_name
          self.last_name = last_name

      def describe_user(self):
          """描述用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("The user's full name is " + full_name.title())

      def greet_user(self):
          """问候用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("Welcome, " + full_name.title())

  class Admin(User):
      """管理员"""

      def __init__(self, first_name, last_name,
                   privileges=['can add post', 'can delete post',
                               'can ban user']):
          """初始化属性"""
          super().__init__(first_name, last_name)
          self.privileges = privileges

      def show_privileges(self):
          """显示权限"""
          print("\nThis admin has the following privileges:")
          for privilege in self.privileges:
              print('- ' + privilege)

  chunyang = Admin('Chunyang', 'xu')
  chunyang.show_privileges()
#+END_SRC

#+RESULTS:
: This admin has the following privileges:
: - can add post
: - can delete post
: - can ban user

**** 9-8 权限

#+BEGIN_SRC python :session :results output
  class User():
      """表示用户的类"""

      def __init__(self, first_name, last_name):
          """初始化属性 first_name 和 last_name"""
          self.first_name = first_name
          self.last_name = last_name

      def describe_user(self):
          """描述用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("The user's full name is " + full_name.title())

      def greet_user(self):
          """问候用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("Welcome, " + full_name.title())

  class Privileges():
      """表示权限的类"""

      def __init__(self, privileges):
          self.privileges = privileges

      def show_privileges(self):
          """显示权限"""
          print("\nThis admin has the following privileges:")
          for privilege in self.privileges:
              print('- ' + privilege)

  class Admin(User):
      """管理员"""

      def __init__(self, first_name, last_name, privileges):
          """初始化属性"""
          super().__init__(first_name, last_name)
          self.privileges = Privileges(privileges)


  chunyang = Admin('Chunyang', 'xu',
                   privileges=['can add post', 'can delete post',
                               'can ban user'])
  chunyang.privileges.show_privileges()
#+END_SRC

#+RESULTS:
: This admin has the following privileges:
: - can add post
: - can delete post
: - can ban user


**** 9-9 电瓶升级

#+BEGIN_SRC python :results output
  class Car():
      """汽车"""

      def __init__(self, make, model, year):
          """初始化汽车的属性"""
          self.make = make
          self.model = model
          self.year = year

      def get_descriptive_name(self):
          """返回整洁的描述性信息"""
          long_name = str(self.year) + ' ' + self.make + ' ' + self.model
          return long_name

  class Battery():
      """电瓶"""

      def __init__(self, battery_size=70):
          """初始化电瓶的属性"""
          self.battery_size = battery_size

      def describe_battery(self):
          """打印一条描述电瓶容量的消息"""
          print("This car has a " + str(self.battery_size) + "-kWh batter.")

      def get_range(self):
          """打印一条消息，指出电瓶的续航里程"""
          if self.battery_size == 70:
              range = 240
          elif self.battery_size == 85:
              range = 270

          message = "This car can go approximately " + str(range)
          message += " miles on a full charge."
          print(message)

      def upgrade_battery(self):
          """把电瓶容量设成 85"""
          if self.battery_size != 85:
              self.battery_size = 85

  class ElectricCar(Car):
      """电动汽车"""

      def __init__(self, make, model, year):
          """
          初始化父类的属性，再初始化电动汽车特有的属性
          """
          super().__init__(make, model, year)
          self.battery = Battery()

  my_tesla = ElectricCar('tesla', 'model s', 2016)
  my_tesla.battery.get_range()
  my_tesla.battery.upgrade_battery()
  my_tesla.battery.get_range()
#+END_SRC

*** 导入类

car.py

#+BEGIN_SRC python :tangle car.py
  """一个可用于表示汽车的类"""

  class Car():
      """一次模拟汽车的简单尝试"""

      def __init__(self, make, model, year):
          """初始化描述汽车的属性"""
          self.make = make
          self.model = model
          self.year = year

      def get_descriptive_name(self):
          """返回整洁的描述性名称"""
          long_name = str(self.year) + ' ' + self.make + ' ' + self.model
          return long_name

      def read_odometer(self):
          """打印一条消息，指出汽车的里程数"""
          print("This car has " + str(self.odometer_reading) + " miles on it.")

      def update_odometer(self, mileage):
          """
          将里程表读数设置为指定值
          拒绝将里程表往回拨
          """
          if mileage >= self.odometer_reading:
              self.odometer_reading = mileage
          else:
              print("You can't roll back an odometer")

      def increment_odometer(self, miles):
          """将里程表读数增加指定的量"""
          self.odometer_reading += miles

  class Battery():
      """一次模拟电动汽车电瓶的简单尝试"""

      def __init__(self, battery_size=70):
          """初始化电瓶的属性"""
          self.battery_size = battery_size

      def describe_battery(self):
          """打印一条描述电瓶容量的消息"""
          print("This car has a " + str(self.battery_size) + "-kWh batter.")

      def get_range(self):
          """打印一条描述电瓶续航里程的消息"""
          if self.battery_size == 70:
              range = 240
          elif self.battery_size == 85:
              range = 270

          message = "This car can go approximately " + str(range)
          message += " miles on a full charge."
          print(message)

  class ElectricCar(Car):
      """模拟电动汽车的独特之处"""

      def __init__(self, make, model, year):
          """
          初始化父类的属性，再初始化电动汽车独有的属性
          """
          super().__init__(make, model, year)
          self.battery = Battery()
#+END_SRC

my_car.py

#+BEGIN_SRC python :results output
  from car import Car

  my_new_car = Car('audi', 'a4', 2016)
  print(my_new_car.get_descriptive_name())

  my_new_car.odometer_reading = 23
  my_new_car.read_odometer()
#+END_SRC

#+RESULTS: my_car.py
: 2016 audi a4
: This car has 23 miles on it.

my_electric_car.py

#+BEGIN_SRC python :results output
  from car import ElectricCar

  my_tesla = ElectricCar('tesla', 'model s', 2016)

  print(my_tesla.get_descriptive_name())
  my_tesla.battery.describe_battery()
  my_tesla.battery.get_range()
#+END_SRC

my_cars.py

#+BEGIN_SRC python :results output
  from car import Car, ElectricCar

  my_beetle = Car('volkswagen', 'beetle', 2016)
  print(my_beetle.get_descriptive_name())

  my_tesla = ElectricCar('tesla', 'roadster', 2016)
  print(my_tesla.get_descriptive_name())
#+END_SRC

*** Exercises

**** 9-10 导入 Restaurant 类

restaurant.py

#+BEGIN_SRC python :tangle restaurant.py
  class Restaurant():
      """模拟餐馆的类"""

      def __init__(self, restaurant_name, cuisine_type):
          """初始化属性 restaurant_name 和 cuisine_type"""
          self.restaurant_name = restaurant_name
          self.cuisine_type = cuisine_type

      def describe_restaurant(self):
          """描述餐馆"""
          print("The restaurant's name is " + self.restaurant_name.title())
          print("The restaurant's cuisine is " + self.cuisine_type.title())

      def open_restaurant(self):
          """指出餐馆正在营业"""
          print("The restaurant is opening.")
#+END_SRC

#+BEGIN_SRC python :results output
  from restaurant import Restaurant

  my_restaurant = Restaurant("Mike and Carry's restaurant", 'chinese')
  my_restaurant.describe_restaurant()
#+END_SRC

#+RESULTS:
: The restaurant's name is Mike And Carry'S Restaurant
: The restaurant's cuisine is Chinese


**** 9-11 导入 admin 类

user.py

#+BEGIN_SRC python :tangle user.py
  """描述用户的类"""

  class User():
      """表示用户的类"""

      def __init__(self, first_name, last_name):
          """初始化属性 first_name 和 last_name"""
          self.first_name = first_name
          self.last_name = last_name

      def describe_user(self):
          """描述用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("The user's full name is " + full_name.title())

      def greet_user(self):
          """问候用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("Welcome, " + full_name.title())

  class Privileges():
      """表示权限的类"""

      def __init__(self, privileges):
          self.privileges = privileges

      def show_privileges(self):
          """显示权限"""
          print("\nThis admin has the following privileges:")
          for privilege in self.privileges:
              print('- ' + privilege)

  class Admin(User):
      """管理员"""

      def __init__(self, first_name, last_name, privileges):
          """初始化属性"""
          super().__init__(first_name, last_name)
          self.privileges = Privileges(privileges)
#+END_SRC

#+BEGIN_SRC python :session :results output
  from user import Admin

  chunyang = Admin('chunyang', 'xu', ['update a post', 'delete a post',
                                      'ban a user'])
  chunyang.privileges.show_privileges()
#+END_SRC

#+RESULTS:
: This admin has the following privileges:
: - update a post
: - delete a post
: - ban a user

**** 9-12 多个模块

user2.py

#+BEGIN_SRC python :tangle user2.py
  """描述用户的类"""

  class User():
      """表示用户的类"""

      def __init__(self, first_name, last_name):
          """初始化属性 first_name 和 last_name"""
          self.first_name = first_name
          self.last_name = last_name

      def describe_user(self):
          """描述用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("The user's full name is " + full_name.title())

      def greet_user(self):
          """问候用户"""
          full_name = self.first_name + ' ' + self.last_name
          print("Welcome, " + full_name.title())
#+END_SRC

admin.py

#+BEGIN_SRC python :tangle admin.py
  """描述管理员的类"""

  from user2 import User

  class Privileges():
      """表示权限的类"""

      def __init__(self, privileges):
          self.privileges = privileges

      def show_privileges(self):
          """显示权限"""
          print("\nThis admin has the following privileges:")
          for privilege in self.privileges:
              print('- ' + privilege)

  class Admin(User):
      """管理员"""

      def __init__(self, first_name, last_name, privileges):
          """初始化属性"""
          super().__init__(first_name, last_name)
          self.privileges = Privileges(privileges)
#+END_SRC

#+BEGIN_SRC python :results output
  from admin import Admin

  me = Admin('chunyang', 'xu', ['delete a post', 'update a post',
                                'ban a user'])
  me.privileges.show_privileges()
#+END_SRC

#+RESULTS:
:
: This admin has the following privileges:
: - delete a post
: - update a post
: - ban a user

*** Python 标准库

favorite_languages.py

#+BEGIN_SRC python :results output
  from collections import OrderedDict

  favorite_languages = OrderedDict()

  favorite_languages['jen'] = 'python'
  favorite_languages['sarah'] = 'c'
  favorite_languages['edward'] = 'ruby'
  favorite_languages['phil'] = 'python'

  for name, language in favorite_languages.items():
      print(name.title() + "'s favorite language is " +
            language.title() + '.')
#+END_SRC

#+RESULTS:
: Jen's favorite language is Python.
: Sarah's favorite language is C.
: Edward's favorite language is Ruby.
: Phil's favorite language is Python.

*** Exercises

**** 9-13 使用 OrderDict

#+BEGIN_SRC python :session :results output
  from collections import OrderedDict

  programming_terms = OrderedDict()

  programming_terms['sorted'] = 'Return a sorted copy of list'
  programming_terms['set'] = 'Remove dup from list'
  programming_terms['for'] = 'Loop list'
  programming_terms['del'] = 'remove element from list, dict'

  for term, meaning in programming_terms.items():
      print(term + ": " + meaning)
#+END_SRC

**** 9-14 骰子

#+BEGIN_SRC python :results output
  from random import randint

  class Die():
      """一个表示骰子的类"""

      def __init__(self, sides=6):
          """初始化骰子的属性"""
          self.sides = sides

      def roll_die(self):
          """掷骰子，并打印结果"""
          side = randint(1, self.sides)
          print(side)

      def roll_die_10(self):
          """把这个骰子掷 10 次"""
          repeated_times = 10
          while repeated_times:
              self.roll_die()
              repeated_times -= 1

  die = Die()
  die.roll_die_10()

  die_10 = Die(sides=10)
  die_10.roll_die_10()

  die_20 = Die(sides=20)
  die_20.roll_die_10()
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
2
6
6
4
2
2
5
2
1
1
6
3
1
9
9
9
5
1
10
6
15
19
2
1
17
17
6
10
1
9
#+END_EXAMPLE

**** 9-15 Python Module of the Week

[[https://pymotw.com/3/][Python 3 Module of the Week — PyMOTW 3]]

***** collections OrderedDict

#+begin_quote
Under Python 3.6, the built-in dict does track insertion order,
although this behavior is a side-effect of an implementation change
and should not be relied on.
#+end_quote

#+BEGIN_SRC python :results output
  from collections import OrderedDict

  print("Regular dictionary:")
  d = {}
  d['a'] = 'A'
  d['b'] = 'B'
  d['c'] = 'C'

  for k, v in d.items():
      print(k, v)

  print("\nOrderDict:")
  d = OrderedDict()
  d['a'] = 'A'
  d['b'] = 'B'
  d['c'] = 'C'

  for k, v in d.items():
      print(k, v)
#+END_SRC

#+RESULTS:
: Regular dictionary:
: a A
: b B
: c C
:
: OrderDict:
: a A
: b B
: c C

***** collections Counter

#+BEGIN_SRC python :results output
  from collections import Counter

  c = Counter("abcdefgabcabcaba")
  print(c.most_common(3))
#+END_SRC

#+RESULTS:
: [('a', 5), ('b', 4), ('c', 3)]

*** 类编码风格

1. 类名应采用驼峰命名法
2. 类应该有 docstring
3. 模块也应该有 docstring
4. 在类中，可使用一个空行来分隔方法
5. 在模块中，可使用两个空行来分隔类
6. 需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的
   import语句，再添加一个空行，然后编写导入你自己编写的模块的import语句

** Chapter 10

pi_digits.txt

#+begin_src text :tangle pi_digits.txt
3.1415926535
  8979323846
  2643383279
#+end_src

读这个文件

#+BEGIN_SRC python :results output
  with open('pi_digits.txt') as file_object:
      contents = file_object.read()
      print(contents)
#+END_SRC

#+RESULTS:
: 3.1415926535
:   8979323846
:   2643383279
: 

逐行读取

#+BEGIN_SRC python :results output
  filename = 'pi_digits.txt'

  with open(filename) as file_object:
      for line in file_object:
          print(line)
#+END_SRC

#+RESULTS:
: 3.1415926535
: 
:   8979323846
: 
:   2643383279
: 

去掉多余的换行

#+BEGIN_SRC python :results output
  filename = 'pi_digits.txt'

  with open(filename) as file_object:
      for line in file_object:
          print(line.rstrip())
#+END_SRC

#+RESULTS:
: 3.1415926535
:   8979323846
:   2643383279

用方法 readlines 将文件内容的各行存入列表

#+BEGIN_SRC python :results output
  filename = 'pi_digits.txt'

  with open(filename) as file_object:
      lines = file_object.readlines()

  for line in lines:
      print(line.rstrip())
#+END_SRC

#+RESULTS:
: 3.1415926535
:   8979323846
:   2643383279

使用文件的内容

#+NAME: pi_string.py
#+BEGIN_SRC python :results output
  filename = 'pi_digits.txt'

  pi_string = ''
  with open(filename) as file_object:
      for line in file_object:
          pi_string += line.strip()

  print(pi_string)
  print(len(pi_string))
#+END_SRC

#+RESULTS: pi_string.py
: 3.141592653589793238462643383279
: 32

一个更大的文件

#+BEGIN_SRC python :results output
  filename = 'pi_million_digits.txt'

  with open(filename) as file_object:
      lines = file_object.readlines()

  pi_string = ''
  for line in lines:
      pi_string += line.strip()
    
  print(pi_string[:52] + '...')
  print(len(pi_string))
#+END_SRC

#+RESULTS:
: 3.14159265358979323846264338327950288419716939937510...
: 1000002

圆周率中包含你的生日吗？

#+BEGIN_SRC python :results output
  filename = 'pi_million_digits.txt'

  with open(filename) as file_object:
      lines = file_object.readlines()

  pi_string = ''
  for line in lines:
      pi_string += line.strip()

  birthday = input("Enter your birthday, in the form mmddyy: ")
  if birthday in pi_string:
      print("Your birthday appears in the first million digits of pi!")
  else:
      print("You birthday does not appear in the first million digits of pi.")
#+END_SRC

*** Exercises

**** 10-1 Python 学习笔记

learning_python.txt

#+begin_src text :tangle learning_python.txt
In Python you can use 'in' to check if a string is substring of another string
In Python you can use 'strip' to remove leading and trailing whitespace from a string
In Python you can define a function
In Python you can call a function
In Python you can define function with any length of arguments
In Python you can read a file at at time or line by line
In Python you can define a Class
In Python you can define a Class by inheriting another Class
#+end_src

#+BEGIN_SRC python :results output
  filename = 'learning_python.txt'

  print("1. 一次性读取整个文件:")
  with open(filename) as file_object:
      contents = file_object.read()
      print(contents.rstrip())

  print("\n2. 遍历文件对象")
  with open(filename) as file_object:
      for line in file_object:
          print(line.rstrip())

  print("\n3. 用一个列表")
  with open(filename) as file_object:
      lines = file_object.readlines()

  for line in lines:
      print(line.rstrip())
#+END_SRC

**** 10-2 C 语言学习笔记

#+BEGIN_SRC python :results output
  filename = 'learning_python.txt'

  with open(filename) as file_object:
      contents = file_object.read()
      contents = contents.replace('Python', 'C')
      print(contents.rstrip())
#+END_SRC

#+RESULTS:
: In C you can use 'in' to check if a string is substring of another string
: In C you can use 'strip' to remove leading and trailing whitespace from a string
: In C you can define a function
: In C you can call a function
: In C you can define function with any length of arguments
: In C you can read a file at at time or line by line
: In C you can define a Class
: In C you can define a Class by inheriting another Class

*** 写入文件

写入空白文件

#+BEGIN_SRC python :results silent
  filename = 'programming.txt'

  with open(filename, 'w') as file_object:
      file_object.write("I love programming.")
#+END_SRC

写入多行

#+BEGIN_SRC python :session :results value pp
  filename = 'programming.txt'

  with open(filename, 'w') as file_object:
      file_object.write("I love programming.\n")
      file_object.write("I love creating new games.\n")
#+END_SRC

#+RESULTS:
: 27

附加到文件

#+BEGIN_SRC python :session :results value pp
  filename = 'programming.txt'

  with open(filename, 'a') as file_object:
      file_object.write("I also love finding meanings in large database.\n")
      file_object.write("I love creating apps that can run in a browser.\n")
#+END_SRC

*** Exercises

**** 10-3 访客

#+BEGIN_SRC python
  name = input("Enter your name: ")

  filename = 'guest.txt'

  with open(filename, 'w') as file_object:
      file_object.write(name)
#+END_SRC

**** 10-4 访客名单

#+BEGIN_SRC python
  while True:
      prompt = "Enter you name:"
      prompt += "\n(enter 'q' at any time to quit) "
      name = input(prompt)
      if name == 'q':
          break
      print("Hello, " + name.title() + "!")
      with open('guest_book.txt', 'a') as file_object:
          file_object.write(name.title() + '\n')
#+END_SRC

**** 10-5 关于编程的调查

#+BEGIN_SRC python
  filename = 'programming_reasons.txt'

  while True:
      reason = input(
          "Why do you love programming?\n(Enter 'q' at any time to quit) ")
      if reason == 'q':
          break
      with open(filename, 'a') as file_object:
          file_object.write(reason.strip() + '\n')
#+END_SRC

*** 异常

处理除零异常

#+BEGIN_SRC python :results output
  try:
      print(5/0)
  except ZeroDivisionError:
      print("You can't divide by zero!")
#+END_SRC

#+RESULTS:
: You can't divide by zero!

try ... execpt ... else ...

#+BEGIN_SRC python
  print("Give me two numbers, and I'll divide them")
  print("Enter 'q' to quit.")

  while True:
      first_name = input("\nFirst number: ")
      if first_name == 'q':
          break
      second_number = input("Second number: ")
      if second_number == 'q':
          break
      try:
          answer = int(first_name) / int(second_number)
      except ZeroDivisionError:
          print("You can't divide by 0!")
      else:
          print(answer)
#+END_SRC


处理 FileNotFoundError

#+BEGIN_SRC python :results output
  filename = 'alice.txt'

  try:
      with open(filename) as file_object:
          contents = file_object.read()
  except FileNotFoundError:
      msg = "Sorry, the file " + filename + " does not exist."
      print(msg)
#+END_SRC

#+RESULTS:
: Sorry, the file alice.txt does not exist.

分析文本

#+BEGIN_SRC python :results output
  filename = 'alice.txt'

  try:
      with open(filename) as f_obj:
          contents = f_obj.read()
  except FileNotFoundError:
      msg = "Sorry, the file " + filename + " does not exist"
      print(msg)
  else:
      words = contents.split()
      num_words = len(words)
      print("The file " + filename + " has about " + str(num_words) + " words.")
    
#+END_SRC

#+RESULTS:
: The file alice.txt has about 29461 words.

word_count.py

#+BEGIN_SRC python :results output
  def count_words(filename):
      """计算一个文件大致包含多少个单词"""

      try:
          with open(filename) as f_obj:
              contents = f_obj.read()
      except FileNotFoundError:
          msg = "Sorry, the file " + filename + " does not exist."
          print(msg)
      else:
          words = contents.split()
          num_words = len(words)
          print("The file " + filename + " has about " + str(num_words) + " words")

  filename = 'alice.txt'
  count_words(filename)
#+END_SRC

#+RESULTS:
: The file alice.txt has about 29461 words

#+BEGIN_SRC python :results output
  def count_words(filename):
      """计算一个文件大致包含多少个单词"""

      try:
          with open(filename) as f_obj:
              contents = f_obj.read()
      except FileNotFoundError:
          msg = "Sorry, the file " + filename + " does not exist."
          print(msg)
      else:
          words = contents.split()
          num_words = len(words)
          print("The file " + filename + " has about " + str(num_words) + " words")

  filenames = ['alice.txt', 'siddhartha.txt', 'moby_dick.txt', 'little_women.txt']
  for filename in filenames:
      count_words(filename)
#+END_SRC

#+RESULTS:
: The file alice.txt has about 29461 words
: Sorry, the file siddhartha.txt does not exist.
: The file moby_dick.txt has about 215136 words
: The file little_women.txt has about 189079 words

pass

*** Exercises

**** 10-6 加法运算

#+BEGIN_SRC python
  first_number = input("First Number: ")
  second_number = input("Second Number: ")

  try:
      first_number = int(first_number)
      second_number = int(second_number)
  except ValueError:
      print("Not a number")
  else:
      print(str(first_number + second_number))
#+END_SRC

**** 10-7 加法计算器

#+BEGIN_SRC python :session :results value pp
  print("Enter two number, and I'll add them")
  print("enter 'q' to quit")

  while True:
      print()
      first_number = input("First number: ")
      if first_number == 'q':
          break
      try:
          first_number = int(first_number)
      except ValueError:
          msg = first_number + " is not number"
          print(msg)
          continue

      second_number = input("Second number: ")
      if second_number == 'q':
          break
      try:
          second_number = int(second_number)
      except ValueError:
          msg = second_number + " is not a number"
          print(msg)
          continue

      result = first_number + second_number
      print(str(first_number) + " + " + str(second_number) + " = " + str(result))
#+END_SRC

**** 10-8 猫和狗

cats.txt

#+begin_src text :tangle cats.txt
Tom
Garfield
Snowball V
Doraemon
#+end_src

dogs.txt

#+begin_src text :tangle dogs.txt
Snoopy
Santa's Little Helper
Cosmo
#+end_src

#+BEGIN_SRC python :results output
  def print_file(filename):
      """Print file's contents"""
      try:
          with open(filename) as f_obj:
              contents = f_obj.read()
      except FileNotFoundError:
          msg = filename + ' does not exist'
          print(msg)
      else:
          print(contents.rstrip())

  print_file('cats.txt')
  print_file('dogs.txt')
#+END_SRC

#+RESULTS:
: Tom
: Garfield
: Snowball V
: Doraemon
: Snoopy
: Santa's Little Helper
: Cosmo

**** 10-9 沉默的猫和狗

#+BEGIN_SRC python :results output
  def print_file(filename):
      """Print file's contents"""
      try:
          with open(filename) as f_obj:
              contents = f_obj.read()
      except FileNotFoundError:
          pass
      else:
          print(contents.rstrip())

  print_file('birds.txt')
  print_file('cats.txt')
  print_file('dogs.txt')
#+END_SRC

#+RESULTS:
: Tom
: Garfield
: Snowball V
: Doraemon
: Snoopy
: Santa's Little Helper
: Cosmo


**** 10-10 常见单词

#+BEGIN_SRC python :results output
  def count_word_in_file(filename, word):
      """显示单词在文件中出现的次数"""
      try:
          with open(filename) as f_obj:
              contents = f_obj.read()
      except FileNotFoundError:
          msg = filename + " does not exist."
          print(msg)
      else:
          words = contents.lower().split()
          word_count = words.count(word)
          print(filename + " has about " + str(len(words)) + " words and '" +
                word + "' occurs " + str(word_count) + " times.")

  filenames = ['moby_dick.txt', 'little_women.txt', 'non-exist.txt', 'alice.txt']

  for filename in filenames:
      count_word_in_file(filename, 'the')
#+END_SRC

#+RESULTS:
: moby_dick.txt has about 215136 words and 'the' occurs 14412 times.
: little_women.txt has about 189079 words and 'the' occurs 7622 times.
: non-exist.txt does not exist.
: alice.txt has about 29461 words and 'the' occurs 1777 times.

*** 存储数据

number_writer.py

#+BEGIN_SRC python :results output
  import json

  numbers = [2, 3, 5, 7, 11, 13]

  filename = 'numbers.json'

  with open(filename, 'w') as f_obj:
      json.dump(numbers, f_obj)
#+END_SRC

number_reader.py

#+BEGIN_SRC python :results output
  import json

  filename = 'numbers.json'
  with open(filename) as f_obj:
      numbers = json.load(f_obj)

  print(numbers)
#+END_SRC

#+RESULTS:
: [2, 3, 5, 7, 11, 13]

保存和读取用户生成的数据

remember_me.py

#+BEGIN_SRC python
  import json

  username = input("What is your name? ")

  filename = 'username.json'
  with open(filename, 'w') as f_obj:
      json.dump(username, f_obj)
      print("We'll remember you when you come back, " + username + ".")
#+END_SRC

great_user.py

#+BEGIN_SRC python :results output
  import json

  filename = 'username.json'

  with open(filename) as f_obj:
      username = json.load(f_obj)
      print("Welcome back " + username + "!")
#+END_SRC

#+RESULTS:
: Welcome back xuchunyang!

remember_me.py

#+BEGIN_SRC python
  import json

  filename = 'username.json'

  try:
      with open(filename) as f_obj:
          username = json.load(f_obj)
  except FileNotFoundError:
      username = input("What's your name? ")
      with open(filename, 'w') as f_obj:
          json.dump(username, f_obj)
          print("We'll remember you when you come back, " + username + ".")
  else:
      print("Welcome back, " + username + "!")
#+END_SRC

重构

#+NAME: remember_me.py
#+BEGIN_SRC python
  import json

  def greet_user():
      """问候用户，并指出其名字"""
      filename = 'username.json'
      try:
          with open(filename) as f_obj:
              username = json.load(f_obj)
      except FileNotFoundError:
          username = input("What's your name? ")
          with open(filename, 'w') as f_obj:
              json.dump(username, f_obj)
              print("We will remember you when you come back, " + username + ".")
      else:
          print("Welcome back, " + username + "!")

  greet_user()
#+END_SRC

继续重构，分解 greet_user

#+BEGIN_SRC python
  import json

  def get_stored_username():
      """如果存储了用户名，就获取它"""
      filename = 'username.json'
      try:
          with open(filename) as f_obj:
              username = json.load(f_obj)
      except FileNotFoundError:
          return None
      else:
          return username

  def greet_user():
      """问候用户，并指出姓名"""
      username = get_stored_username()
      if username:
          print("Welcome back, " + username + "!")
      else:
          username = input("What is your name? ")
          filename = 'username.json'
          with open(filename, 'w') as f_obj:
              json.dump(username, f_obj)
              print("We'll remember you when you come back, " + username + "!")

  greet_user()
#+END_SRC

继续重构，继续分解 greet_user

#+BEGIN_SRC python
  import json

  def get_stored_username():
      """如果存储了用户名，就获取它"""
      filename = 'username.json'
      try:
          with open(filename) as f_obj:
              username = json.load(f_obj)
      except FileNotFoundError:
          return None
      else:
          return username

  def get_new_username():
      """提示输入用户名"""
      username = input("What's your name? ")
      filenmae = 'username.json'
      with open(filenmae, 'w') as f_obj:
          json.dump(username, f_obj)
      return username

  def greet_user():
      """问候用户，并指出姓名"""
      username = get_stored_username()
      if username:
          print("Welcome back, " + username + "!")
      else:
          username = get_new_username()
          print("We'll remember you when you come back, " + username + "!")

  greet_user()
#+END_SRC

*** Exercises

**** 10-11 喜欢的数字

favorite_number_writer.py

#+BEGIN_SRC python
  import json

  while True:
      favorite_number = input("Enter your favorite number: ")
      try:
          favorite_number = int(favorite_number)
      except ValueError:
          print(favorite_number + "is not a number, please try again")
          continue
      else:
          break

  filename = 'favorite_number.json'
  with open(filename, 'w') as f_obj:
      json.dump(favorite_number, f_obj)
      print("We will remember your favorite number, " + str(favorite_number))
#+END_SRC

favorite_number_reader.py

#+BEGIN_SRC python :results output
  import json

  filename = 'favorite_number.json'
  with open(filename) as f_obj:
      favorite_number = json.load(f_obj)
      print("I know your favorite number! It's " + str(favorite_number))
#+END_SRC

#+RESULTS:
: I know your favorite number! It's 12

**** 10-12 记住喜欢的数字

#+BEGIN_SRC python
  import json

  def get_stored_favorite_number():
      """如果存储了最喜欢的数字，就提取它"""
      filename = 'favorite_number.json'
      try:
          with open(filename) as f_obj:
              favorite_number = json.load(f_obj)
      except FileNotFoundError:
          return None
      else:
          return favorite_number

  def get_new_favorite_number():
      """提示输入新的最喜欢的数字"""
      filename = 'favorite_number.json'
      while True:
          favorite_number = input("What's your favorite number? ")
          try:
              favorite_number = int(favorite_number)
          except ValueError:
              print(favorite_number + "is not a number, please try again")
              continue
          else:
              with open(filename, 'w') as f_obj:
                  json.dump(favorite_number, f_obj)
              return favorite_number

  favorite_number = get_stored_favorite_number()
  if favorite_number:
      print("I know your favorite number! It's " + str(favorite_number))
  else:
      favorite_number = get_new_favorite_number()
      print("We'll remember your favorite number, " + str(favorite_number))
#+END_SRC

**** 10-13 验证用户

remember_me.py

#+BEGIN_SRC python
  import json

  def get_stored_username():
      """如果存储了用户名，就获取它"""
      filename = 'username.json'
      try:
          with open(filename) as f_obj:
              username = json.load(f_obj)
      except FileNotFoundError:
          return None
      else:
          return username

  def get_new_username():
      """提示输入用户名"""
      username = input("What's your name? ")
      filenmae = 'username.json'
      with open(filenmae, 'w') as f_obj:
          json.dump(username, f_obj)
      return username

  def greet_user():
      """问候用户，并指出姓名"""
      username = get_stored_username()
      if username:
          response = input("Are you " + username + "? (y or n) ")
          if response == 'y':
              print("Welcome back, " + username + "!")
          else:
              username = get_new_username()
              print("We'll remember you when you come back, " + username + "!")
      else:
          username = get_new_username()
          print("We'll remember you when you come back, " + username + "!")

  greet_user()
#+END_SRC

** Chapter 11

测试函数

name_function.py

#+NAME: name_function.py
#+BEGIN_SRC python :tangle name_function.py
  def get_formatted_name(first, last, middle=''):
      """返回一个整洁的全名"""
      if middle:
          full_name = first + ' ' + middle + ' ' + last
      else:
          full_name = first + ' ' + last
      return full_name.title()
#+END_SRC

names.py

#+NAME: names.py
#+begin_src python
  from name_function import get_formatted_name

  print("Enter 'q' at any time to quit.")
  while True:
      first = input("\nPlease give me a first name: ")
      if first == 'q':
          break
      last = input("Please give me a last name: ")
      if last == 'q':
          break

      formatted_name = get_formatted_name(first, last)
      print("\tNeatly formatted name: " + formatted_name + '.')
#+end_src

test_name_function.py

#+BEGIN_SRC python :tangle test_name_function.py
  import unittest
  from name_function import get_formatted_name

  class NamesTestCase(unittest.TestCase):
      """测试name_function.py"""

      def test_first_last_name(self):
          """能够正确处理像 Janis Jophlin 这样的姓名吗?"""
          formatted_name = get_formatted_name('janis', 'joplin')
          self.assertEqual(formatted_name, 'Janis Joplin')

      def test_first_last_middle_name(self):
          """测试能够处理像 Wolfgang Amadeus Mozart这样的姓名吗？"""
          formatted_name = get_formatted_name('wolfgang', 'mozart', 'amadeus')
          self.assertEqual(formatted_name, 'Wolfgang Amadeus Mozart')

  unittest.main()
#+END_SRC

#+begin_src sh :results output
python test_name_function.py 2>&1 || true
#+end_src

#+RESULTS:
: ..
: ----------------------------------------------------------------------
: Ran 2 tests in 0.000s
: 
: OK

*** Exercises

**** 11-1 城市和国家

city_functions.py

#+BEGIN_SRC python :tangle city_functions.py
  def describe_city(city, country):
      """返回像 Beijing, China 这样的城市名"""
      formatted_city_name = city.title() + ', ' + country.title()
      return formatted_city_name
#+END_SRC

test_cities.py

#+BEGIN_SRC python :tangle test_cities.py
  import unittest
  from city_functions import describe_city

  class CitiesTestCase(unittest.TestCase):
      """测试 city_functions.py"""

      def test_city_country(self):
          """能够正确处理 Beijing, China 这样的城市名吗?"""
          description = describe_city('beijing', 'china')
          self.assertEqual(description, 'Beijing, China')

  unittest.main()
#+END_SRC

#+begin_src sh :results output
python test_cities.py 2>&1 || true
#+end_src

#+RESULTS:
: .
: ----------------------------------------------------------------------
: Ran 1 test in 0.000s
: 
: OK

**** 11-2 人口数量

city_functions.py

#+BEGIN_SRC python :tangle city_functions.py
  def describe_city(city, country, population=None):
      """返回 City, Country - population xxx 的字符串"""
      description = city.title() + ', ' + country.title()
      if population:
          description += ' - ' + 'population ' + str(population)
      return description
#+END_SRC

test_cities.py

#+BEGIN_SRC python :tangle test_cities.py
  import unittest
  from city_functions import describe_city

  class CitiesTestCase(unittest.TestCase):
      """测试 city_functions.py"""

      def test_city_country(self):
          """能够正确处理 Beijing, China 这样的城市名吗?"""
          description = describe_city('beijing', 'china')
          self.assertEqual(description, 'Beijing, China')

      def test_city_country_population(self):
          """测试正确处理 Beijing, China - population 21710000 这样的城市吗?"""
          description = describe_city('beijing', 'china', 21710000)
          self.assertEqual(description, 'Beijing, China - population 21710000')

  unittest.main()
#+END_SRC

#+begin_src sh :results output
python test_cities.py 2>&1 || true
#+end_src

#+RESULTS:
: ..
: ----------------------------------------------------------------------
: Ran 2 tests in 0.000s
: 
: OK

*** 测试类

survey.py

#+BEGIN_SRC python :tangle survey.py
  class AnonymousSurvey():
      """收集匿名调查问卷的答案"""

      def __init__(self, question):
          """存储一个问题，并为存储答案做准备"""
          self.question = question
          self.responses = []

      def show_question(self):
          """显示调查问卷"""
          print(self.question)

      def store_response(self, new_response):
          """存储单份调查问卷"""
          self.responses.append(new_response)

      def show_results(self):
          """显示收集到的所有答案"""
          print("Survey result:")
          for response in self.responses:
              print('- ' + response)
#+END_SRC

language_survey.py

#+BEGIN_SRC python :tangle language_survey.py
  from survey import AnonymousSurvey

  question = "What language did you first learn to speak?"
  my_survey = AnonymousSurvey(question)

  my_survey.show_question()
  print("Enter 'q' at any time to quit.\n")

  while True:
      response = input("Language: ")
      if response == 'q':
          break
      my_survey.store_response(response)

  print("\nThank you to everyone who participated in the survey!")
  my_survey.show_results()
#+END_SRC

test_survey.py

#+BEGIN_SRC python :tangle test_survey.py
  import unittest
  from survey import AnonymousSurvey

  class TestAnonymousSurvey(unittest.TestCase):
      """针对 AnonymousSurvey 类的测试"""

      def test_store_single_response(self):
          """测试单个答案会被妥善地存储"""
          question = "What language did you first learn to speak?"
          my_survey = AnonymousSurvey(question)
          my_survey.store_response('English')

          self.assertIn('English', my_survey.responses)

      def test_store_three_responses(self):
          """测试三个答案会被妥善地存储"""
          question = "What language did you first learn to speak?"
          my_survey = AnonymousSurvey(question)
          responses = ['Chinese', 'English', 'Spanish']
          for response in responses:
              my_survey.store_response(response)

          for response in responses:
              self.assertIn(response, my_survey.responses)

  unittest.main()
#+END_SRC

#+begin_src sh :results output
python test_survey.py 2>&1 || true
#+end_src

#+RESULTS:
: ..
: ----------------------------------------------------------------------
: Ran 2 tests in 0.000s
: 
: OK

setUp()

#+BEGIN_SRC python :tangle test_survey2.py
  import unittest
  from survey import AnonymousSurvey

  class TestAnonymousSurvey(unittest.TestCase):
      """针对 AnonymousSurvey 类的测试"""

      def setUp(self):
          """
          创建一个调查对象和一组答案，供使用的测试方法使用
          """
          question = "What language did you first learn to speak?"
          self.my_survey = AnonymousSurvey(question)
          self.responses = ['English', 'Chinese', 'Spanish']

      def test_store_single_response(self):
          """测试单个答案会被妥善地存储"""
          self.my_survey.store_response(self.responses[0])
          self.assertIn(self.responses[0], self.my_survey.responses)

      def test_store_three_responses(self):
          """测试三个答案会被妥善地存储"""
          for response in self.responses:
              self.my_survey.store_response(response)
          for response in self.responses:
              self.assertIn(response, self.my_survey.responses)

  unittest.main()
#+END_SRC

#+begin_src sh :results output
python test_survey2.py 2>&1 || true
#+end_src

#+RESULTS:
: ..
: ----------------------------------------------------------------------
: Ran 2 tests in 0.000s
: 
: OK

*** Exercises

**** 11-3 雇员

#+BEGIN_SRC python :tangle employee.py
  class Employee():
      """雇员类"""

      def __init__(self, given_name, family_name, salary):
          """初始化属性"""
          self.given_name = given_name
          self.family_name = family_name
          self.salary = salary

      def give_raise(self, mount=5000):
          """加薪"""
          self.salary += mount

  import unittest

  class TestEmployee(unittest.TestCase):
      """针对 Employee 类的测试"""

      def setUp(self):
          """创建一个雇员对象"""
          self.initial_salary = 4000
          self.me = Employee('chunyang', 'xu', self.initial_salary)

      def test_give_default_raise(self):
          """测试 give_raise 的默认值"""
          self.me.give_raise()
          self.assertEqual(self.initial_salary + 5000, self.me.salary)

      def test_give_custom_raise(self):
          """测试 give_raise 的定制参数"""
          self.me.give_raise(100)
          self.assertEqual(self.initial_salary + 100, self.me.salary)


  unittest.main()
#+END_SRC

#+begin_src sh :results output
python employee.py 2>&1 || true
#+end_src

#+RESULTS:
: ..
: ----------------------------------------------------------------------
: Ran 2 tests in 0.000s
: 
: OK

#+begin_quote
如果你在项目中包含了初步测试，其他程序员将更敬佩你，他们将能够更得心应
手地尝试使用你编写的代码，也更愿意与你合作开发项目。
#+end_quote

#+begin_quote
在项目早期，不要试图去编写全覆盖的测试用例，除非有充分的理由这样做。
#+end_quote

* Part two

** 项目1 外星人入侵

*** Chapter 12

**** Exercises

***** 12-1 蓝色天空

#+BEGIN_SRC python
  import sys

  import pygame

  pygame.init()
  screen = pygame.display.set_mode((800, 600))
  # 蓝色天空
  bg_color = (150, 190, 220)

  while True:
      for event in pygame.event.get():
          if event.type == pygame.QUIT:
              sys.exit()

      screen.fill(bg_color)
      pygame.display.flip()
#+END_SRC

***** 12-2 游戏角色

#+BEGIN_SRC python :tangle alien_invasion/tom.py
  import sys

  import pygame

  pygame.init()
  screen = pygame.display.set_mode((800, 600))

  image = pygame.image.load('images/Tom.bmp')
  rect = image.get_rect()
  screen_rect = screen.get_rect()

  rect.centerx = screen_rect.centerx
  rect.bottom = screen_rect.centery

  while True:
      for event in pygame.event.get():
          if event.type == pygame.QUIT:
              sys.exit()

      screen.blit(image, rect)

      pygame.display.flip()
#+END_SRC
