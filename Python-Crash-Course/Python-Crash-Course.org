#+TITLE: Notes for Python Crash Course
#+DATE: <2018-04-16 Mon>

* Part one

** Chapter 1

#+BEGIN_SRC python :session :results output
print("Hello Python world!")
#+END_SRC

#+RESULTS:
: Hello Python world!

#+begin_quote
在文件名和文件夹名中，最好使用小写字母，并使用下划线来表示空格，因为这
是Python采用的命名约定
#+end_quote

可能是因为 Python 标识符中不能用 dash

*** Exercises

**** 1-1 浏览 https://www.python.org

Python 水平越高，这个网址越有用

**** 1-1 输入错误

我能理解函数未定义、括号引号不匹配这样的语法错误，并且能看懂报错信息。

#+begin_src sh :results output
python -c 'printf("Hello Python world!")' 2>&1 || true
#+end_src

#+RESULTS:
: Traceback (most recent call last):
:   File "<string>", line 1, in <module>
: NameError: name 'printf' is not defined

#+begin_src sh :results output
python -c 'print(x"Hello Python world!")' 2>&1 || true
#+end_src

#+RESULTS:
:   File "<string>", line 1
:     print(x"Hello Python world!")
:                                ^
: SyntaxError: invalid syntax

#+begin_src sh :results output
python -c 'print("Hello)' 2>&1 || true
#+end_src

#+RESULTS:
:   File "<string>", line 1
:     print("Hello)
:                 ^
: SyntaxError: EOL while scanning string literal

#+begin_src sh :results output
python -c 'print("Hello"' 2>&1 || true
#+end_src

#+RESULTS:
:   File "<string>", line 1
:     print("Hello"
:                 ^
: SyntaxError: unexpected EOF while parsing

**** 1-3 无穷的技艺

三个我想创建的程序：

1. 朗文词典第五版的 Emacs 浏览器（主要用 Python 实现，参考用 PyQt 写的 LDOCE5 Viewer）
2. 个人网站或者博客（用 Flask 之类的实现）
3. 写一个类似 Spotlight 之类的切换器，除了打开应用，还能切换 Chrome 标签和 Emacs Buffer

** Chapter 2

#+begin_src python :session :results output
  message = "Hello Python world!"
  print(message)

  message = "Hello Python Crash Course world!"
  print(message)
#+end_src

#+RESULTS:
: Hello Python world!
: Hello Python Crash Course world!

命名规则：[a-zA-Z0-9_]+ and not [0-9]+.+ and not 内置关键词和函数名

#+begin_src python :session :results output
  def check_name(name):
      import re
      import keyword
      import builtins
      if not re.fullmatch(r"[a-zA-Z0-9_]+", name):
          print("Error: {} contains invalid character".format(name))
      elif re.match(r"[0-0]", name):
          print("Error: {} starts with number".format(name))
      elif name in keyword.kwlist:
          # https://docs.python.org/3/library/stdtypes.html
          print("Error: {} is keyword name".format(name))
      elif name in dir(builtins):
          print("Error: {} is builtins function name".format(name))
      else:
          print("OK: {} is vaild variable name".format(name))

  for name in ["my-name", "my_name", "1name", "name1", "ABC123", "_______", "print", "import"]:
      check_name(name)
#+end_src

#+RESULTS:
: Error: my-name contains invalid character
: OK: my_name is vaild variable name
: OK: 1name is vaild variable name
: OK: name1 is vaild variable name
: OK: ABC123 is vaild variable name
: OK: _______ is vaild variable name
: Error: print is builtins function name
: Error: import is keyword name

*** Exercises

**** 2-1 简单消息

#+BEGIN_SRC python :session :results output
  message = "世界，你好！"
  print(message)
#+END_SRC

#+RESULTS:
: 世界，你好！

**** 2-2 多条简单消息

#+BEGIN_SRC python :session :results output
  message = "世界，你好！"
  print(message)

  message = "Python，你好！"
  print(message)
#+END_SRC

#+RESULTS:
: 世界，你好！
: Python，你好！

*** 2.3 字符串

**** 方法

「方法」或 Method 指：

#+begin_quote
方法title()出现在这个变量的后面。方法是Python可对数据执行的操作
#+end_quote

比如，title() 是 name 的方法

#+BEGIN_SRC python :session :results output
name = "xu chunyang"
print(name.title())
#+END_SRC

#+RESULTS:
: Xu Chunyang

#+BEGIN_SRC python :session :results output
  my_name = "Xu Chunyang"
  print(my_name.upper())
  print(my_name.lower())
#+END_SRC

#+RESULTS:
: XU CHUNYANG
: xu chunyang

**** 合并、拼接字符串

用 + 拼接多个字符串

#+BEGIN_SRC python :session :results output
  first_name = "chunyang"
  last_name = "xu"
  full_name = first_name + " " + last_name

  print(full_name)
#+END_SRC

#+RESULTS:
: Chunyang Xu

举例

#+BEGIN_SRC python :session :results output
  first_name = "chunyang"
  last_name = "xu"
  full_name = first_name + " " + last_name

  print("Hello, " + full_name.title() + "!")
#+END_SRC

#+RESULTS:
: Hello, Chunyang Xu!

再简化

#+BEGIN_SRC python :session :results output
  first_name = "chunyang"
  last_name = "xu"
  full_name = first_name + " " + last_name

  message = "Hello, " + full_name.title() + "!"
  print(message)
#+END_SRC

#+RESULTS:
: Hello, Chunyang Xu!

**** 用空格、制表符和换行添加空白

「空白」不仅仅指空格，而表示的包括 space、tab 和 newline 在内的一类字符。

#+begin_quote
在编程中，空白泛指任何非打印字符，如空格、制表符和换行符
#+end_quote

#+BEGIN_SRC python :session :results output
print("Python")
print("\tPython")
print("Language:\nPython\nC\nJava\nJavaScript")
#+END_SRC

#+RESULTS:
: Python
: 	Python
: Language:
: Python
: C
: Java
: JavaScript

#+BEGIN_SRC python :session :results output
print("Language:\n\tPython\n\tC\n\tJava\n\tJavaScript")
#+END_SRC

#+RESULTS:
: Language:
: 	Python
: 	C
: 	Java
: 	JavaScript

**** 删除空白

空白字符（Whitespace）具体指哪些字符？

[[https://en.wikipedia.org/wiki/Whitespace_character][Whitespace character - Wikipedia]]

#+BEGIN_SRC python :session :results value pp
  favorite_language = "python "
  favorite_language
#+END_SRC

#+RESULTS:
: 'python '

#+BEGIN_SRC python :session :results value pp
  favorite_language.rstrip()
#+END_SRC

#+RESULTS:
: 'python'

#+BEGIN_SRC python :session :results value pp
favorite_language
#+END_SRC

#+RESULTS:
: 'python '

~rstrip()~ 不会就地修改变量，而是返回一个新值

#+BEGIN_SRC python :session :results value pp
  favorite_language = "python "
  favorite_language = favorite_language.rstrip()
  favorite_language
#+END_SRC

#+RESULTS:
: 'python'

lstrip strip rstrip

#+BEGIN_SRC python :session :results value pp
  favorite_language = " python "
  favorite_language.rstrip(), \
      favorite_language.lstrip(), \
      favorite_language.strip()
#+END_SRC

#+RESULTS:
: (' python', 'python ', 'python')

避免 String 引号不匹配的语法错误

#+BEGIN_SRC python :session :results output
message = "one of Python's strengths is its diverse community."
print(message)
#+END_SRC

#+RESULTS:
: one of Python's strengths is its diverse community.

错误写法

#+BEGIN_SRC python :session :results value pp
message = 'one of Python's strengths is its diverse community.'
print(message)
#+END_SRC

*** Exercises

**** 2-3 个性化消息

#+BEGIN_SRC python :session :results output :tangle ask_name.py
name = "Eric"
message = "Hello " + name + ", would you like to learn some Python today?"

print(message)
#+END_SRC

#+RESULTS:
: Hello Eric, would you like to learn some Python today?

**** 2-4 调整名字的大小写

#+BEGIN_SRC python :session :results output :tangle name_cases.py
  name = "Jerry"
  print(name.lower())
  print(name.upper())
  print(name.capitalize())
#+END_SRC

#+RESULTS:
: jerry
: JERRY
: Jerry

**** 2-5 名言

#+BEGIN_SRC python :session :results output :tangle quote.py
print('鲁迅曾经说过, "躲进小楼成一统，管他冬夏与春秋。"')
#+END_SRC

#+RESULTS:
: 鲁迅曾经说过, "躲进小楼成一统，管他冬夏与春秋。"

**** 2-6 名言2

#+BEGIN_SRC python :session :results output :tangle quote2.py
name = "鲁迅"
quote = "躲进小楼成一统，管他冬夏与春秋。"

message = name + '曾经说过, "' + quote + '"'
print(message)
#+END_SRC

#+RESULTS:
: 鲁迅曾经说过, "躲进小楼成一统，管他冬夏与春秋。"

**** 2-7 剔除人名中的空白

#+BEGIN_SRC python :session :results output :tangle name_strip.py
name = "\t\nXu Chunyang\n"
print(name)
print(name.lstrip())
print(name.rstrip())
print(name.strip())
#+END_SRC

#+RESULTS:
: Xu Chunyang

*** 数字

+ - * / ** (次方)

#+BEGIN_SRC python :session :results value pp
1+2, 3 - 1, 2 * 3, 1/2, 2**10
#+END_SRC

#+RESULTS:
: (3, 2, 6, 0.5, 1024)

带小数的数字称为「浮点数」

浮点数运算结果不确定

#+BEGIN_SRC python :session :results value pp
0.2 + 0.1, 3 * 0.1
#+END_SRC

#+RESULTS:
: (0.30000000000000004, 0.30000000000000004)

用 ~str()~ 把数字转换成字符串

#+BEGIN_SRC python :session :results output
age = 23
message = "Happy " + str(age) + "rd Birthday!"

print(message)
#+END_SRC

#+RESULTS:
: Happy 23rd Birthday!

*** Exercises

**** 2-8 数字8

#+BEGIN_SRC python :session :results output
print(5 + 3)
print(10 - 2)
print(2 * 4)
print(16 / 2)
#+END_SRC

#+RESULTS:
: 8
: 8
: 8
: 8.0

**** 2-19 最喜欢的数字

#+BEGIN_SRC python :session :results output
  favorite_number = 0
  message = "My favorite number is " + str(favorite_number)

  print(message)
#+END_SRC

#+RESULTS:
: My favorite number is 0

*** 注释

#+BEGIN_SRC python :session :results output
  # 向大家问好
  print("Hello Python people!")
#+END_SRC

#+RESULTS:
: Hello Python people!

**** Exercises

***** 2-10 添加注释

一

#+BEGIN_SRC python :session :results output
  # Author: xuchunyang
  # Date: 2018-04-16

  # Print "Hello World!"
  print("Hello World!")
#+END_SRC

#+RESULTS:
: Hello World!

二

#+BEGIN_SRC python :session :results output
  # Authro: xuchunyang
  # Date: 2018-04-16
  # 打印一条消息

  message = "one of Python's strengths is its diverse community."
  print(message)
#+END_SRC

#+RESULTS:
: one of Python's strengths is its diverse community.


***** 2-11 Python 之禅

#+BEGIN_SRC python :session :results output
import this
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
#+END_EXAMPLE

** Chapter 3

列表的写法

#+BEGIN_SRC python :session :results output
bicycles = ['trek', 'cannondale', 'redline', 'specialized']
print(bicycles)
#+END_SRC

#+RESULTS:
: ['trek', 'cannondale', 'redline', 'specialized']

访问列表元素

#+BEGIN_SRC python :session :results output
print(bicycles[0])
print(bicycles[0].title())
#+END_SRC

#+RESULTS:
: trek
: Trek

列表的索引从 0 算起

#+BEGIN_SRC python :session :results output
bicycles = ['trek', 'cannondale', 'redline', 'specialized']
print(bicycles[0])
print(bicycles[1])
print(bicycles[2])
print(bicycles[3])
#+END_SRC

#+RESULTS:
: trek
: cannondale
: redline
: specialized

从后向前索引

#+BEGIN_SRC python :session :results value pp
bicycles[-1], bicycles[-2], bicycles[-3], bicycles[-4]
#+END_SRC

#+RESULTS:
: ('specialized', 'redline', 'cannondale', 'trek')

*** Exercises

**** 3-1 姓名

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Charlie"]
  print(names[0])
  print(names[1])
  print(names[2])
  print(names[3])
#+END_SRC

#+RESULTS:
: Tom
: Jerry
: Snoopy
: Charlie

**** 3-2 问候语

#+BEGIN_SRC python :session :results output
names = ["Tom", "Jerry", "Snoopy", "Charlie"]
print("Hello, " + names[0] + "!")
print("Hello, " + names[1] + "!")
print("Hello, " + names[2] + "!")
print("Hello, " + names[3] + "!")
#+END_SRC

#+RESULTS:
: Hello, Tom!
: Hello, Jerry!
: Hello, Snoopy!
: Hello, Charlie!

**** 3-3 自己的列表

#+BEGIN_SRC python :session :results output
  commuting_methods = ["walk", "swim", "bike", "bus", "subway", "fly"]

  print("I would like to " + commuting_methods[0] + " to work.")
  print("I would like to learn " + commuting_methods[1] + "ing.")
  print("I also would like to go to walk by " + commuting_methods[-2] + ", because I like subway.")
  print("I don't like to take a " + commuting_methods[3] + ", because I don't know when to get out")
#+END_SRC

#+RESULTS:
: I would like to walk to work.
: I would like to learn swiming.
: I also would like to go to walk by subway, because I like subway.
: I don't like to take a bus, because I don't know when to get out

*** 修改、添加和删除元素

用 append() 添加一个元素到末尾

#+BEGIN_SRC python :session :results output
  motorcycles = ['honda', 'yamaha', 'suzuki']
  print(motorcycles)

  motorcycles.append('ducati')
  print(motorcycles)
#+END_SRC

#+RESULTS:
: ['honda', 'yamaha', 'suzuki']
: ['honda', 'yamaha', 'suzuki', 'ducati']

#+BEGIN_SRC python :session :results output
  motorcycles = []

  motorcycles.append('honda')
  motorcycles.append('yamaha')
  motorcycles.append('suzuki')

  print(motorcycles)
#+END_SRC

#+RESULTS:
: ['honda', 'yamaha', 'suzuki']

用 insert() 在任意位置加入新元素

#+BEGIN_SRC python :session :results output
  motorcycles = ['本田', '雅马哈', '铃木']

  motorcycles.insert(0, '杜卡迪')
  print(motorcycles)
#+END_SRC

#+RESULTS:
: ['杜卡迪', '本田', '雅马哈', '铃木']

用 del 根据位置（索引）删除元素

#+BEGIN_SRC python :session :results output
  motorcycles = ['本田', '雅马哈', '铃木']
  print(motorcycles)

  del motorcycles[0]
  print(motorcycles)
#+END_SRC

#+RESULTS:
: ['本田', '雅马哈', '铃木']
: ['雅马哈', '铃木']

用 pop() 方法删除最后一个元素，并且返回这个元素的值

#+BEGIN_SRC python :session :results output
  motorcycles = ['本田', '雅马哈', '铃木']
  print(motorcycles)

  popped_motorcycle = motorcycles.pop()
  print(motorcycles)
  print(popped_motorcycle)
#+END_SRC

#+RESULTS:
: ['本田', '雅马哈', '铃木']
: ['本田', '雅马哈']
: 铃木

pop() 方法能删除任意位置的元素

#+BEGIN_SRC python :session :results output
  motorcycles = ['本田', '雅马哈', '铃木']

  first_owned = motorcycles.pop(0)
  print("The first motorcycle I own was a " + first_owned.title() + ".")
#+END_SRC

#+RESULTS:
: The first motorcycle I own was a 本田.

del 语句 V.S. pop() 方法

#+begin_quote
如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del语句；
如果你要在删除元素后还能继续使用它，就使用方法pop()。
#+end_quote


用 remove() 根据值删除元素

#+BEGIN_SRC python :session :results output
  motorcycles = ['本田', '雅马哈', '铃木', '杜卡迪']
  print(motorcycles)

  motorcycles.remove('杜卡迪')
  print(motorcycles)
#+END_SRC

#+RESULTS:
: ['本田', '雅马哈', '铃木', '杜卡迪']
: ['本田', '雅马哈', '铃木']

#+begin_quote
注意　方法remove()只删除第一个指定的值。如果要删除的值可能在列表中出现
多次，就需要使用循环来判断是否删除了所有这样的值。
#+end_quote

*** Exercises

**** 3-4 嘉宾名单

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Racket"]
  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")
#+END_SRC

#+RESULTS:
: Tom, would you like to have dinner with me?
: Jerry, would you like to have dinner with me?
: Snoopy, would you like to have dinner with me?
: Racket, would you like to have dinner with me?

**** 3-5 修改嘉宾名单

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Racket"]
  print(names[0] + ", would you like to have dinner with me?")
  print(names[1] + ", would you like to have dinner with me?")
  print(names[2] + ", would you like to have dinner with me?")
  print(names[3] + ", would you like to have dinner with me?")

  nope = "Snoopy"
  names.remove(nope)
  names.append("Gammy")
  print(names[0] + ", would you like to have dinner with me?")
  print(names[1] + ", would you like to have dinner with me?")
  print(names[2] + ", would you like to have dinner with me?")
  print(names[3] + ", would you like to have dinner with me?")

  print(nope + " said he don't have time thus can't accept my invitation.")
#+END_SRC

#+RESULTS:
: Tom, would you like to have dinner with me?
: Jerry, would you like to have dinner with me?
: Snoopy, would you like to have dinner with me?
: Racket, would you like to have dinner with me?
: Tom, would you like to have dinner with me?
: Jerry, would you like to have dinner with me?
: Racket, would you like to have dinner with me?
: Gammy, would you like to have dinner with me?
: Snoopy said he don't have time thus can't accept my invitation.

**** 3-6 添加嘉宾

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Racket"]
  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")

  print()
  print("I have found a bigger dinner table for more people")
  print()
  names.insert(0, "Lisa")
  names.insert(3, "Homer")
  names.append("Bart")

  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")
  print(names[4].title() + ", would you like to have dinner with me?")
  print(names[5].title() + ", would you like to have dinner with me?")
  print(names[6].title() + ", would you like to have dinner with me?")
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Tom, would you like to have dinner with me?
Jerry, would you like to have dinner with me?
Snoopy, would you like to have dinner with me?
Racket, would you like to have dinner with me?

I have found a bigger dinner table for more people

Lisa, would you like to have dinner with me?
Tom, would you like to have dinner with me?
Jerry, would you like to have dinner with me?
Homer, would you like to have dinner with me?
Snoopy, would you like to have dinner with me?
Racket, would you like to have dinner with me?
Bart, would you like to have dinner with me?
#+END_EXAMPLE

**** 3-7 缩减名单

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Racket"]
  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")

  print()
  print("I have found a bigger dinner table for more people")
  print()
  names.insert(0, "Lisa")
  names.insert(3, "Homer")
  names.append("Bart")

  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")
  print(names[4].title() + ", would you like to have dinner with me?")
  print(names[5].title() + ", would you like to have dinner with me?")
  print(names[6].title() + ", would you like to have dinner with me?")

  print()
  print("Oops, I can invite just two")
  print()

  print(names.pop() + ", I am sorry")
  print(names.pop() + ", I am sorry")
  print(names.pop() + ", I am sorry")
  print(names.pop() + ", I am sorry")
  print(names.pop() + ", I am sorry")

  print(names[0] + ", you are still invited.")
  print(names[1] + ", you are still invited.")

  del names[0]
  del names[0]
  print(names)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Tom, would you like to have dinner with me?
Jerry, would you like to have dinner with me?
Snoopy, would you like to have dinner with me?
Racket, would you like to have dinner with me?

I have found a bigger dinner table for more people

Lisa, would you like to have dinner with me?
Tom, would you like to have dinner with me?
Jerry, would you like to have dinner with me?
Homer, would you like to have dinner with me?
Snoopy, would you like to have dinner with me?
Racket, would you like to have dinner with me?
Bart, would you like to have dinner with me?

Oops, I can invite just two

Bart, I am sorry
Racket, I am sorry
Snoopy, I am sorry
Homer, I am sorry
Jerry, I am sorry
Lisa, you are still invited.
Tom, you are still invited.
[]
#+END_EXAMPLE

*** 组织列表

用 sort() 就地排序

#+BEGIN_SRC python :session :results value pp
  cars = ['bwm', 'audi', 'toyota', 'subaru']
  cars.sort()
  cars
#+END_SRC

#+RESULTS:
: ['audi', 'bwm', 'subaru', 'toyota']


#+BEGIN_SRC python :session :results value pp
  cars = ['bwm', 'audi', 'toyota', 'subaru']
  cars.sort(reverse=True)
  cars
#+END_SRC

#+RESULTS:
: ['toyota', 'subaru', 'bwm', 'audi']

用函数 sorted() 临时排序

#+BEGIN_SRC python :session :results output
  cars = ['bmw', 'audi', 'toyota', 'subaru']

  print("Here is the original list")
  print(cars)

  print("\nHere is the sorted list")
  print(sorted(cars))

  print("\nHere is the original list again")
  print(cars)
#+END_SRC

#+RESULTS:
: Here is the original list
: ['bmw', 'audi', 'toyota', 'subaru']
: 
: Here is the sorted list
: ['audi', 'bmw', 'subaru', 'toyota']
: 
: Here is the original list again
: ['bmw', 'audi', 'toyota', 'subaru']

用方法 reverse() 就绪的倒序排列

#+BEGIN_SRC python :session :results output
  cars = ['bmw', 'audi', 'toyota', 'subaru']
  print(cars)

  cars.reverse()
  print(cars)
#+END_SRC

#+RESULTS:
: ['bmw', 'audi', 'toyota', 'subaru']
: ['subaru', 'toyota', 'audi', 'bmw']

用函数 len() 获得列表的长度

#+BEGIN_SRC python :session :results value pp
  cars = ['bwm', 'audi', 'toyota', 'subaru']
  len(cars)
#+END_SRC

#+RESULTS:
: 4

**** Exercises

***** 3-8 放眼世界

#+BEGIN_SRC python :session :results output
places = ['Tokyo', 'Busan', 'Xiamen', 'Beijing', 'Praha', 'İstanbul']
print(places)

print(sorted(places))
print(places)

print(sorted(places, reverse=True))
print(places)

places.reverse()
print(places)
places.reverse()
print(places)

places.sort()
print(places)

places.sort(reverse=True)
print(places)
#+END_SRC

#+RESULTS:
: ['Tokyo', 'Busan', 'Xiamen', 'Beijing', 'Praha', 'İstanbul']
: ['Beijing', 'Busan', 'Praha', 'Tokyo', 'Xiamen', 'İstanbul']
: ['Tokyo', 'Busan', 'Xiamen', 'Beijing', 'Praha', 'İstanbul']
: ['İstanbul', 'Xiamen', 'Tokyo', 'Praha', 'Busan', 'Beijing']
: ['Tokyo', 'Busan', 'Xiamen', 'Beijing', 'Praha', 'İstanbul']
: ['İstanbul', 'Praha', 'Beijing', 'Xiamen', 'Busan', 'Tokyo']
: ['Tokyo', 'Busan', 'Xiamen', 'Beijing', 'Praha', 'İstanbul']
: ['Beijing', 'Busan', 'Praha', 'Tokyo', 'Xiamen', 'İstanbul']
: ['İstanbul', 'Xiamen', 'Tokyo', 'Praha', 'Busan', 'Beijing']

***** 3-9 晚餐嘉宾

#+BEGIN_SRC python :session :results output
  names = ["Tom", "Jerry", "Snoopy", "Racket"]
  print(names[0].title() + ", would you like to have dinner with me?")
  print(names[1].title() + ", would you like to have dinner with me?")
  print(names[2].title() + ", would you like to have dinner with me?")
  print(names[3].title() + ", would you like to have dinner with me?")

  print("I have invitated " + str(len(names)) + " guests.")
#+END_SRC

#+RESULTS:
: Tom, would you like to have dinner with me?
: Jerry, would you like to have dinner with me?
: Snoopy, would you like to have dinner with me?
: Racket, would you like to have dinner with me?
: I have invitated 4 guests.

***** 3-10 尝试使用各个函数

- 方法 append(elt)
- 方法 insert(idx, elt)
- 语句 del lst[idx]
- 方法 pop(idx)
- 方法 remove(elt)
- 方法 sort()
- 函数 sorted()
- 方法 reverse()
- 函数 len()

#+BEGIN_SRC python :session :results output
  characters = []

  characters.append("Tom")
  characters.append("Jerry")
  characters.append("Lisa")
  characters.append("Racket")
  characters.append("Snoopy")
  # http://kungfupanda.wikia.com/wiki/Fung
  characters.append("Fung")

  print(characters)

  first = characters[0]
  del characters[0]
  print(characters)
  characters.insert(0, first)
  print(characters)
  
  last = characters.pop()
  print(characters)
  characters.append(last)
  print(characters)

  fung = "Fung"
  characters.remove(fung)
  print(characters)
  characters.append(fung)
  print(characters)

  print(sorted(characters))
  print(characters)

  characters.sort()
  print(characters)
  characters.reverse()
  print(characters)

  print("I have " + str(len(characters)) + " favorite characters.")
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Fung', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Tom']
['Tom', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Fung']
['Fung', 'Jerry', 'Lisa', 'Racket', 'Snoopy', 'Tom']
['Tom', 'Snoopy', 'Racket', 'Lisa', 'Jerry', 'Fung']
I have 6 favorite characters.
#+END_EXAMPLE

****** Exercises

******* 3-11 有意引发错误

索引超出范围时 Python 会报错

#+BEGIN_SRC python :session :results value pp
empty_list = []
print(empty_list[0])

names = ["Tom"]
print(names[1])
#+END_SRC

** Chapter 4

遍历列表

#+BEGIN_SRC python :session :results output
  magicians = ["alice", "david", "carolina"]
  for magician in magicians:
      print(magician)
#+END_SRC

#+RESULTS:
: alice
: david
: carolina

复杂一点的操作

#+BEGIN_SRC python :session :results output
  magicians = ["alice", "david", "carolina"]
  for magician in magicians:
      print(magician.title() + ", that was a great trick!")
#+END_SRC

#+RESULTS:
: Alice, that was a great trick!
: David, that was a great trick!
: Carolina, that was a great trick!

更复杂一点

#+BEGIN_SRC python :session :results output
  magicians = ['alice', 'david', 'carolina']
  for magician in magicians:
      print(magician.title() + ", that was a great trick!")
      print("I can't wait to see your next trick, " + magician.title() + ".\n")
#+END_SRC

#+RESULTS:
: Alice, that was a great trick!
: I can't wait to see your next trick, Alice.
: 
: David, that was a great trick!
: I can't wait to see your next trick, David.
: 
: Carolina, that was a great trick!
: I can't wait to see your next trick, Carolina.

结束语

#+begin_src python :session :results output
  magicians = ['alice', 'david', 'carolina']
  for magician in magicians:
      print(magician.title() + ", that was a great trick!")
      print("I can't wait to see your next trick, " + magician.title() + ".\n")

  print("Thank you, everyone. That was a great magic show!")
#+end_src

#+RESULTS:
#+BEGIN_EXAMPLE
Alice, that was a great trick!
I can't wait to see your next trick, Alice.

David, that was a great trick!
I can't wait to see your next trick, David.

Carolina, that was a great trick!
I can't wait to see your next trick, Carolina.

Thank you, everyone. That was a great magic show!
#+END_EXAMPLE

*** 缩进

- 缺少缩进
- 不必的缩进
- 忘记 for 后面的冒号

#+BEGIN_SRC python :session :results value pp :tangle missing_colon.py
magicians = ['alice', 'dvaid', 'carolina']
for magician in magicians
   print(magician)
#+END_SRC

*** Exercises

**** 4-1 比萨

#+BEGIN_SRC python :session :results output
  pizzas = ['土豆', '水果', '芝士']

  for pizza in pizzas:
      print(pizza)

  for pizza in pizzas:
      print("I like " + pizza + " pizza")

  print("I don't know if I like pizza.")
#+END_SRC

#+RESULTS:
: 土豆
: 水果
: 芝士
: I like 土豆 pizza
: I like 水果 pizza
: I like 芝士 pizza
: I don't know if I like pizza.

**** 4-1 动物

#+BEGIN_SRC python :session :results output
  cats = ['cat', 'tiger', 'lion']

  for cat in cats:
      print(cat)

  for cat in cats:
      print(cat + " is very dangerous!")

  print("Any of these animals is very dangerous.")
#+END_SRC

#+RESULTS:
: cat
: tiger
: lion
: cat is very dangerous!
: tiger is very dangerous!
: lion is very dangerous!
: Any of these animals is very dangerous

*** 数值列表

#+BEGIN_SRC python :session :results output
  for value in range(1,5):
      print(value)
#+END_SRC

#+RESULTS:
: 1
: 2
: 3
: 4

用函数 list() 和函数 range() 生成数值列表

#+BEGIN_SRC python :session :results value pp
list(range(1,6))
#+END_SRC

#+RESULTS:
: [1, 2, 3, 4, 5]

为 range() 指定步长

#+BEGIN_SRC python :session :results value pp
even_numbers = list(range(2, 11, 2))
even_numbers
#+END_SRC

#+RESULTS:
: [2, 4, 6, 8, 10]

1 到 10 的平方

#+BEGIN_SRC python :session :results output
  squares = []
  for value in range(1,11):
      square = value**2
      squares.append(square)
  print(squares)
#+END_SRC

#+RESULTS:
: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

函数 min() max() 和 sum()

#+BEGIN_SRC python :session :results value pp
digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
min(digits), max(digits), sum(digits)
#+END_SRC

#+RESULTS:
: (0, 9, 45)

列表解析

#+BEGIN_SRC python :session :results output
  squares = [value**2 for value in range(1, 11)]
  print(squares)
#+END_SRC

#+RESULTS:
: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

*** Exercises

**** 4-3 数到 20

#+BEGIN_SRC python :session :results output
  for value in range(1, 21):
      print(value)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
#+END_EXAMPLE

**** 4-4 一百万

#+BEGIN_SRC python :session :results value pp
for value in range(1,1_000_000+1): print(value)
#+END_SRC

**** 4-5 计算一到一百万的和

#+BEGIN_SRC python :session :results output
  numbers = list(range(1, 1_000_000+1))
  print(sum(numbers))
  print(min(numbers))
  print(max(numbers))
#+END_SRC

#+RESULTS:
: 500000500000
: 1
: 1000000

**** 4-6 奇数

#+BEGIN_SRC python :session :results output
  odd_numbers = list(range(1, 21, 2))
  for value in odd_numbers: print(value)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1
3
5
7
9
11
13
15
17
19
#+END_EXAMPLE

**** 4-7 3 的倍数

#+BEGIN_SRC python :session :results output
  three_times_numbers = list(range(3,31,3))
  for value in three_times_numbers:
      print(value)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
3
6
9
12
15
18
21
24
27
30
#+END_EXAMPLE

**** 4-8 立方

#+BEGIN_SRC python :session :results output
  cubes = []

  for value in range(1,11):
      cubes.append(value**3)

  for value in cubes: 
      print(value)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1
8
27
64
125
216
343
512
729
1000
#+END_EXAMPLE

**** 4-9 立方解析

#+BEGIN_SRC python :session :results output
  cubes = [value**3 for value in range(1,11)]
  for value in cubes: 
      print(value)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1
8
27
64
125
216
343
512
729
1000
#+END_EXAMPLE

*** 使用列表的一部分

处理列表的一部分元素即「切片」

#+BEGIN_SRC python :session :results output
  players = ['charles', 'martina', 'michale', 'florence', 'eli']
  print(players[0:3])
#+END_SRC

#+RESULTS:
: ['charles', 'martina', 'michale']

#+BEGIN_SRC python :session :results output
players = ['charles', 'martina', 'michale', 'florence', 'eli']
print(players[1:4])
#+END_SRC

#+RESULTS:
: ['martina', 'michale', 'florence']

#+BEGIN_SRC python :session :results output
players = ['charles', 'martina', 'michele', 'florence', 'eli']
print(players[2:])
#+END_SRC

#+RESULTS:
: ['michele', 'florence', 'eli']

负数

#+BEGIN_SRC python :session :results output
players = ['charles', 'martina', 'michele', 'florence', 'eli']
print(players[-3:])
#+END_SRC

#+RESULTS:
: ['michele', 'florence', 'eli']

#+BEGIN_SRC python :session :results output
  players = ['charles', 'martina', 'michele', 'florence', 'eli']

  print("Here are the first three players on my team:")
  for player in players[:3]:
      print(player.title())
#+END_SRC

#+RESULTS:
: Here are the first three players on my team:
: Charles
: Martina
: Michele


*** 复制列表

用 [:] 复制一个列表

#+BEGIN_SRC python :session :results output
  my_foods = ['pizza', 'falafal', 'carrot cake']
  friend_foods = my_foods[:]

  print("My favorite foods are:")
  print(my_foods)

  print("\nMy friend's favorite foods are:")
  print(friend_foods)
#+END_SRC

#+RESULTS:
: My favorite foods are:
: ['pizza', 'falafal', 'carrot cake']
: 
: My friend's favorite foods are:
: ['pizza', 'falafal', 'carrot cake']

#+BEGIN_SRC python :session :results output
  my_foods = ['pizza', 'falafal', 'carrot cake']
  friend_foods = my_foods[:]

  my_foods.append('apple')
  friend_foods.append('pear')

  print("My favorite foods are:")
  print(my_foods)

  print("\nMy friend's favorite foods are:")
  print(friend_foods)
#+END_SRC

#+RESULTS:
: My favorite foods are:
: ['pizza', 'falafal', 'carrot cake', 'apple']
: 
: My friend's favorite foods are:
: ['pizza', 'falafal', 'carrot cake', 'pear']

*** Exercises

**** 4-10 切片

#+BEGIN_SRC python :session :results output
  even_numbers = list(range(2, 11, 2))
  print(even_numbers)
  print("The first three items in the list are:")
  print(even_numbers[:3])
  print("The items from the midle of the list are:")
  print(even_numbers[1:4])
  print("The last three items in the list are:")
  print(even_numbers[-3:])
#+END_SRC

#+RESULTS:
: [2, 4, 6, 8, 10]
: The first three items in the list are:
: [2, 4, 6]
: The items from the midle of the list are:
: [4, 6, 8]
: The last three items in the list are:
: [6, 8, 10]

**** 4-11 你的批萨和我的批萨

#+BEGIN_SRC python :session :results output
  pizzas = ['土豆', '水果', '芝士']
  friend_pissas = pizzas[:]

  pizzas.append('夏威夷')
  friend_pissas.append('蛋黄虾仁')

  print('My favorite pizzas are:')
  print(pizzas)
  for pizza in pizzas: print(pizza)

  print()

  print("My friend's favorite pizzas are:")
  print(friend_pissas)
  for pizza in friend_pissas: print(pizza)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
My favorite pizzas are:
['土豆', '水果', '芝士', '夏威夷']
土豆
水果
芝士
夏威夷

My friend's favorite pizzas are:
['土豆', '水果', '芝士', '蛋黄虾仁']
土豆
水果
芝士
蛋黄虾仁
#+END_EXAMPLE

**** 4-12 使用多个循环

#+BEGIN_SRC python :session :results output
  my_foods = ['pizza', 'falafal', 'carrot cake']
  friend_foods = my_foods[:]

  print("My favorite foods are:")
  for food in my_foods: print(food)

  print("\nMy friend's favorite foods are:")
  for food in friend_foods: print(food)
#+END_SRC

#+RESULTS:
: My favorite foods are:
: pizza
: falafal
: carrot cake
: 
: My friend's favorite foods are:
: pizza
: falafal
: carrot cake

*** 元组

#+begin_quote
Python将不能修改的值称为不可变的，而不可变的列表被称为元组。
#+end_quote

定义一个元组，并且访问其中的元素

#+BEGIN_SRC python :session :results output
  dimensions = (200, 50)
  print(dimensions[0])
  print(dimensions[1])
#+END_SRC

#+RESULTS:
: 200
: 50

遍历一个元组

#+BEGIN_SRC python :session :results output
  dimensions = (200, 50)
  for dimension in dimensions:
      print(dimension)
#+END_SRC

#+RESULTS:
: 200
: 50

*** Exercises

**** 4-13 自助餐

#+BEGIN_SRC python :session :results output
  foods = ('土豆丝', '凉拌黄瓜', '米饭', '海带汤', '还有一样不知名的菜')
  # foods[0] = '宫保鸡丁'

  foods = ('土豆丝', '豆腐', '米饭', '海带汤', '蒸鸡蛋')
  for food in foods:
      print(food)
#+END_SRC

#+RESULTS:
: 土豆丝
: 豆腐
: 米饭
: 海带汤
: 蒸鸡蛋

*** 代码格式

#+begin_quote
若要提出Python语言修改建议，需要编写Python改进提案（Python Enhancement
Proposal，PEP）
#+end_quote

#+begin_quote
PEP 8是最古老的PEP之一，它向Python程序员提供了代码格式设置指南。PEP 8
的篇幅很长，但大都与复杂的编码结构相关。
#+end_quote

1. 缩进，4 个宽度的空格
2. 行长，最多 79 个字符宽度
3. 空行，需要用，但不能滥用（注意 Python 只关心缩进，不关空行

*** Exercises

**** 4-14 PEP 8

[[https://www.python.org/dev/peps/pep-0008/][PEP 8 -- Style Guide for Python Code | Python.org]]

** Chapter 5

if

#+BEGIN_SRC python :session :results output
  cars = ['audi', 'bmw', 'subaru', 'toyota']

  for car in cars:
      if car == 'bmw':
          print(car.upper())
      else:
          print(car.title())
#+END_SRC

#+RESULTS:
: Audi
: BMW
: Subaru
: Toyota

== 是否相等

#+begin_src python :session :results value pp
car = 'bwm'
car == 'bwm'
#+end_src

#+RESULTS:
: True

#+BEGIN_SRC python :session :results value pp
  car = 'Audi'
  car.lower() == 'audi', car
#+END_SRC

#+RESULTS:
: (True, 'Audi')

!= 是否不相等

#+BEGIN_SRC python :session :results output
  requested_topping = 'mushrooms'

  if requested_topping != 'anchovies':
      print("Hold the anchovies!")
#+END_SRC

#+RESULTS:
: Hold the anchovies!

比较数字

#+BEGIN_SRC python :session :results value pp
age = 19
age == 19
#+END_SRC

#+RESULTS:
: True

#+BEGIN_SRC python :session :results value pp
age = 19
age < 21, age <= 21, age > 21, age >= 21
#+END_SRC

#+RESULTS:
: (True, True, False, False)

and 检查多个条件

#+BEGIN_SRC python :session :results value pp
  age_0 = 22
  age_1 = 18

  age_0 >= 21 and age_1 >= 21
#+END_SRC

#+RESULTS:
: False

or

#+BEGIN_SRC python :session :results value pp
  age_0 = 22
  age_1 = 18

  age_0 >= 21 or age_1 >= 21
#+END_SRC

#+RESULTS:
: True

in

#+BEGIN_SRC python :session :results value pp
  requested_toppings = ['mushrooms', 'onions', 'pineapple']

  'mushrooms' in requested_toppings, 'pepperoni' in requested_toppings
#+END_SRC

#+RESULTS:
: (True, False)

not in

#+BEGIN_SRC python :session :results output
  banned_users = ['andrew', 'carolina', 'david']
  user = 'marie'

  if user not in banned_users:
      print(user.title() + ", you can post a response if you wish.")
#+END_SRC

#+RESULTS:
: Marie, you can post a response if you wish.

Boolean

#+BEGIN_SRC python :session :results value pp
game_active = True
can_edit = False
#+END_SRC

*** Exercises

**** 5-1 条件测试

#+BEGIN_SRC python :session :results output
  car = 'subaru'
  print("Is car == 'subaru'? I predicate True.")
  print(car == 'subaru')

  print("\nIs car == 'audi'? I predicate False.")
  print(car == 'audi')

  number = 4
  print("\nIs number == 4? I predicate True.")
  print(number == 4)

  print("\nIs number == 4.0? I predicate True")
  print(number == 4.0)

  print("\nIs number == '4'? I predicate False")
  print(number == "4")

  print("\nIs number > 4? I predicate False")
  print(number > 4)

  print("\nIs number < 4? I predicate False")
  print(number < 4)

  even_numbers = list(range(2,11, 2))
  print(even_numbers)
  odd_numbers = list(range(1,11, 2))
  print(odd_numbers)

  print("\nIs number in even_numbers? I predicate True")
  print(number in even_numbers)

  print("\nIs number in odd_numbers? I predicate False")
  print(number in odd_numbers)

  print("\nIs number in odd_numbers and number in even_numbers? I predicate False")
  print(number in odd_numbers and number in even_numbers)

  print("\nIs number == 4 and number not in odd_numbers? I predicate True")
  print(number == 4 and number not in odd_numbers)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Is car == 'subaru'? I predicate True.
True

Is car == 'audi'? I predicate False.
False

Is number == 4? I predicate True.
True

Is number == 4.0? I predicate True
True

Is number == '4'? I predicate False
False

Is number > 4? I predicate False
False

Is number < 4? I predicate False
False
[2, 4, 6, 8, 10]
[1, 3, 5, 7, 9]

Is number in even_numbers? I predicate True
True

Is number in odd_numbers? I predicate False
False

Is number in odd_numbers and number in even_numbers? I predicate False
False

Is number == 4 and number not in odd_numbers? I predicate True
True
#+END_EXAMPLE

**** 5-2 更多的条件测试

#+BEGIN_SRC python :session :results output
  car_0 = 'Audi'
  car_2 = 'bmw'

  print("Is car_0 == 'Audi'? I predicate True")
  print(car_0 == 'Audi')

  print("\nIs car_0 == 'audi'? I predicate False")
  print(car_0 == 'audi')

  print("\nIs car_0.lower() == 'audi'? I predicate True")
  print(car_0.lower() == 'audi')

  number_0 = 3
  number_1 = 5

  print("\nIs number_0 == 3? I predicate True")
  print(number_0 == 3)

  print("\nIs number_0 != 3? I predicate False")
  print(number_0 != 3)

  print("\nIs number_0 > 0? I predicate True")
  print(number_0 > 0)

  print("\nIs number_0 > 10? I predicate False")
  print(number_0 > 10)

  print("\nIs number_0 < 10? I predicate True")
  print(number_0 < 10)

  print("\nIs number_0 < 0? I predicate False")
  print(number_0 < 0)

  print("\nIs number_0 <= 3? I predicate True")
  print(number_0 <= 3)

  print("\nIs number_0 <= 0? I predicate False")
  print(number_0 <= 0)

  print("\nIs number_0 >= 3? I predicate True")
  print(number_0 >= 3)

  print("\nIs number_0 >= 4? I predicate False")
  print(number_0 >= 4)

  number_0 = 3
  number_1 = 5

  print("\nIs number_0 > 0 and number_1 > 0? I predicate True")
  print(number_0 > 0 and number_1 > 0)

  print("\nIs number_0 > 4 and number_1 > 4? I predicate False")
  print(number_0 > 4 and number_1 > 4)

  print("\nIs number_0 > 4 or number_1 > 4? I predicate True")
  print(number_0 > 4 or number_1 > 4)

  print("\nIs number_0 > 5 or number_1 > 5? I predicate False")
  print(number_0 > 5 or number_1 > 5)

  even_numbers = list(range(2,11,2))
  print(even_numbers)

  print("\nIs 3 in even_numbers? I predicate False")
  print(3 in even_numbers)

  print("\nIs 4 in even_numbers? I predicate True")
  print(4 in even_numbers)

  print("\nIs 3 not in even_numbers? I predicate True")
  print(3 not in even_numbers)

  print("\nIs 4 not in even_numbers? I predicate False")
  print(4 not in even_numbers)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Is car_0 == 'Audi'? I predicate True
True

Is car_0 == 'audi'? I predicate False
False

Is car_0.lower() == 'audi'? I predicate True
True

Is number_0 == 3? I predicate True
True

Is number_0 != 3? I predicate False
False

Is number_0 > 0? I predicate True
True

Is number_0 > 10? I predicate False
False

Is number_0 < 10? I predicate True
True

Is number_0 < 0? I predicate False
False

Is number_0 <= 3? I predicate True
True

Is number_0 <= 0? I predicate False
False

Is number_0 >= 3? I predicate True
True

Is number_0 >= 4? I predicate False
False

Is number_0 > 0 and number_1 > 0? I predicate True
True

Is number_0 > 4 and number_1 > 4? I predicate False
False

Is number_0 > 4 or number_1 > 4? I predicate True
True

Is number_0 > 5 or number_1 > 5? I predicate False
False
[2, 4, 6, 8, 10]

Is 3 in even_numbers? I predicate False
False

Is 4 in even_numbers? I predicate True
True

Is 3 not in even_numbers? I predicate True
True

Is 4 not in even_numbers? I predicate False
False
#+END_EXAMPLE

*** if

#+BEGIN_SRC python :session :results output
  age = 19
  if age >= 18:
      print("You are old enough to vote!")
#+END_SRC

#+RESULTS:
: You are old enough to vote!

#+begin_src python :session :results output
  age = 19
  if age >= 18:
      print("You are old enough to vote!")
      print("Have you registered to vote yet?")
#+end_src

#+RESULTS:
: You are old enough to vote!
: Have you registered to vote yet?

if-else

#+begin_src python :session :results output
  age = 17
  if age >= 18:
      print("You are old enough to vote!")
      print("Have you registered to vote yet?")
  else:
      print("Sorry, you are too young to vote.")
      print("Please register to vote as soon as you turn 18!")
#+end_src

#+RESULTS:
: Sorry, you are too young to vote.
: Please register to vote as soon as you turn 18!

if-elif-else

#+BEGIN_SRC python :session :results output
  age = 12

  if age < 4:
      print("Your admission cost is $0.")
  elif age < 18:
      print("Your admission cost is $5.")
  else:
      print("Your admission cost is $10.")
#+END_SRC

#+RESULTS:
: Your admission cost is $5.

更简洁

#+BEGIN_SRC python :session :results output
  age = 12

  if age < 4:
      price = 0
  elif age < 19:
      price = 5
  else:
      price = 10

  print("Your admission cost is $" + str(price) + ".")
#+END_SRC

#+RESULTS:
: Your admission cost is $5.

用 elif 替代最后的 else

#+BEGIN_SRC python :session :results output
  age = 12

  if age < 4:
      price = 0
  elif age < 18:
      price = 5
  elif age < 65:
      price = 10
  elif age >= 65:
      price = 5

  print("Your admission cost is $" + str(price) + ".")
#+END_SRC

#+RESULTS:
: Your admission cost is $5.

用并列的、独立的 if 测试多个条件

#+BEGIN_SRC python :session :results output
  requested_toppings = ['mushrooms', 'extra cheese']

  if 'mushrooms' in requested_toppings:
      print("Adding mushrooms")

  if 'pepperoni' in requested_toppings:
      print("Adding pepperoni")

  if 'extra cheese' in requested_toppings:
      print("Add extra cheese")

  print("\nFinished making your pizza!")
#+END_SRC

#+RESULTS:
: Adding mushrooms
: Add extra cheese
: 
: Finished making your pizza!

*** Exercises

**** 5-3 外星人颜色 #1

#+BEGIN_SRC python :session :results output
  alien_color = 'green'

  if alien_color == 'green':
      print("You get 5 points")

  alien_color = 'red'

  if alien_color == 'green':
      print("You get 5 points")
#+END_SRC

#+RESULTS:
: You get 5 points

**** 5-4 外星人颜色 #2

#+BEGIN_SRC python :session :results output
  alien_color = 'green'

  if alien_color == 'green':
      print("You get 5 points")
  else:
      print("You get 10 points")

  alien_color = 'red'

  if alien_color == 'green':
      print("You get 5 points")
  else:
      print("You get 10 points")
#+END_SRC

#+RESULTS:
: You get 5 points
: You get 10 points

**** 5-5 外星人颜色 #3

#+BEGIN_SRC python :session :results output
  alien_color = 'green'

  if alien_color == 'green':
      print("You get 5 points")
  elif alien_color == 'yellow':
      print("You get 10 points")
  elif alien_color == 'red':
      print("you get 15 points")

  alien_color = 'yellow'

  if alien_color == 'green':
      print("You get 5 points")
  elif alien_color == 'yellow':
      print("You get 10 points")
  elif alien_color == 'red':
      print("you get 15 points")

  alien_color = 'red'

  if alien_color == 'green':
      print("You get 5 points")
  elif alien_color == 'yellow':
      print("You get 10 points")
  elif alien_color == 'red':
      print("you get 15 points")
    
#+END_SRC

#+RESULTS:
: You get 5 points
: You get 10 points
: you get 15 points

**** 5-6 人生的不同阶段

#+BEGIN_SRC python :session :results output
  age = 25

  if age < 2:
      print("婴儿")
  elif age < 4:
      print("蹒跚学步")
  elif age < 13:
      print("儿童")
  elif age < 20:
      print("青少年")
  elif age < 65:
      print("成年人")
  elif age >= 65:
      print("老年人")
#+END_SRC

#+RESULTS:
: 成年人

**** 5-7 喜欢的水果

#+BEGIN_SRC python :session :results output
  favorite_fruits = ['火龙果', '橙子', '樱桃']

  if '樱桃' in favorite_fruits:
      print("You really like 樱桃!")

  if '火龙果' in favorite_fruits:
      print("You really like 火龙果!")

  if '橙子' in favorite_fruits:
      print("You really like 橙子!")
#+END_SRC

#+RESULTS:
: You really like 樱桃!
: You really like 火龙果!
: You really like 橙子!

*** if 和 list

#+BEGIN_SRC python :session :results output
  requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']

  for requested_topping in requested_toppings:
      if requested_topping == 'green peppers':
          print("Sorry, we are out of green peppers right now.")
      else:
          print("Adding " + requested_topping + ".")

  print("\nFinished making your pizza!")
#+END_SRC

#+RESULTS:
: Adding mushrooms.
: Sorry, we are out of green peppers right now.
: Adding extra cheese.
: 
: Finished making your pizza!

确认列表是否为空

#+BEGIN_SRC python :session :results output
  requested_toppings = []

  if requested_toppings:
      for requested_topping in requested_toppings:
          print("Adding " + requested_topping + ".")
      print("\nFinished making your pizza!")
  else:
      print("Are you sure you want a plain pizza?")
#+END_SRC

#+RESULTS:
: Are you sure you want a plain pizza?

使用多个列表

#+BEGIN_SRC python :session :results output
  available_toppings = ['mushrooms', 'clives', 'green peppers',
                        'pepperoni', 'pineapple', 'extra cheese']
  requested_toppings = ['mushrooms', 'fresh fries', 'extra cheese']

  for requested_topping in requested_toppings:
      if requested_topping in available_toppings:
          print("Adding " + requested_topping + ".")
      else:
          print("Sorry, we don't have " + requested_topping + ".")

  print("\nFinished making your pizza!")
#+END_SRC

#+RESULTS:
: Adding mushrooms.
: Sorry, we don't have fresh fries.
: Adding extra cheese.
: 
: Finished making your pizza!

*** Exercises

**** 5-8 以特殊的方式跟管理员打招呼

#+BEGIN_SRC python :session :results output
  users = ['bob', 'admin', 'jerry', 'tom', 'kyle']

  for user in users:
      if user == 'admin':
          print("Hello admin, would you like to see a status report?")
      else:
          print("Hello " + user + ", thank you for logging in again.")
#+END_SRC

#+RESULTS:
: Hello bob, thank you for logging in again.
: Hello admin, would you like to see a status report?
: Hello jerry, thank you for logging in again.
: Hello tom, thank you for logging in again.
: Hello kyle, thank you for logging in again.

**** 5-9 处理没有用户的情形

#+BEGIN_SRC python :session :results output
  users = ['bob', 'admin', 'jerry', 'tom', 'kyle']

  del users[:]
  print(users)

  if users:
      for user in users:
          if user == 'admin':
              print("Hello admin, would you like to see a status report?")
          else:
              print("Hello " + user + ", thank you for logging in again.")
  else:
      print("We need to find some users!")
#+END_SRC

#+RESULTS:
: []
: We need to find some users!

**** 5-10 检查用户名

#+BEGIN_SRC python :session :results output
  current_users = ['alice', 'bob', 'carolina', 'david', 'eli']
  new_users = ['tom', 'jerry', 'Eli', 'gammy', 'bob']

  for user in new_users:
      if user.lower() in current_users:
          print(user + " have been taken, please pick another one")
      else:
          print(user + " is a good name")
#+END_SRC

#+RESULTS:
: tom is a good name
: jerry is a good name
: Eli have been taken, please pick another one
: gammy is a good name
: bob have been taken, please pick another one

**** 5-11 序数

#+BEGIN_SRC python :session :results output
  numbers = range(1,10)
  for number in numbers:
      if number == 1:
          print("1st")
      elif number == 2:
          print("2nd")
      elif number == 3:
          print("3rd")
      else:
          print(str(number) + "th")
#+END_SRC

#+RESULTS:
: 1st
: 2nd
: 3rd
: 4th
: 5th
: 6th
: 7th
: 8th
: 9th

*** Exercises

**** 5-12 设置 if 语句的格式

#+begin_quote
在诸如==、>=和<=等比较运算符两边各添加一个空格，例如，if age < 4:要比
if age<4:好。
#+end_quote

**** 5-13 自己的想法

- 贪吃蛇游戏
- 扫雷游戏
- 转换 Org Mode 成 HTML
