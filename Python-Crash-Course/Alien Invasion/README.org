#+TITLE: 外星人入侵
#+DATE: <2018-04-23 Mon>

* 12-1 蓝色天空

创建一个背景为蓝色的Pygame窗口

#+BEGIN_SRC python :tangle 12-1.py
  import sys
  import pygame

  def run_game():
      pygame.init()
      screen = pygame.display.set_mode()
      pygame.display.set_caption("12-1 蓝色天空")

      while True:
          for event in pygame.event.get():
              if event.type == pygame.QUIT:
                  sys.exit()

          screen.fill((0, 0, 255))
          pygame.display.flip()

  run_game()
#+END_SRC

* 12-2 游戏角色

找一幅你喜欢的游戏角色位图图像或将一幅图像转换为位图。创建一个类，将该
角色绘制到屏幕中央，并将该图像的背景色设置为屏幕背景色，或将屏幕背景色
设置为该图像的背景色。

duck.py

#+BEGIN_SRC python :tangle duck.py
  import pygame

  class Duck():

      def __init__(self, screen):
          self.screen = screen
          self.image = pygame.image.load('images/duck.bmp')
          self.rect = self.image.get_rect()
          screen_rect = screen.get_rect()
          self.rect.centerx = screen_rect.centerx
          self.rect.centery = screen_rect.centery

      def blitme(self):
          self.screen.blit(self.image, self.rect)
#+END_SRC

12-2.py

#+BEGIN_SRC python :tangle 12-2.py
  import sys

  import pygame

  from duck import Duck


  def run_game():
      pygame.init()
      screen = pygame.display.set_mode()
      pygame.display.set_caption("12-2 游戏角色")
      duck = Duck(screen)

      while True:
          for event in pygame.event.get():
              if event.type == pygame.QUIT:
                  sys.exit()

          screen.fill([0, 206, 255])
          duck.blitme()

          # 让最近绘制的屏幕可见
          pygame.display.flip()


  run_game()
#+END_SRC

* 12-3 火箭

编写一个游戏，开始时屏幕中央有一个火箭，而玩家可使用四个方向键上下左右
移动火箭。请务必确保火箭不会移到屏幕外面。

racket.py

#+BEGIN_SRC python :tangle racket.py
  import pygame

  class Racket():

      def __init__(self, screen):
          """初始化飞船并设置其初始位置"""
          self.screen = screen

          # 加载飞船图形并获取其外接矩形
          self.image = pygame.image.load('images/ship.bmp')
          self.rect = self.image.get_rect()
          self.screen_rect = screen.get_rect()

          # 将每艘新飞船放在屏幕中央
          self.rect.centerx = self.screen_rect.centerx
          self.rect.centery = self.screen_rect.centery

          # 在飞船的属性 center 中存储小数值
          self.x = float(self.rect.centerx)
          self.y = float(self.rect.centery)

          # 移动标志
          self.moving_right = False
          self.moving_left = False
          self.moving_up = False
          self.moving_down = False

          self.speed_factor = 4.0

      def update(self):
          if self.moving_right and self.rect.right < self.screen_rect.right:
              self.x += self.speed_factor
          if self.moving_left and self.rect.left > 0:
              self.x -= self.speed_factor
          if self.moving_up and self.rect.top > 0:
              self.y -= self.speed_factor
          if self.moving_down and self.rect.bottom < self.screen_rect.bottom:
              self.y += self.speed_factor

          # 根据 self.center 更新 rect 对象
          self.rect.centerx = self.x
          self.rect.centery = self.y

      def blitme(self):
          """在指定位置绘制飞船"""
          self.screen.blit(self.image, self.rect)
#+END_SRC


12-3.py

#+BEGIN_SRC python :tangle 12-3.py
  import sys

  import pygame

  from settings import Settings
  from racket import Racket

  def check_events(racket):
      for event in pygame.event.get():
          if event.type == pygame.QUIT:
              sys.exit()

          elif event.type == pygame.KEYDOWN:
              if event.key == pygame.K_RIGHT:
                  racket.moving_right = True
              elif event.key == pygame.K_LEFT:
                  racket.moving_left = True
              elif event.key == pygame.K_UP:
                  racket.moving_up = True
              elif event.key == pygame.K_DOWN:
                  racket.moving_down = True

          elif event.type == pygame.KEYUP:
              if event.key == pygame.K_RIGHT:
                  racket.moving_right = False
              elif event.key == pygame.K_LEFT:
                  racket.moving_left = False
              elif event.key == pygame.K_UP:
                  racket.moving_up = False
              elif event.key == pygame.K_DOWN:
                  racket.moving_down = False

  def run_game():
      pygame.init()
      ai_settings = Settings()
      screen = pygame.display.set_mode((ai_settings.screen_width,
                                        ai_settings.screen_height))
      pygame.display.set_caption("12-3 火箭")
      racket = Racket(screen)

      while True:
          check_events(racket)
          racket.update()

          screen.fill(ai_settings.bg_color)
          racket.blitme()
          pygame.display.flip()

  run_game()
#+END_SRC
