#+TITLE: 外星人入侵
#+DATE: <2018-04-23 Mon>

* 12-1 蓝色天空

创建一个背景为蓝色的Pygame窗口

#+BEGIN_SRC python :tangle 12-1.py
  import sys
  import pygame

  def run_game():
      pygame.init()
      screen = pygame.display.set_mode()
      pygame.display.set_caption("12-1 蓝色天空")

      while True:
          for event in pygame.event.get():
              if event.type == pygame.QUIT:
                  sys.exit()

          screen.fill((0, 0, 255))
          pygame.display.flip()

  run_game()
#+END_SRC

* 12-2 游戏角色

找一幅你喜欢的游戏角色位图图像或将一幅图像转换为位图。创建一个类，将该
角色绘制到屏幕中央，并将该图像的背景色设置为屏幕背景色，或将屏幕背景色
设置为该图像的背景色。

duck.py

#+BEGIN_SRC python :tangle duck.py
  import pygame

  class Duck():

      def __init__(self, screen):
          self.screen = screen
          self.image = pygame.image.load('images/duck.bmp')
          self.rect = self.image.get_rect()
          screen_rect = screen.get_rect()
          self.rect.centerx = screen_rect.centerx
          self.rect.centery = screen_rect.centery

      def blitme(self):
          self.screen.blit(self.image, self.rect)
#+END_SRC

12-2.py

#+BEGIN_SRC python :tangle 12-2.py
  import sys

  import pygame

  from duck import Duck


  def run_game():
      pygame.init()
      screen = pygame.display.set_mode()
      pygame.display.set_caption("12-2 游戏角色")
      duck = Duck(screen)

      while True:
          for event in pygame.event.get():
              if event.type == pygame.QUIT:
                  sys.exit()

          screen.fill([0, 206, 255])
          duck.blitme()

          # 让最近绘制的屏幕可见
          pygame.display.flip()


  run_game()
#+END_SRC

* 12-3 火箭

编写一个游戏，开始时屏幕中央有一个火箭，而玩家可使用四个方向键上下左右
移动火箭。请务必确保火箭不会移到屏幕外面。

racket.py

#+BEGIN_SRC python :tangle racket.py
  import pygame

  class Racket():

      def __init__(self, screen):
          """初始化飞船并设置其初始位置"""
          self.screen = screen

          # 加载飞船图形并获取其外接矩形
          self.image = pygame.image.load('images/ship.bmp')
          self.rect = self.image.get_rect()
          self.screen_rect = screen.get_rect()

          # 将每艘新飞船放在屏幕中央
          self.rect.centerx = self.screen_rect.centerx
          self.rect.centery = self.screen_rect.centery

          # 在飞船的属性 center 中存储小数值
          self.x = float(self.rect.centerx)
          self.y = float(self.rect.centery)

          # 移动标志
          self.moving_right = False
          self.moving_left = False
          self.moving_up = False
          self.moving_down = False

          self.speed_factor = 4.0

      def update(self):
          if self.moving_right and self.rect.right < self.screen_rect.right:
              self.x += self.speed_factor
          if self.moving_left and self.rect.left > 0:
              self.x -= self.speed_factor
          if self.moving_up and self.rect.top > 0:
              self.y -= self.speed_factor
          if self.moving_down and self.rect.bottom < self.screen_rect.bottom:
              self.y += self.speed_factor

          # 根据 self.center 更新 rect 对象
          self.rect.centerx = self.x
          self.rect.centery = self.y

      def blitme(self):
          """在指定位置绘制飞船"""
          self.screen.blit(self.image, self.rect)
#+END_SRC


12-3.py

#+BEGIN_SRC python :tangle 12-3.py
  import sys

  import pygame

  from settings import Settings
  from racket import Racket

  def check_events(racket):
      for event in pygame.event.get():
          if event.type == pygame.QUIT:
              sys.exit()

          elif event.type == pygame.KEYDOWN:
              if event.key == pygame.K_RIGHT:
                  racket.moving_right = True
              elif event.key == pygame.K_LEFT:
                  racket.moving_left = True
              elif event.key == pygame.K_UP:
                  racket.moving_up = True
              elif event.key == pygame.K_DOWN:
                  racket.moving_down = True

          elif event.type == pygame.KEYUP:
              if event.key == pygame.K_RIGHT:
                  racket.moving_right = False
              elif event.key == pygame.K_LEFT:
                  racket.moving_left = False
              elif event.key == pygame.K_UP:
                  racket.moving_up = False
              elif event.key == pygame.K_DOWN:
                  racket.moving_down = False

  def run_game():
      pygame.init()
      ai_settings = Settings()
      screen = pygame.display.set_mode((ai_settings.screen_width,
                                        ai_settings.screen_height))
      pygame.display.set_caption("12-3 火箭")
      racket = Racket(screen)

      while True:
          check_events(racket)
          racket.update()

          screen.fill(ai_settings.bg_color)
          racket.blitme()
          pygame.display.flip()

  run_game()
#+END_SRC

* 12-4 按键

创建一个程序，显示一个空屏幕。在事件循环中，每当检测到pygame.KEYDOWN事
件时都打印属性event.key。运行这个程序，并按各种键，看看Pygame如何响应。

12-4.py

#+BEGIN_SRC python :tangle 12-4.py
  import sys
  import pygame

  def run_game():
      pygame.init()
      screen = pygame.display.set_mode((400, 200))
      pygame.display.set_caption("12-4 按键")

      while True:
          for event in pygame.event.get():
              if event.type == pygame.QUIT:
                  sys.exit()
              elif event.type == pygame.KEYDOWN:
                  key = event.key
                  print(key)
                  print(chr(key))
                  print('-' * 80)

          screen.fill((0, 0, 255))
          pygame.display.flip()

  run_game()

#+END_SRC

* 12-5 侧面射击

12-5.py

#+BEGIN_SRC python :tangle 12-5.py
  import sys

  import pygame
  from pygame.sprite import Sprite, Group


  class Settings():
      """存储《外星人入侵》的所有设置的类"""

      def __init__(self):
          """初始化游戏的设置"""
          # 屏幕设置
          self.screen_width = 1200
          self.screen_height = 800
          self.bg_color = (230, 230, 230)

          # 飞船设置
          self.ship_speed_factor = 3

          # 子弹设置
          self.bullet_speed_factor = 2
          self.bullet_width = 15
          self.bullet_height = 3
          self.bullet_color = 60, 60, 60
          self.bullet_allowed = 3


  class Bullet(Sprite):
      """一个对飞船发射的子弹进行管理的类"""

      def __init__(self, ai_settings, screen, ship):
          """在飞船所在的位置创建一个子弹对象"""
          super().__init__()
          self.screen = screen

          self.rect = pygame.Rect(0, 0, ai_settings.bullet_width,
                                  ai_settings.bullet_height)
          self.rect.centery = ship.rect.centery
          self.rect.right = ship.rect.right

          # 子弹位置
          self.x = float(self.rect.x)

          self.color = ai_settings.bullet_color
          self.speed_factor = ai_settings.bullet_speed_factor

      def update(self):
          """向上移动子弹"""
          self.x += self.speed_factor
          self.rect.x = self.x

      def draw_bullet(self):
          """在屏幕上绘制子弹"""
          pygame.draw.rect(self.screen, self.color, self.rect)


  class Ship():

      def __init__(self, ai_settings, screen):
          """初始化飞船并设置其初始位置"""
          self.screen = screen

          # 加载飞船图形并获取其外接矩形
          self.image = pygame.image.load('images/ship2.bmp')
          self.rect = self.image.get_rect()
          self.screen_rect = screen.get_rect()

          # 将每艘新飞船放在屏幕底部中央
          self.rect.left = self.screen_rect.left
          self.rect.centery = self.screen_rect.centery

          # 在飞船的属性 center 中存储小数值
          self.center = float(self.rect.centery)

          # 移动标志
          self.moving_up = False
          self.moving_down = False

          self.speed_factor = ai_settings.ship_speed_factor

      def update(self):
          if self.moving_down and self.rect.bottom < self.screen_rect.bottom:
              self.center += self.speed_factor
          if self.moving_up and self.rect.top > 0:
              self.center -= self.speed_factor    

          # 根据 self.center 更新 rect 对象
          self.rect.centery = self.center


      def blitme(self):
          """在指定位置绘制飞船"""
          self.screen.blit(self.image, self.rect)


  def check_events(ai_settings, screen, ship, bullets):
      for event in pygame.event.get():
          if event.type in (pygame.QUIT, pygame.MOUSEBUTTONDOWN):
              sys.exit()
          elif event.type == pygame.KEYDOWN:
              if event.key == pygame.K_DOWN:
                  ship.moving_down = True
              elif event.key == pygame.K_UP:
                  ship.moving_up = True
              elif event.key == pygame.K_SPACE:
                  if len(bullets) < ai_settings.bullet_allowed:
                      new_bullet = Bullet(ai_settings, screen, ship)
                      bullets.add(new_bullet)
          elif event.type == pygame.KEYUP:
              if event.key == pygame.K_DOWN:
                  ship.moving_down = False
              elif event.key == pygame.K_UP:
                  ship.moving_up = False

  def run_game():
      pygame.init()
      ai_settings = Settings()
      screen = pygame.display.set_mode(
          (ai_settings.screen_width, ai_settings.screen_height))
      pygame.display.set_caption("12-5 侧面射击")
      ship = Ship(ai_settings, screen)
      bullets = Group()

      while True:
          check_events(ai_settings, screen, ship, bullets)
          # 背景
          screen.fill(ai_settings.bg_color)
          # 飞船位置
          ship.update()
          # 显示飞船
          ship.blitme()

          # 更新子弹的位置
          bullets.update()

          # 删除已消失的子弹
          for bullet in bullets:
              if bullet.rect.right >= screen.get_rect().right:
                  bullets.remove(bullet)

          # 显示子弹
          for bullet in bullets:
              bullet.draw_bullet()

          pygame.display.flip()

  run_game()
#+END_SRC

* 13-1 星星

找一幅星星图像，并在屏幕上显示一系列整齐排列的星星。

13-1.py

#+BEGIN_SRC python :tangle 13-1.py
  import sys
  import pygame
  from pygame.sprite import Sprite, Group

  class Star(Sprite):
      """表示一个星星的类"""

      def __init__(self, screen):
          super().__init__()
          self.screen = screen
          self.image = pygame.image.load('images/star.bmp')
          self.rect = self.image.get_rect()

      def blitme(self):
          self.screen.blit(self.image, self.rect)

  def create_star(screen, stars, col_number, row_number):
      star = Star(screen)
      star.rect.x = star.rect.width + 2 * star.rect.width * col_number
      star.rect.y = star.rect.height + 2 * star.rect.height * row_number
      stars.add(star)

  def create_stars(screen, stars):
      star = Star(screen)
      screen_rect = screen.get_rect()
      for row_number in range(int(screen_rect.height / (2 * star.rect.height))):
          for col_number in range(int(screen_rect.width / (2 * star.rect.width))):
              create_star(screen, stars, col_number, row_number)

  def run_game():
      pygame.init()
      screen_width, screen_height = 960, 720
      screen = pygame.display.set_mode((screen_width, screen_height))
      pygame.display.set_caption("13-1 星星")
      stars = Group()
      create_stars(screen, stars)

      while True:
          for event in pygame.event.get():
              if event.type == pygame.QUIT:
                  sys.exit()

          stars.draw(screen)
          pygame.display.flip()

  run_game()
#+END_SRC

* 13-2 更逼真的星星

为让星星的分布更逼真，可随机地放置星星。本书前面说过，可像下面这样来生
成随机数：

13-2.py

#+BEGIN_SRC python :tangle 13-2.py
  import sys
  from random import randint

  import pygame
  from pygame.sprite import Sprite, Group

  class Star(Sprite):
      """表示一个星星的类"""

      def __init__(self, screen):
          super().__init__()
          self.screen = screen
          self.image = pygame.image.load('images/star.bmp')
          self.rect = self.image.get_rect()

      def blitme(self):
          self.screen.blit(self.image, self.rect)

  def create_star(screen, stars, col_number, row_number):
      star = Star(screen)
      star.rect.x = randint(0, star.rect.width) + 2 * star.rect.width * col_number
      star.rect.y = randint(0, star.rect.height) + 2 * star.rect.height * row_number
      stars.add(star)

  def create_stars(screen, stars):
      star = Star(screen)
      screen_rect = screen.get_rect()
      for row_number in range(int(screen_rect.height / (2 * star.rect.height))):
          for col_number in range(int(screen_rect.width / (2 * star.rect.width))):
              create_star(screen, stars, col_number, row_number)

  def run_game():
      pygame.init()
      screen_width, screen_height = 960, 720
      screen = pygame.display.set_mode((screen_width, screen_height))
      pygame.display.set_caption("13-1 星星")
      stars = Group()
      create_stars(screen, stars)

      while True:
          for event in pygame.event.get():
              if event.type == pygame.QUIT:
                  sys.exit()

          stars.draw(screen)
          pygame.display.flip()

  run_game()
#+END_SRC

